File 'dominion.c'
Lines executed:29.93% of 558
Branches executed:37.35% of 415
Taken at least once:22.17% of 415
Calls executed:20.00% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 76410 returned 100% blocks executed 83%
    76410:    8:int compare(const void* a, const void* b) {
    76410:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    76410:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    20376:   12:    return -1;
    56034:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2000 returned 100% blocks executed 94%
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
call    0 returned 100%
     2000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   220000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   200000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2000:   73:  if (numPlayers == 2)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        -:   74:    {
      906:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     1094:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
     1094:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2000:   87:  if (numPlayers == 2)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        -:   88:    {
      906:   89:      state->supplyCount[estate] = 8;
      906:   90:      state->supplyCount[duchy] = 8;
      906:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     1094:   95:      state->supplyCount[estate] = 12;
     1094:   96:      state->supplyCount[duchy] = 12;
     1094:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  102:  state->supplyCount[silver] = 40;
     2000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   330000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   310000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
      906:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     1094:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    18000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    20000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   290000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     7094:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  139:    {
     5094:  140:      state->deckCount[i] = 0;
    20376:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    15282:  143:	  state->deck[i][j] = estate;
    15282:  144:	  state->deckCount[i]++;
        -:  145:	}
    40752:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    35658:  148:	  state->deck[i][j] = copper;
    35658:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     7094:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  155:    {
     5094:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     7094:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     5094:  166:      state->handCount[i] = 0;
     5094:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    54000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2000:  182:  state->outpostPlayed = 0;
     2000:  183:  state->phase = 0;
     2000:  184:  state->numActions = 1;
     2000:  185:  state->numBuys = 1;
     2000:  186:  state->playedCardCount = 0;
     2000:  187:  state->whoseTurn = 0;
     2000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     2000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     2000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 5094 returned 100% blocks executed 94%
     5094:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     5094:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     5094:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
     5094:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    61128:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    50940:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    50940:  216:    newDeck[newDeckPos] = state->deck[player][card];
    50940:  217:    newDeckPos++;
   177925:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
   126985:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    50940:  221:    state->deckCount[player]--;
        -:  222:  }
    56034:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    50940:  224:    state->deck[player][i] = newDeck[i];
    50940:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     5094:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 2000 returned 100% blocks executed 80%
     2000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     2000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     2000:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     2000:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     2000:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
     2000:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     2000:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 79% (fallthrough)
branch  2 taken 21%
        -:  259:    {
     1589:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
      411:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
      411:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
      411:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 2000 returned 100% blocks executed 100%
     2000:  315:int handCard(int handPos, struct gameState *state) {
     2000:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2411 returned 100% blocks executed 100%
     2411:  320:int supplyCount(int card, struct gameState *state) {
     2411:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4000 returned 100% blocks executed 100%
     4000:  346:int whoseTurn(struct gameState *state) {
     4000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 10000 returned 100% blocks executed 38%
    10000:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    10000:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    10000:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    10000:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    10000:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    10000:  576:    state->deckCount[player]--;
    10000:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    10000:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 7394 returned 100% blocks executed 30%
     7394:  583:int getCost(int cardNumber)
        -:  584:{
     7394:  585:  switch( cardNumber ) 
branch  0 taken 8%
branch  1 taken 11%
branch  2 taken 9%
branch  3 taken 5%
branch  4 taken 27%
branch  5 taken 14%
branch  6 taken 26%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
      606:  588:      return 0;
        -:  589:    case estate:
      788:  590:      return 2;
        -:  591:    case duchy:
      687:  592:      return 5;
        -:  593:    case province:
      406:  594:      return 8;
        -:  595:    case copper:
     1978:  596:      return 0;
        -:  597:    case silver:
     1001:  598:      return 3;
        -:  599:    case gold:
     1928:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function smithyRefact called 0 returned 0% blocks executed 0%
    #####:  646:int smithyRefact(int currentPlayer, struct gameState *state, int handPos, int i)
        -:  647:{
        -:  648:	//+3 Cards
    #####:  649:      for (i = 0; i < 5; i++) // changed from 3 cards to 5
branch  0 never executed
branch  1 never executed
        -:  650:	{
    #####:  651:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  652:	}
        -:  653:			
        -:  654:      //discard card from hand
    #####:  655:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  656:      return 0;
        -:  657:}
        -:  658:
function adventurerRefact called 0 returned 0% blocks executed 0%
    #####:  659:int adventurerRefact(int currentPlayer, struct gameState *state, int temphand[], int drawntreasure, int cardDrawn, int z)
        -:  660:{	  
    #####:  661:	while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  662:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  663:			shuffle(currentPlayer, state);
call    0 never executed
        -:  664:		}
    #####:  665:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  666:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  667:	if (cardDrawn == copper || cardDrawn == silver) // removed gold as part of the statement || cardDrawn == gold
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  668:		drawntreasure++;
        -:  669:	else{
    #####:  670:		temphand[z]=cardDrawn;
    #####:  671:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  672:		z++;
        -:  673:		}
        -:  674:    }
        -:  675:    
    #####:  676:	while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  677:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  678:		z=z-1;
        -:  679:    }
    #####:  680:    return 0;
        -:  681:}
        -:  682:
function cutpurseRefact called 0 returned 0% blocks executed 0%
    #####:  683:int cutpurseRefact(int currentPlayer, struct gameState *state, int handPos, int i, int j, int k)
        -:  684:{
    #####:  685:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  686:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  687:	{
    #####:  688:	  if (i == currentPlayer)  // removed not from statement != currentPlayer
branch  0 never executed
branch  1 never executed
        -:  689:	    {
    #####:  690:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  691:		{
    #####:  692:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  693:		    {
    #####:  694:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  695:		      break;
        -:  696:		    }
    #####:  697:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  698:		    {
    #####:  699:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  700:			{
        -:  701:			  if (DEBUG)
        -:  702:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  703:			}	
    #####:  704:		      break;
        -:  705:		    }		
        -:  706:		}
        -:  707:					
        -:  708:	    }
        -:  709:				
        -:  710:	}				
        -:  711:
        -:  712:      //discard played card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  714:
    #####:  715:      return 0;
        -:  716:}
        -:  717:
function mineRefact called 2000 returned 100% blocks executed 95%
     2000:  718:int mineRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  719:{
     2000:  720:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
     2000:  722:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:  723:	{
        2:  724:	  return -1;
        -:  725:	}
        -:  726:		
     1998:  727:      if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  728:	{
    #####:  729:	  return -1;
        -:  730:	}
        -:  731:
     1998:  732:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 79% (fallthrough)
branch  3 taken 21%
        -:  733:	{
     1587:  734:	  return -1;
        -:  735:	}
        -:  736:
      411:  737:      gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  738:
        -:  739:      //discard card from hand
      411:  740:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  741:
        -:  742:      //discard trashed card
     8494:  743:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  744:	{
     8494:  745:	  if (state->hand[currentPlayer][i] == j)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  746:	    {
      411:  747:	      discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
      411:  748:	      break;
        -:  749:	    }
        -:  750:	}
        -:  751:			
      411:  752:      return 0;
        -:  753:}
        -:  754:
function minionRefact called 0 returned 0% blocks executed 0%
    #####:  755:int minionRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  756:{
        -:  757:	//+1 action
    #####:  758:	state->numActions++;
        -:  759:			
        -:  760:	//discard card from hand
    #####:  761:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  762:	
        -:  763:
        -:  764:	//reversed choices 1 & 2
    #####:  765:	if (choice2)		//+2 coins 
branch  0 never executed
branch  1 never executed
        -:  766:	{
    #####:  767:		state->coins = state->coins + 2;
        -:  768:	}
        -:  769:			
    #####:  770:    else if (choice1)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  771:	{
        -:  772:		//discard hand
    #####:  773:		while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  774:	    {
    #####:  775:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  776:	    }
        -:  777:				
        -:  778:		//draw 4
    #####:  779:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  780:	    {
    #####:  781:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  782:	    }
        -:  783:				
        -:  784:		//other players discard hand and redraw if hand size > 4
    #####:  785:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  788:			{
    #####:  789:				if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  790:				{
        -:  791:					//discard hand
    #####:  792:					while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  793:					{
    #####:  794:						discardCard(handPos, i, state, 0);
call    0 never executed
        -:  795:					}
        -:  796:							
        -:  797:					//draw 4
    #####:  798:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  799:					{
    #####:  800:						drawCard(i, state);
call    0 never executed
        -:  801:					}
        -:  802:				}
        -:  803:			}
        -:  804:	    }
        -:  805:				
        -:  806:	}
    #####:  807:		return 0;
        -:  808:}
        -:  809:
function cardEffect called 2000 returned 100% blocks executed 4%
     2000:  810:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  811:{
        -:  812:  int i;
        -:  813:  int j;
        -:  814:  int k;
        -:  815:  int x;
        -:  816:  int index;
     2000:  817:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  818:  int nextPlayer = currentPlayer + 1;
        -:  819:
     2000:  820:  int tributeRevealedCards[2] = {-1, -1};
        -:  821:  int temphand[MAX_HAND];// moved above the if statement
     2000:  822:  int drawntreasure=0;
        -:  823:  int cardDrawn;
     2000:  824:  int z = 0;// this is the counter for the temp hand
     2000:  825:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
      708:  826:    nextPlayer = 0;
        -:  827:  }
        -:  828:  
        -:  829:	
        -:  830:  //uses switch to select card and perform actions
     2000:  831:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 100%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  832:    {
        -:  833:    case adventurer:
    #####:  834:		return adventurerRefact(currentPlayer, state, temphand, drawntreasure, cardDrawn, z);
call    0 never executed
        -:  835:	/*
        -:  836:	  while(drawntreasure<2){
        -:  837:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  838:	  shuffle(currentPlayer, state);
        -:  839:	}
        -:  840:	drawCard(currentPlayer, state);
        -:  841:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  842:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  843:	  drawntreasure++;
        -:  844:	else{
        -:  845:	  temphand[z]=cardDrawn;
        -:  846:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  847:	  z++;
        -:  848:	}
        -:  849:      }
        -:  850:      while(z-1>=0){
        -:  851:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  852:	z=z-1;
        -:  853:      }
        -:  854:      return 0;
        -:  855:	*/
        -:  856:			
        -:  857:    case council_room:
        -:  858:      //+4 Cards
    #####:  859:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  860:	{
    #####:  861:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  862:	}
        -:  863:			
        -:  864:      //+1 Buy
    #####:  865:      state->numBuys++;
        -:  866:			
        -:  867:      //Each other player draws a card
    #####:  868:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  869:	{
    #####:  870:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  871:	    {
    #####:  872:	      drawCard(i, state);
call    0 never executed
        -:  873:	    }
        -:  874:	}
        -:  875:			
        -:  876:      //put played card in played card pile
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:			
    #####:  879:      return 0;
        -:  880:			
        -:  881:    case feast:
        -:  882:      //gain card with cost up to 5
        -:  883:      //Backup hand
    #####:  884:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  885:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  886:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  887:      }
        -:  888:      //Backup hand
        -:  889:
        -:  890:      //Update Coins for Buy
    #####:  891:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  892:      x = 1;//Condition to loop on
    #####:  893:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  894:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  895:	  if (DEBUG)
        -:  896:	    printf("None of that card left, sorry!\n");
        -:  897:
        -:  898:	  if (DEBUG){
        -:  899:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  900:	  }
        -:  901:	}
    #####:  902:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  903:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  904:
        -:  905:	  if (DEBUG){
        -:  906:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  907:	  }
        -:  908:	}
        -:  909:	else{
        -:  910:
        -:  911:	  if (DEBUG){
        -:  912:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  913:	  }
        -:  914:
    #####:  915:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  916:	  x = 0;//No more buying cards
        -:  917:
        -:  918:	  if (DEBUG){
        -:  919:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  920:	  }
        -:  921:
        -:  922:	}
        -:  923:      }     
        -:  924:
        -:  925:      //Reset Hand
    #####:  926:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  927:	state->hand[currentPlayer][i] = temphand[i];
    #####:  928:	temphand[i] = -1;
        -:  929:      }
        -:  930:      //Reset Hand
        -:  931:      			
    #####:  932:      return 0;
        -:  933:			
        -:  934:    case gardens:
    #####:  935:      return -1;
        -:  936:			
        -:  937:    case mine:
     2000:  938:		return mineRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 returned 100%
        -:  939:		//return 0;
        -:  940:	/*
        -:  941:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  942:
        -:  943:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  944:	{
        -:  945:	  return -1;
        -:  946:	}
        -:  947:		
        -:  948:      if (choice2 > treasure_map || choice2 < curse)
        -:  949:	{
        -:  950:	  return -1;
        -:  951:	}
        -:  952:
        -:  953:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  954:	{
        -:  955:	  return -1;
        -:  956:	}
        -:  957:
        -:  958:      gainCard(choice2, state, 2, currentPlayer);
        -:  959:
        -:  960:      //discard card from hand
        -:  961:      discardCard(handPos, currentPlayer, state, 0);
        -:  962:
        -:  963:      //discard trashed card
        -:  964:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  965:	{
        -:  966:	  if (state->hand[currentPlayer][i] == j)
        -:  967:	    {
        -:  968:	      discardCard(i, currentPlayer, state, 0);			
        -:  969:	      break;
        -:  970:	    }
        -:  971:	}
        -:  972:			
        -:  973:      return 0;
        -:  974:	*/
        -:  975:		
        -:  976:    case remodel:
    #####:  977:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  978:
    #####:  979:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  980:	{
    #####:  981:	  return -1;
        -:  982:	}
        -:  983:
    #####:  984:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  985:
        -:  986:      //discard card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  988:
        -:  989:      //discard trashed card
    #####:  990:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  993:	    {
    #####:  994:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  995:	      break;
        -:  996:	    }
        -:  997:	}
        -:  998:
        -:  999:
    #####: 1000:      return 0;
        -: 1001:		
        -: 1002:    case smithy:
    #####: 1003:		return smithyRefact(currentPlayer, state, handPos, i);
call    0 never executed
        -: 1004:		
        -: 1005:    /*  //+3 Cards
        -: 1006:      for (i = 0; i < 3; i++)
        -: 1007:	{
        -: 1008:	  drawCard(currentPlayer, state);
        -: 1009:	}
        -: 1010:			
        -: 1011:      //discard card from hand
        -: 1012:      discardCard(handPos, currentPlayer, state, 0);
        -: 1013:      return 0;
        -: 1014:	 */
        -: 1015:		
        -: 1016:    case village:
        -: 1017:      //+1 Card
    #####: 1018:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1019:			
        -: 1020:      //+2 Actions
    #####: 1021:      state->numActions = state->numActions + 2;
        -: 1022:			
        -: 1023:      //discard played card from hand
    #####: 1024:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1025:      return 0;
        -: 1026:		
        -: 1027:    case baron:
    #####: 1028:      state->numBuys++;//Increase buys by 1!
    #####: 1029:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1030:	int p = 0;//Iterator for hand!
    #####: 1031:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1032:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1033:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1034:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1035:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1036:	    state->discardCount[currentPlayer]++;
    #####: 1037:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1038:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1039:	    }
    #####: 1040:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1041:	    state->handCount[currentPlayer]--;
    #####: 1042:	    card_not_discarded = 0;//Exit the loop
        -: 1043:	  }
    #####: 1044:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1045:	    if(DEBUG) {
        -: 1046:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1047:	      printf("Must gain an estate if there are any\n");
        -: 1048:	    }
    #####: 1049:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1050:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1051:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1052:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1053:		isGameOver(state);
call    0 never executed
        -: 1054:	      }
        -: 1055:	    }
    #####: 1056:	    card_not_discarded = 0;//Exit the loop
        -: 1057:	  }
        -: 1058:			    
        -: 1059:	  else{
    #####: 1060:	    p++;//Next card
        -: 1061:	  }
        -: 1062:	}
        -: 1063:      }
        -: 1064:			    
        -: 1065:      else{
    #####: 1066:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1067:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1068:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1069:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1070:	    isGameOver(state);
call    0 never executed
        -: 1071:	  }
        -: 1072:	}
        -: 1073:      }
        -: 1074:	    
        -: 1075:      
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case great_hall:
        -: 1079:      //+1 Card
    #####: 1080:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1081:			
        -: 1082:      //+1 Actions
    #####: 1083:      state->numActions++;
        -: 1084:			
        -: 1085:      //discard card from hand
    #####: 1086:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case minion:
    #####: 1090:		return minionRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -: 1091:	/*
        -: 1092:      //+1 action
        -: 1093:      state->numActions++;
        -: 1094:			
        -: 1095:      //discard card from hand
        -: 1096:      discardCard(handPos, currentPlayer, state, 0);
        -: 1097:			
        -: 1098:      if (choice1)		//+2 coins
        -: 1099:	{
        -: 1100:	  state->coins = state->coins + 2;
        -: 1101:	}
        -: 1102:			
        -: 1103:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1104:	{
        -: 1105:	  //discard hand
        -: 1106:	  while(numHandCards(state) > 0)
        -: 1107:	    {
        -: 1108:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1109:	    }
        -: 1110:				
        -: 1111:	  //draw 4
        -: 1112:	  for (i = 0; i < 4; i++)
        -: 1113:	    {
        -: 1114:	      drawCard(currentPlayer, state);
        -: 1115:	    }
        -: 1116:				
        -: 1117:	  //other players discard hand and redraw if hand size > 4
        -: 1118:	  for (i = 0; i < state->numPlayers; i++)
        -: 1119:	    {
        -: 1120:	      if (i != currentPlayer)
        -: 1121:		{
        -: 1122:		  if ( state->handCount[i] > 4 )
        -: 1123:		    {
        -: 1124:		      //discard hand
        -: 1125:		      while( state->handCount[i] > 0 )
        -: 1126:			{
        -: 1127:			  discardCard(handPos, i, state, 0);
        -: 1128:			}
        -: 1129:							
        -: 1130:		      //draw 4
        -: 1131:		      for (j = 0; j < 4; j++)
        -: 1132:			{
        -: 1133:			  drawCard(i, state);
        -: 1134:			}
        -: 1135:		    }
        -: 1136:		}
        -: 1137:	    }
        -: 1138:				
        -: 1139:	}
        -: 1140:      return 0;
        -: 1141:	*/
        -: 1142:	
        -: 1143:    case steward:
    #####: 1144:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1145:	{
        -: 1146:	  //+2 cards
    #####: 1147:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1148:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1149:	}
    #####: 1150:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1151:	{
        -: 1152:	  //+2 coins
    #####: 1153:	  state->coins = state->coins + 2;
        -: 1154:	}
        -: 1155:      else
        -: 1156:	{
        -: 1157:	  //trash 2 cards in hand
    #####: 1158:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1159:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1160:	}
        -: 1161:			
        -: 1162:      //discard card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case tribute:
    #####: 1167:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1168:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1169:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1170:	  state->deckCount[nextPlayer]--;
        -: 1171:	}
    #####: 1172:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1173:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1174:	  state->discardCount[nextPlayer]--;
        -: 1175:	}
        -: 1176:	else{
        -: 1177:	  //No Card to Reveal
        -: 1178:	  if (DEBUG){
        -: 1179:	    printf("No cards to reveal\n");
        -: 1180:	  }
        -: 1181:	}
        -: 1182:      }
        -: 1183:	    
        -: 1184:      else{
    #####: 1185:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1186:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1187:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1188:	    state->deckCount[nextPlayer]++;
    #####: 1189:	    state->discard[nextPlayer][i] = -1;
    #####: 1190:	    state->discardCount[nextPlayer]--;
        -: 1191:	  }
        -: 1192:			    
    #####: 1193:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1194:	} 
    #####: 1195:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1196:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1197:	state->deckCount[nextPlayer]--;
    #####: 1198:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1199:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1200:	state->deckCount[nextPlayer]--;
        -: 1201:      }    
        -: 1202:		       
    #####: 1203:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1204:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1205:	state->playedCardCount++;
    #####: 1206:	tributeRevealedCards[1] = -1;
        -: 1207:      }
        -: 1208:
    #####: 1209:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1210:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1211:	  state->coins += 2;
        -: 1212:	}
        -: 1213:		    
    #####: 1214:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1215:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1216:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1217:	}
        -: 1218:	else{//Action Card
    #####: 1219:	  state->numActions = state->numActions + 2;
        -: 1220:	}
        -: 1221:      }
        -: 1222:	    
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case ambassador:
    #####: 1226:      j = 0;		//used to check if player has enough cards to discard
        -: 1227:
    #####: 1228:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1229:	{
    #####: 1230:	  return -1;				
        -: 1231:	}
        -: 1232:
    #####: 1233:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
    #####: 1235:	  return -1;
        -: 1236:	}
        -: 1237:
    #####: 1238:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1239:	{
    #####: 1240:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1241:	    {
    #####: 1242:	      j++;
        -: 1243:	    }
        -: 1244:	}
    #####: 1245:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1246:	{
    #####: 1247:	  return -1;				
        -: 1248:	}
        -: 1249:
        -: 1250:      if (DEBUG) 
        -: 1251:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1252:
        -: 1253:      //increase supply count for choosen card by amount being discarded
    #####: 1254:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1255:			
        -: 1256:      //each other player gains a copy of revealed card
    #####: 1257:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1258:	{
    #####: 1259:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1260:	    {
    #####: 1261:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1262:	    }
        -: 1263:	}
        -: 1264:
        -: 1265:      //discard played card from hand
    #####: 1266:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1267:
        -: 1268:      //trash copies of cards returned to supply
    #####: 1269:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1270:	{
    #####: 1271:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1272:	    {
    #####: 1273:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1274:		{
    #####: 1275:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1276:		  break;
        -: 1277:		}
        -: 1278:	    }
        -: 1279:	}			
        -: 1280:
    #####: 1281:      return 0;
        -: 1282:		
        -: 1283:    case cutpurse:
    #####: 1284:		cutpurseRefact(currentPlayer, state, handPos, i, j, k);
call    0 never executed
        -: 1285:	/*
        -: 1286:      updateCoins(currentPlayer, state, 2);
        -: 1287:      for (i = 0; i < state->numPlayers; i++)
        -: 1288:	{
        -: 1289:	  if (i != currentPlayer)
        -: 1290:	    {
        -: 1291:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1292:		{
        -: 1293:		  if (state->hand[i][j] == copper)
        -: 1294:		    {
        -: 1295:		      discardCard(j, i, state, 0);
        -: 1296:		      break;
        -: 1297:		    }
        -: 1298:		  if (j == state->handCount[i])
        -: 1299:		    {
        -: 1300:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1301:			{
        -: 1302:			  if (DEBUG)
        -: 1303:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1304:			}	
        -: 1305:		      break;
        -: 1306:		    }		
        -: 1307:		}
        -: 1308:					
        -: 1309:	    }
        -: 1310:				
        -: 1311:	}				
        -: 1312:
        -: 1313:      //discard played card from hand
        -: 1314:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1315:
        -: 1316:      return 0;
        -: 1317:	*/
        -: 1318:		
        -: 1319:    case embargo: 
        -: 1320:      //+2 Coins
    #####: 1321:      state->coins = state->coins + 2;
        -: 1322:			
        -: 1323:      //see if selected pile is in play
    #####: 1324:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1325:	{
    #####: 1326:	  return -1;
        -: 1327:	}
        -: 1328:			
        -: 1329:      //add embargo token to selected supply pile
    #####: 1330:      state->embargoTokens[choice1]++;
        -: 1331:			
        -: 1332:      //trash card
    #####: 1333:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1334:      return 0;
        -: 1335:		
        -: 1336:    case outpost:
        -: 1337:      //set outpost flag
    #####: 1338:      state->outpostPlayed++;
        -: 1339:			
        -: 1340:      //discard card
    #####: 1341:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1342:      return 0;
        -: 1343:		
        -: 1344:    case salvager:
        -: 1345:      //+1 buy
    #####: 1346:      state->numBuys++;
        -: 1347:			
    #####: 1348:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1349:	{
        -: 1350:	  //gain coins equal to trashed card
    #####: 1351:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1352:	  //trash card
    #####: 1353:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1354:	}
        -: 1355:			
        -: 1356:      //discard card
    #####: 1357:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1358:      return 0;
        -: 1359:		
        -: 1360:    case sea_hag:
    #####: 1361:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1362:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1363:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1364:	  state->discardCount[i]++;
    #####: 1365:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1366:	}
        -: 1367:      }
    #####: 1368:      return 0;
        -: 1369:		
        -: 1370:    case treasure_map:
        -: 1371:      //search hand for another treasure_map
    #####: 1372:      index = -1;
    #####: 1373:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1374:	{
    #####: 1375:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1376:	    {
    #####: 1377:	      index = i;
    #####: 1378:	      break;
        -: 1379:	    }
        -: 1380:	}
    #####: 1381:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1382:	{
        -: 1383:	  //trash both treasure cards
    #####: 1384:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1385:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1386:
        -: 1387:	  //gain 4 Gold cards
    #####: 1388:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1389:	    {
    #####: 1390:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1391:	    }
        -: 1392:				
        -: 1393:	  //return success
    #####: 1394:	  return 1;
        -: 1395:	}
        -: 1396:			
        -: 1397:      //no second treasure_map found in hand
    #####: 1398:      return -1;
        -: 1399:    }
        -: 1400:	
    #####: 1401:  return -1;
        -: 1402:}
        -: 1403:
function discardCard called 822 returned 100% blocks executed 78%
      822: 1404:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1405:{
        -: 1406:  //if card is not trashed, added to Played pile 
      822: 1407:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1408:    {
        -: 1409:      //add card to played pile
      822: 1410:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      822: 1411:      state->playedCardCount++;
        -: 1412:    }
        -: 1413:  //set played card to -1
      822: 1414:  state->hand[currentPlayer][handPos] = -1;
        -: 1415:	
        -: 1416:  //remove card from player's hand
      822: 1417:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1418:    {
        -: 1419:      //reduce number of cards in hand
    #####: 1420:      state->handCount[currentPlayer]--;
        -: 1421:    }
      822: 1422:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1423:    {
        -: 1424:      //reduce number of cards in hand
    #####: 1425:      state->handCount[currentPlayer]--;
        -: 1426:    }
        -: 1427:  else 	
        -: 1428:    {
        -: 1429:      //replace discarded card with last card in hand
      822: 1430:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1431:      //set last card to -1
      822: 1432:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1433:      //reduce number of cards in hand
      822: 1434:      state->handCount[currentPlayer]--;
        -: 1435:    }
        -: 1436:	
      822: 1437:  return 0;
        -: 1438:}
        -: 1439:
function gainCard called 2411 returned 100% blocks executed 70%
     2411: 1440:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1441:{
        -: 1442:  //Note: supplyPos is enum of choosen card
        -: 1443:	
        -: 1444:  //check if supply pile is empty (0) or card is not used in game (-1)
     2411: 1445:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1446:    {
    #####: 1447:      return -1;
        -: 1448:    }
        -: 1449:	
        -: 1450:  //added card for [whoseTurn] current player:
        -: 1451:  // toFlag = 0 : add to discard
        -: 1452:  // toFlag = 1 : add to deck
        -: 1453:  // toFlag = 2 : add to hand
        -: 1454:
     2411: 1455:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1456:    {
    #####: 1457:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1458:      state->deckCount[player]++;
        -: 1459:    }
     2411: 1460:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1461:    {
     2411: 1462:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     2411: 1463:      state->handCount[player]++;
        -: 1464:    }
        -: 1465:  else
        -: 1466:    {
    #####: 1467:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1468:      state->discardCount[player]++;
        -: 1469:    }
        -: 1470:	
        -: 1471:  //decrease number in supply pile
     2411: 1472:  state->supplyCount[supplyPos]--;
        -: 1473:	 
     2411: 1474:  return 0;
        -: 1475:}
        -: 1476:
function updateCoins called 2411 returned 100% blocks executed 100%
     2411: 1477:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1478:{
        -: 1479:  int i;
        -: 1480:	
        -: 1481:  //reset coin count
     2411: 1482:  state->coins = 0;
        -: 1483:  
        -: 1484:  //add coins for each Treasure card in player's hand
    97300: 1485:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
        -: 1486:    {
    94889: 1487:      if (state->hand[player][i] == copper)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -: 1488:	{
    10624: 1489:	  state->coins += 1;
        -: 1490:	}
    84265: 1491:      else if (state->hand[player][i] == silver)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1492:	{
     2645: 1493:	  state->coins += 2;
        -: 1494:	}
    81620: 1495:      else if (state->hand[player][i] == gold)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1496:	{
     2351: 1497:	  state->coins += 3;
        -: 1498:	}	
        -: 1499:    }	
        -: 1500:
        -: 1501:  //add bonus
     2411: 1502:  state->coins += bonus;
        -: 1503:
     2411: 1504:  return 0;
        -: 1505:}
        -: 1506:
        -: 1507:
        -: 1508://end of dominion.c
        -: 1509:
