File 'dominion.c'
Lines executed:26.16% of 562
Branches executed:28.19% of 415
Taken at least once:19.04% of 415
Calls executed:15.79% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 77220 returned 100% blocks executed 83%
    77220:    8:int compare(const void* a, const void* b) {
    77220:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    77220:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    20592:   12:    return -1;
    56628:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2000 returned 100% blocks executed 94%
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
call    0 returned 100%
     2000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   220000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   200000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2000:   73:  if (numPlayers == 2)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:   74:    {
      852:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     1148:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
     1148:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2000:   87:  if (numPlayers == 2)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:   88:    {
      852:   89:      state->supplyCount[estate] = 8;
      852:   90:      state->supplyCount[duchy] = 8;
      852:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     1148:   95:      state->supplyCount[estate] = 12;
     1148:   96:      state->supplyCount[duchy] = 12;
     1148:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  102:  state->supplyCount[silver] = 40;
     2000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   330000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   310000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
      852:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     1148:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    18000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    20000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   290000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     7148:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  139:    {
     5148:  140:      state->deckCount[i] = 0;
    20592:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    15444:  143:	  state->deck[i][j] = estate;
    15444:  144:	  state->deckCount[i]++;
        -:  145:	}
    41184:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    36036:  148:	  state->deck[i][j] = copper;
    36036:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     7148:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  155:    {
     5148:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     7148:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     5148:  166:      state->handCount[i] = 0;
     5148:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    54000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2000:  182:  state->outpostPlayed = 0;
     2000:  183:  state->phase = 0;
     2000:  184:  state->numActions = 1;
     2000:  185:  state->numBuys = 1;
     2000:  186:  state->playedCardCount = 0;
     2000:  187:  state->whoseTurn = 0;
     2000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     2000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     2000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 5148 returned 100% blocks executed 94%
     5148:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     5148:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     5148:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
     5148:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    61776:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    51480:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    51480:  216:    newDeck[newDeckPos] = state->deck[player][card];
    51480:  217:    newDeckPos++;
   178227:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
   126747:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    51480:  221:    state->deckCount[player]--;
        -:  222:  }
    56628:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    51480:  224:    state->deck[player][i] = newDeck[i];
    51480:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     5148:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 2000 returned 100% blocks executed 73%
     2000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     2000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     2000:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     2000:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     2000:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
     2000:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     2000:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
     2000:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
     2000:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
     2000:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 2000 returned 100% blocks executed 100%
     2000:  315:int handCard(int handPos, struct gameState *state) {
     2000:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2000 returned 100% blocks executed 100%
     2000:  320:int supplyCount(int card, struct gameState *state) {
     2000:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4000 returned 100% blocks executed 100%
     4000:  346:int whoseTurn(struct gameState *state) {
     4000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 16000 returned 100% blocks executed 38%
    16000:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    16000:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    16000:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    16000:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    16000:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    16000:  576:    state->deckCount[player]--;
    16000:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    16000:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function smithyRefact called 0 returned 0% blocks executed 0%
    #####:  646:int smithyRefact(int currentPlayer, struct gameState *state, int handPos, int i)
        -:  647:{
        -:  648:	//+3 Cards
    #####:  649:      for (i = 0; i < 5; i++) // changed from 3 cards to 5
branch  0 never executed
branch  1 never executed
        -:  650:	{
    #####:  651:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  652:	}
        -:  653:			
        -:  654:      //discard card from hand
    #####:  655:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  656:      return 0;
        -:  657:}
        -:  658:
function adventurerRefact called 2000 returned 100% blocks executed 93%
     2000:  659:int adventurerRefact(int currentPlayer, struct gameState *state, int temphand[], int drawntreasure, int cardDrawn, int z)
        -:  660:{	  
    10000:  661:	while(drawntreasure<2){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     6000:  662:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  663:			shuffle(currentPlayer, state);
call    0 never executed
        -:  664:		}
     6000:  665:	drawCard(currentPlayer, state);
call    0 returned 100%
     6000:  666:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     6000:  667:	if (cardDrawn == copper || cardDrawn == silver) // removed gold as part of the statement || cardDrawn == gold
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
     4000:  668:		drawntreasure++;
        -:  669:	else{
     2000:  670:		temphand[z]=cardDrawn;
     2000:  671:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     2000:  672:		z++;
        -:  673:		}
        -:  674:    }
        -:  675:    
     6000:  676:	while(z-1>=0){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
     2000:  677:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     2000:  678:		z=z-1;
        -:  679:    }
     2000:  680:    return 0;
        -:  681:}
        -:  682:
function cutpurseRefact called 0 returned 0% blocks executed 0%
    #####:  683:int cutpurseRefact(int currentPlayer, struct gameState *state, int handPos, int i, int j, int k)
        -:  684:{
    #####:  685:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  686:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  687:	{
    #####:  688:	  if (i == currentPlayer)  // removed not from statement != currentPlayer
branch  0 never executed
branch  1 never executed
        -:  689:	    {
    #####:  690:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  691:		{
    #####:  692:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  693:		    {
    #####:  694:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  695:		      break;
        -:  696:		    }
    #####:  697:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  698:		    {
    #####:  699:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  700:			{
        -:  701:			  if (DEBUG)
        -:  702:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  703:			}	
    #####:  704:		      break;
        -:  705:		    }		
        -:  706:		}
        -:  707:					
        -:  708:	    }
        -:  709:				
        -:  710:	}				
        -:  711:
        -:  712:      //discard played card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  714:
    #####:  715:      return 0;
        -:  716:}
        -:  717:
function mineRefact called 0 returned 0% blocks executed 0%
    #####:  718:int mineRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  719:{
    #####:  720:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:		
    #####:  727:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  728:	{
    #####:  729:	  return -1;
        -:  730:	}
        -:  731:
    #####:  732:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  733:	{
    #####:  734:	  return -1;
        -:  735:	}
        -:  736:
    #####:  737:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  738:
        -:  739:      //discard card from hand
    #####:  740:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  741:
        -:  742:      //discard trashed card
    #####:  743:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  744:	{
    #####:  745:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  746:	    {
    #####:  747:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  748:	      break;
        -:  749:	    }
        -:  750:	}
        -:  751:			
    #####:  752:      return 0;
        -:  753:}
        -:  754:
function minionRefact called 0 returned 0% blocks executed 0%
    #####:  755:int minionRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  756:{
        -:  757:	//+1 action
    #####:  758:	state->numActions++;
        -:  759:			
        -:  760:	//discard card from hand
    #####:  761:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  762:	
        -:  763:
        -:  764:	//reversed choices 1 & 2
    #####:  765:	if (choice2)		//+2 coins 
branch  0 never executed
branch  1 never executed
        -:  766:	{
    #####:  767:		state->coins = state->coins + 2;
        -:  768:	}
        -:  769:			
    #####:  770:    else if (choice1)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  771:	{
        -:  772:		//discard hand
    #####:  773:		while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  774:	    {
    #####:  775:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  776:	    }
        -:  777:				
        -:  778:		//draw 4
    #####:  779:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  780:	    {
    #####:  781:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  782:	    }
        -:  783:				
        -:  784:		//other players discard hand and redraw if hand size > 4
    #####:  785:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  788:			{
    #####:  789:				if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  790:				{
        -:  791:					//discard hand
    #####:  792:					while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  793:					{
    #####:  794:						discardCard(handPos, i, state, 0);
call    0 never executed
        -:  795:					}
        -:  796:							
        -:  797:					//draw 4
    #####:  798:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  799:					{
    #####:  800:						drawCard(i, state);
call    0 never executed
        -:  801:					}
        -:  802:				}
        -:  803:			}
        -:  804:	    }
        -:  805:				
        -:  806:	}
    #####:  807:		return 0;
        -:  808:}
        -:  809:
function cardEffect called 2000 returned 100% blocks executed 4%
     2000:  810:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  811:{
        -:  812:  int i;
        -:  813:  int j;
        -:  814:  int k;
        -:  815:  int x;
        -:  816:  int index;
     2000:  817:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  818:  int nextPlayer = currentPlayer + 1;
        -:  819:
     2000:  820:  int tributeRevealedCards[2] = {-1, -1};
        -:  821:  int temphand[MAX_HAND];// moved above the if statement
     2000:  822:  int drawntreasure=0;
        -:  823:  int cardDrawn;
     2000:  824:  int z = 0;// this is the counter for the temp hand
     2000:  825:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
      819:  826:    nextPlayer = 0;
        -:  827:  }
        -:  828:  
        -:  829:	
        -:  830:  //uses switch to select card and perform actions
     2000:  831:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  832:    {
        -:  833:    case adventurer:
     2000:  834:		adventurerRefact(currentPlayer, state, temphand, drawntreasure, cardDrawn, z);
call    0 returned 100%
     2000:  835:		return 0;
        -:  836:	/*
        -:  837:	  while(drawntreasure<2){
        -:  838:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  839:	  shuffle(currentPlayer, state);
        -:  840:	}
        -:  841:	drawCard(currentPlayer, state);
        -:  842:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  843:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  844:	  drawntreasure++;
        -:  845:	else{
        -:  846:	  temphand[z]=cardDrawn;
        -:  847:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  848:	  z++;
        -:  849:	}
        -:  850:      }
        -:  851:      while(z-1>=0){
        -:  852:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  853:	z=z-1;
        -:  854:      }
        -:  855:      return 0;
        -:  856:	*/
        -:  857:			
        -:  858:    case council_room:
        -:  859:      //+4 Cards
    #####:  860:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  861:	{
    #####:  862:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  863:	}
        -:  864:			
        -:  865:      //+1 Buy
    #####:  866:      state->numBuys++;
        -:  867:			
        -:  868:      //Each other player draws a card
    #####:  869:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  870:	{
    #####:  871:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  872:	    {
    #####:  873:	      drawCard(i, state);
call    0 never executed
        -:  874:	    }
        -:  875:	}
        -:  876:			
        -:  877:      //put played card in played card pile
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:			
    #####:  880:      return 0;
        -:  881:			
        -:  882:    case feast:
        -:  883:      //gain card with cost up to 5
        -:  884:      //Backup hand
    #####:  885:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  886:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  887:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  888:      }
        -:  889:      //Backup hand
        -:  890:
        -:  891:      //Update Coins for Buy
    #####:  892:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  893:      x = 1;//Condition to loop on
    #####:  894:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  895:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  896:	  if (DEBUG)
        -:  897:	    printf("None of that card left, sorry!\n");
        -:  898:
        -:  899:	  if (DEBUG){
        -:  900:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  901:	  }
        -:  902:	}
    #####:  903:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  904:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  905:
        -:  906:	  if (DEBUG){
        -:  907:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  908:	  }
        -:  909:	}
        -:  910:	else{
        -:  911:
        -:  912:	  if (DEBUG){
        -:  913:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  914:	  }
        -:  915:
    #####:  916:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  917:	  x = 0;//No more buying cards
        -:  918:
        -:  919:	  if (DEBUG){
        -:  920:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  921:	  }
        -:  922:
        -:  923:	}
        -:  924:      }     
        -:  925:
        -:  926:      //Reset Hand
    #####:  927:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  928:	state->hand[currentPlayer][i] = temphand[i];
    #####:  929:	temphand[i] = -1;
        -:  930:      }
        -:  931:      //Reset Hand
        -:  932:      			
    #####:  933:      return 0;
        -:  934:			
        -:  935:    case gardens:
    #####:  936:      return -1;
        -:  937:			
        -:  938:    case mine:
    #####:  939:		mineRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
    #####:  940:		return 0;
        -:  941:	/*
        -:  942:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  943:
        -:  944:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  945:	{
        -:  946:	  return -1;
        -:  947:	}
        -:  948:		
        -:  949:      if (choice2 > treasure_map || choice2 < curse)
        -:  950:	{
        -:  951:	  return -1;
        -:  952:	}
        -:  953:
        -:  954:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  955:	{
        -:  956:	  return -1;
        -:  957:	}
        -:  958:
        -:  959:      gainCard(choice2, state, 2, currentPlayer);
        -:  960:
        -:  961:      //discard card from hand
        -:  962:      discardCard(handPos, currentPlayer, state, 0);
        -:  963:
        -:  964:      //discard trashed card
        -:  965:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  966:	{
        -:  967:	  if (state->hand[currentPlayer][i] == j)
        -:  968:	    {
        -:  969:	      discardCard(i, currentPlayer, state, 0);			
        -:  970:	      break;
        -:  971:	    }
        -:  972:	}
        -:  973:			
        -:  974:      return 0;
        -:  975:	*/
        -:  976:		
        -:  977:    case remodel:
    #####:  978:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  979:
    #####:  980:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  981:	{
    #####:  982:	  return -1;
        -:  983:	}
        -:  984:
    #####:  985:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  986:
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  989:
        -:  990:      //discard trashed card
    #####:  991:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  992:	{
    #####:  993:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  994:	    {
    #####:  995:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  996:	      break;
        -:  997:	    }
        -:  998:	}
        -:  999:
        -: 1000:
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case smithy:
    #####: 1004:		smithyRefact(currentPlayer, state, handPos, i);
call    0 never executed
    #####: 1005:		return 0;
        -: 1006:		
        -: 1007:    /*  //+3 Cards
        -: 1008:      for (i = 0; i < 3; i++)
        -: 1009:	{
        -: 1010:	  drawCard(currentPlayer, state);
        -: 1011:	}
        -: 1012:			
        -: 1013:      //discard card from hand
        -: 1014:      discardCard(handPos, currentPlayer, state, 0);
        -: 1015:      return 0;
        -: 1016:	 */
        -: 1017:		
        -: 1018:    case village:
        -: 1019:      //+1 Card
    #####: 1020:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1021:			
        -: 1022:      //+2 Actions
    #####: 1023:      state->numActions = state->numActions + 2;
        -: 1024:			
        -: 1025:      //discard played card from hand
    #####: 1026:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1027:      return 0;
        -: 1028:		
        -: 1029:    case baron:
    #####: 1030:      state->numBuys++;//Increase buys by 1!
    #####: 1031:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1032:	int p = 0;//Iterator for hand!
    #####: 1033:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1034:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1035:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1036:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1037:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1038:	    state->discardCount[currentPlayer]++;
    #####: 1039:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1041:	    }
    #####: 1042:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1043:	    state->handCount[currentPlayer]--;
    #####: 1044:	    card_not_discarded = 0;//Exit the loop
        -: 1045:	  }
    #####: 1046:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1047:	    if(DEBUG) {
        -: 1048:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1049:	      printf("Must gain an estate if there are any\n");
        -: 1050:	    }
    #####: 1051:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1052:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1053:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1054:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1055:		isGameOver(state);
call    0 never executed
        -: 1056:	      }
        -: 1057:	    }
    #####: 1058:	    card_not_discarded = 0;//Exit the loop
        -: 1059:	  }
        -: 1060:			    
        -: 1061:	  else{
    #####: 1062:	    p++;//Next card
        -: 1063:	  }
        -: 1064:	}
        -: 1065:      }
        -: 1066:			    
        -: 1067:      else{
    #####: 1068:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1069:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1070:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1071:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1072:	    isGameOver(state);
call    0 never executed
        -: 1073:	  }
        -: 1074:	}
        -: 1075:      }
        -: 1076:	    
        -: 1077:      
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case great_hall:
        -: 1081:      //+1 Card
    #####: 1082:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1083:			
        -: 1084:      //+1 Actions
    #####: 1085:      state->numActions++;
        -: 1086:			
        -: 1087:      //discard card from hand
    #####: 1088:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case minion:
    #####: 1092:		minionRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
    #####: 1093:		return 0;
        -: 1094:	/*
        -: 1095:      //+1 action
        -: 1096:      state->numActions++;
        -: 1097:			
        -: 1098:      //discard card from hand
        -: 1099:      discardCard(handPos, currentPlayer, state, 0);
        -: 1100:			
        -: 1101:      if (choice1)		//+2 coins
        -: 1102:	{
        -: 1103:	  state->coins = state->coins + 2;
        -: 1104:	}
        -: 1105:			
        -: 1106:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1107:	{
        -: 1108:	  //discard hand
        -: 1109:	  while(numHandCards(state) > 0)
        -: 1110:	    {
        -: 1111:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1112:	    }
        -: 1113:				
        -: 1114:	  //draw 4
        -: 1115:	  for (i = 0; i < 4; i++)
        -: 1116:	    {
        -: 1117:	      drawCard(currentPlayer, state);
        -: 1118:	    }
        -: 1119:				
        -: 1120:	  //other players discard hand and redraw if hand size > 4
        -: 1121:	  for (i = 0; i < state->numPlayers; i++)
        -: 1122:	    {
        -: 1123:	      if (i != currentPlayer)
        -: 1124:		{
        -: 1125:		  if ( state->handCount[i] > 4 )
        -: 1126:		    {
        -: 1127:		      //discard hand
        -: 1128:		      while( state->handCount[i] > 0 )
        -: 1129:			{
        -: 1130:			  discardCard(handPos, i, state, 0);
        -: 1131:			}
        -: 1132:							
        -: 1133:		      //draw 4
        -: 1134:		      for (j = 0; j < 4; j++)
        -: 1135:			{
        -: 1136:			  drawCard(i, state);
        -: 1137:			}
        -: 1138:		    }
        -: 1139:		}
        -: 1140:	    }
        -: 1141:				
        -: 1142:	}
        -: 1143:      return 0;
        -: 1144:	*/
        -: 1145:	
        -: 1146:    case steward:
    #####: 1147:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1148:	{
        -: 1149:	  //+2 cards
    #####: 1150:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1151:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1152:	}
    #####: 1153:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1154:	{
        -: 1155:	  //+2 coins
    #####: 1156:	  state->coins = state->coins + 2;
        -: 1157:	}
        -: 1158:      else
        -: 1159:	{
        -: 1160:	  //trash 2 cards in hand
    #####: 1161:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1162:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1163:	}
        -: 1164:			
        -: 1165:      //discard card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1167:      return 0;
        -: 1168:		
        -: 1169:    case tribute:
    #####: 1170:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1171:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1172:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1173:	  state->deckCount[nextPlayer]--;
        -: 1174:	}
    #####: 1175:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1176:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1177:	  state->discardCount[nextPlayer]--;
        -: 1178:	}
        -: 1179:	else{
        -: 1180:	  //No Card to Reveal
        -: 1181:	  if (DEBUG){
        -: 1182:	    printf("No cards to reveal\n");
        -: 1183:	  }
        -: 1184:	}
        -: 1185:      }
        -: 1186:	    
        -: 1187:      else{
    #####: 1188:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1189:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1190:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1191:	    state->deckCount[nextPlayer]++;
    #####: 1192:	    state->discard[nextPlayer][i] = -1;
    #####: 1193:	    state->discardCount[nextPlayer]--;
        -: 1194:	  }
        -: 1195:			    
    #####: 1196:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1197:	} 
    #####: 1198:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1199:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1200:	state->deckCount[nextPlayer]--;
    #####: 1201:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1202:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1203:	state->deckCount[nextPlayer]--;
        -: 1204:      }    
        -: 1205:		       
    #####: 1206:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1207:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1208:	state->playedCardCount++;
    #####: 1209:	tributeRevealedCards[1] = -1;
        -: 1210:      }
        -: 1211:
    #####: 1212:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1213:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1214:	  state->coins += 2;
        -: 1215:	}
        -: 1216:		    
    #####: 1217:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1218:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1219:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1220:	}
        -: 1221:	else{//Action Card
    #####: 1222:	  state->numActions = state->numActions + 2;
        -: 1223:	}
        -: 1224:      }
        -: 1225:	    
    #####: 1226:      return 0;
        -: 1227:		
        -: 1228:    case ambassador:
    #####: 1229:      j = 0;		//used to check if player has enough cards to discard
        -: 1230:
    #####: 1231:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1232:	{
    #####: 1233:	  return -1;				
        -: 1234:	}
        -: 1235:
    #####: 1236:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1237:	{
    #####: 1238:	  return -1;
        -: 1239:	}
        -: 1240:
    #####: 1241:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1242:	{
    #####: 1243:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1244:	    {
    #####: 1245:	      j++;
        -: 1246:	    }
        -: 1247:	}
    #####: 1248:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1249:	{
    #####: 1250:	  return -1;				
        -: 1251:	}
        -: 1252:
        -: 1253:      if (DEBUG) 
        -: 1254:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1255:
        -: 1256:      //increase supply count for choosen card by amount being discarded
    #####: 1257:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1258:			
        -: 1259:      //each other player gains a copy of revealed card
    #####: 1260:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1261:	{
    #####: 1262:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1263:	    {
    #####: 1264:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1265:	    }
        -: 1266:	}
        -: 1267:
        -: 1268:      //discard played card from hand
    #####: 1269:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1270:
        -: 1271:      //trash copies of cards returned to supply
    #####: 1272:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1273:	{
    #####: 1274:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1275:	    {
    #####: 1276:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1277:		{
    #####: 1278:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1279:		  break;
        -: 1280:		}
        -: 1281:	    }
        -: 1282:	}			
        -: 1283:
    #####: 1284:      return 0;
        -: 1285:		
        -: 1286:    case cutpurse:
    #####: 1287:		cutpurseRefact(currentPlayer, state, handPos, i, j, k);
call    0 never executed
        -: 1288:	/*
        -: 1289:      updateCoins(currentPlayer, state, 2);
        -: 1290:      for (i = 0; i < state->numPlayers; i++)
        -: 1291:	{
        -: 1292:	  if (i != currentPlayer)
        -: 1293:	    {
        -: 1294:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1295:		{
        -: 1296:		  if (state->hand[i][j] == copper)
        -: 1297:		    {
        -: 1298:		      discardCard(j, i, state, 0);
        -: 1299:		      break;
        -: 1300:		    }
        -: 1301:		  if (j == state->handCount[i])
        -: 1302:		    {
        -: 1303:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1304:			{
        -: 1305:			  if (DEBUG)
        -: 1306:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1307:			}	
        -: 1308:		      break;
        -: 1309:		    }		
        -: 1310:		}
        -: 1311:					
        -: 1312:	    }
        -: 1313:				
        -: 1314:	}				
        -: 1315:
        -: 1316:      //discard played card from hand
        -: 1317:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1318:
        -: 1319:      return 0;
        -: 1320:	*/
        -: 1321:		
        -: 1322:    case embargo: 
        -: 1323:      //+2 Coins
    #####: 1324:      state->coins = state->coins + 2;
        -: 1325:			
        -: 1326:      //see if selected pile is in play
    #####: 1327:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1328:	{
    #####: 1329:	  return -1;
        -: 1330:	}
        -: 1331:			
        -: 1332:      //add embargo token to selected supply pile
    #####: 1333:      state->embargoTokens[choice1]++;
        -: 1334:			
        -: 1335:      //trash card
    #####: 1336:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1337:      return 0;
        -: 1338:		
        -: 1339:    case outpost:
        -: 1340:      //set outpost flag
    #####: 1341:      state->outpostPlayed++;
        -: 1342:			
        -: 1343:      //discard card
    #####: 1344:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1345:      return 0;
        -: 1346:		
        -: 1347:    case salvager:
        -: 1348:      //+1 buy
    #####: 1349:      state->numBuys++;
        -: 1350:			
    #####: 1351:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1352:	{
        -: 1353:	  //gain coins equal to trashed card
    #####: 1354:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1355:	  //trash card
    #####: 1356:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1357:	}
        -: 1358:			
        -: 1359:      //discard card
    #####: 1360:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1361:      return 0;
        -: 1362:		
        -: 1363:    case sea_hag:
    #####: 1364:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1365:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1366:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1367:	  state->discardCount[i]++;
    #####: 1368:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1369:	}
        -: 1370:      }
    #####: 1371:      return 0;
        -: 1372:		
        -: 1373:    case treasure_map:
        -: 1374:      //search hand for another treasure_map
    #####: 1375:      index = -1;
    #####: 1376:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1377:	{
    #####: 1378:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1379:	    {
    #####: 1380:	      index = i;
    #####: 1381:	      break;
        -: 1382:	    }
        -: 1383:	}
    #####: 1384:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1385:	{
        -: 1386:	  //trash both treasure cards
    #####: 1387:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1388:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1389:
        -: 1390:	  //gain 4 Gold cards
    #####: 1391:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1392:	    {
    #####: 1393:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1394:	    }
        -: 1395:				
        -: 1396:	  //return success
    #####: 1397:	  return 1;
        -: 1398:	}
        -: 1399:			
        -: 1400:      //no second treasure_map found in hand
    #####: 1401:      return -1;
        -: 1402:    }
        -: 1403:	
    #####: 1404:  return -1;
        -: 1405:}
        -: 1406:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1407:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1408:{
        -: 1409:  //if card is not trashed, added to Played pile 
    #####: 1410:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1411:    {
        -: 1412:      //add card to played pile
    #####: 1413:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1414:      state->playedCardCount++;
        -: 1415:    }
        -: 1416:  //set played card to -1
    #####: 1417:  state->hand[currentPlayer][handPos] = -1;
        -: 1418:	
        -: 1419:  //remove card from player's hand
    #####: 1420:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1421:    {
        -: 1422:      //reduce number of cards in hand
    #####: 1423:      state->handCount[currentPlayer]--;
        -: 1424:    }
    #####: 1425:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1426:    {
        -: 1427:      //reduce number of cards in hand
    #####: 1428:      state->handCount[currentPlayer]--;
        -: 1429:    }
        -: 1430:  else 	
        -: 1431:    {
        -: 1432:      //replace discarded card with last card in hand
    #####: 1433:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1434:      //set last card to -1
    #####: 1435:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1436:      //reduce number of cards in hand
    #####: 1437:      state->handCount[currentPlayer]--;
        -: 1438:    }
        -: 1439:	
    #####: 1440:  return 0;
        -: 1441:}
        -: 1442:
function gainCard called 2000 returned 100% blocks executed 70%
     2000: 1443:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1444:{
        -: 1445:  //Note: supplyPos is enum of choosen card
        -: 1446:	
        -: 1447:  //check if supply pile is empty (0) or card is not used in game (-1)
     2000: 1448:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1449:    {
    #####: 1450:      return -1;
        -: 1451:    }
        -: 1452:	
        -: 1453:  //added card for [whoseTurn] current player:
        -: 1454:  // toFlag = 0 : add to discard
        -: 1455:  // toFlag = 1 : add to deck
        -: 1456:  // toFlag = 2 : add to hand
        -: 1457:
     2000: 1458:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1459:    {
    #####: 1460:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1461:      state->deckCount[player]++;
        -: 1462:    }
     2000: 1463:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1464:    {
     2000: 1465:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     2000: 1466:      state->handCount[player]++;
        -: 1467:    }
        -: 1468:  else
        -: 1469:    {
    #####: 1470:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1471:      state->discardCount[player]++;
        -: 1472:    }
        -: 1473:	
        -: 1474:  //decrease number in supply pile
     2000: 1475:  state->supplyCount[supplyPos]--;
        -: 1476:	 
     2000: 1477:  return 0;
        -: 1478:}
        -: 1479:
function updateCoins called 4000 returned 100% blocks executed 100%
     4000: 1480:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1481:{
        -: 1482:  int i;
        -: 1483:	
        -: 1484:  //reset coin count
     4000: 1485:  state->coins = 0;
        -: 1486:  
        -: 1487:  //add coins for each Treasure card in player's hand
   555163: 1488:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1489:    {
   551163: 1490:      if (state->hand[player][i] == copper)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1491:	{
    29867: 1492:	  state->coins += 1;
        -: 1493:	}
   521296: 1494:      else if (state->hand[player][i] == silver)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1495:	{
    22129: 1496:	  state->coins += 2;
        -: 1497:	}
   499167: 1498:      else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1499:	{
    19160: 1500:	  state->coins += 3;
        -: 1501:	}	
        -: 1502:    }	
        -: 1503:
        -: 1504:  //add bonus
     4000: 1505:  state->coins += bonus;
        -: 1506:
     4000: 1507:  return 0;
        -: 1508:}
        -: 1509:
        -: 1510:
        -: 1511://end of dominion.c
        -: 1512:
File 'dominion.c'
Lines executed:28.11% of 562
Branches executed:29.16% of 415
Taken at least once:20.24% of 415
Calls executed:17.89% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 69750 returned 100% blocks executed 83%
    69750:    8:int compare(const void* a, const void* b) {
    69750:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    69750:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    18600:   12:    return -1;
    51150:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2000 returned 100% blocks executed 94%
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
call    0 returned 100%
     2000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   220000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   200000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2000:   73:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   74:    {
     1350:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      650:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
      650:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2000:   87:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   88:    {
     1350:   89:      state->supplyCount[estate] = 8;
     1350:   90:      state->supplyCount[duchy] = 8;
     1350:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      650:   95:      state->supplyCount[estate] = 12;
      650:   96:      state->supplyCount[duchy] = 12;
      650:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  102:  state->supplyCount[silver] = 40;
     2000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   330000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   310000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
     1350:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      650:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    18000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    20000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   290000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     6650:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
     4650:  140:      state->deckCount[i] = 0;
    18600:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    13950:  143:	  state->deck[i][j] = estate;
    13950:  144:	  state->deckCount[i]++;
        -:  145:	}
    37200:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    32550:  148:	  state->deck[i][j] = copper;
    32550:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     6650:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
     4650:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     6650:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     4650:  166:      state->handCount[i] = 0;
     4650:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    54000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2000:  182:  state->outpostPlayed = 0;
     2000:  183:  state->phase = 0;
     2000:  184:  state->numActions = 1;
     2000:  185:  state->numBuys = 1;
     2000:  186:  state->playedCardCount = 0;
     2000:  187:  state->whoseTurn = 0;
     2000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     2000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     2000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 15924 returned 100% blocks executed 100%
    15924:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    15924:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    15924:  209:  if (state->deckCount[player] < 1)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
    11274:  210:    return -1;
     4650:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    55800:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    46500:  216:    newDeck[newDeckPos] = state->deck[player][card];
    46500:  217:    newDeckPos++;
   162278:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
   115778:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    46500:  221:    state->deckCount[player]--;
        -:  222:  }
    51150:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  224:    state->deck[player][i] = newDeck[i];
    46500:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     4650:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 2000 returned 100% blocks executed 73%
     2000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     2000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     2000:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     2000:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     2000:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
     2000:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     2000:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
     2000:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
     2000:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
     2000:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 2000 returned 100% blocks executed 100%
     2000:  315:int handCard(int handPos, struct gameState *state) {
     2000:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2000 returned 100% blocks executed 100%
     2000:  320:int supplyCount(int card, struct gameState *state) {
     2000:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4000 returned 100% blocks executed 100%
     4000:  346:int whoseTurn(struct gameState *state) {
     4000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 63162 returned 100% blocks executed 85%
    63162:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    63162:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     5637:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     5637:  538:    state->deckCount[player] = state->discardCount[player];
     5637:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5637:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5637:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5637:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5637:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5637:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     5637:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    57525:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    57525:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    57525:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    57525:  576:    state->deckCount[player]--;
    57525:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    57525:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function smithyRefact called 0 returned 0% blocks executed 0%
    #####:  646:int smithyRefact(int currentPlayer, struct gameState *state, int handPos, int i)
        -:  647:{
        -:  648:	//+3 Cards
    #####:  649:      for (i = 0; i < 5; i++) // changed from 3 cards to 5
branch  0 never executed
branch  1 never executed
        -:  650:	{
    #####:  651:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  652:	}
        -:  653:			
        -:  654:      //discard card from hand
    #####:  655:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  656:      return 0;
        -:  657:}
        -:  658:
function adventurerRefact called 2000 returned 100% blocks executed 100%
     2000:  659:int adventurerRefact(int currentPlayer, struct gameState *state, int temphand[], int drawntreasure, int cardDrawn, int z)
        -:  660:{	  
    57162:  661:	while(drawntreasure<2){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    53162:  662:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
     5637:  663:			shuffle(currentPlayer, state);
call    0 returned 100%
        -:  664:		}
    53162:  665:	drawCard(currentPlayer, state);
call    0 returned 100%
    53162:  666:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    53162:  667:	if (cardDrawn == copper || cardDrawn == silver) // removed gold as part of the statement || cardDrawn == gold
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
     4000:  668:		drawntreasure++;
        -:  669:	else{
    49162:  670:		temphand[z]=cardDrawn;
    49162:  671:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    49162:  672:		z++;
        -:  673:		}
        -:  674:    }
        -:  675:    
    53162:  676:	while(z-1>=0){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    49162:  677:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    49162:  678:		z=z-1;
        -:  679:    }
     2000:  680:    return 0;
        -:  681:}
        -:  682:
function cutpurseRefact called 0 returned 0% blocks executed 0%
    #####:  683:int cutpurseRefact(int currentPlayer, struct gameState *state, int handPos, int i, int j, int k)
        -:  684:{
    #####:  685:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  686:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  687:	{
    #####:  688:	  if (i == currentPlayer)  // removed not from statement != currentPlayer
branch  0 never executed
branch  1 never executed
        -:  689:	    {
    #####:  690:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  691:		{
    #####:  692:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  693:		    {
    #####:  694:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  695:		      break;
        -:  696:		    }
    #####:  697:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  698:		    {
    #####:  699:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  700:			{
        -:  701:			  if (DEBUG)
        -:  702:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  703:			}	
    #####:  704:		      break;
        -:  705:		    }		
        -:  706:		}
        -:  707:					
        -:  708:	    }
        -:  709:				
        -:  710:	}				
        -:  711:
        -:  712:      //discard played card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  714:
    #####:  715:      return 0;
        -:  716:}
        -:  717:
function mineRefact called 0 returned 0% blocks executed 0%
    #####:  718:int mineRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  719:{
    #####:  720:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:		
    #####:  727:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  728:	{
    #####:  729:	  return -1;
        -:  730:	}
        -:  731:
    #####:  732:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  733:	{
    #####:  734:	  return -1;
        -:  735:	}
        -:  736:
    #####:  737:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  738:
        -:  739:      //discard card from hand
    #####:  740:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  741:
        -:  742:      //discard trashed card
    #####:  743:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  744:	{
    #####:  745:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  746:	    {
    #####:  747:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  748:	      break;
        -:  749:	    }
        -:  750:	}
        -:  751:			
    #####:  752:      return 0;
        -:  753:}
        -:  754:
function minionRefact called 0 returned 0% blocks executed 0%
    #####:  755:int minionRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  756:{
        -:  757:	//+1 action
    #####:  758:	state->numActions++;
        -:  759:			
        -:  760:	//discard card from hand
    #####:  761:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  762:	
        -:  763:
        -:  764:	//reversed choices 1 & 2
    #####:  765:	if (choice2)		//+2 coins 
branch  0 never executed
branch  1 never executed
        -:  766:	{
    #####:  767:		state->coins = state->coins + 2;
        -:  768:	}
        -:  769:			
    #####:  770:    else if (choice1)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  771:	{
        -:  772:		//discard hand
    #####:  773:		while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  774:	    {
    #####:  775:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  776:	    }
        -:  777:				
        -:  778:		//draw 4
    #####:  779:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  780:	    {
    #####:  781:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  782:	    }
        -:  783:				
        -:  784:		//other players discard hand and redraw if hand size > 4
    #####:  785:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  788:			{
    #####:  789:				if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  790:				{
        -:  791:					//discard hand
    #####:  792:					while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  793:					{
    #####:  794:						discardCard(handPos, i, state, 0);
call    0 never executed
        -:  795:					}
        -:  796:							
        -:  797:					//draw 4
    #####:  798:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  799:					{
    #####:  800:						drawCard(i, state);
call    0 never executed
        -:  801:					}
        -:  802:				}
        -:  803:			}
        -:  804:	    }
        -:  805:				
        -:  806:	}
    #####:  807:		return 0;
        -:  808:}
        -:  809:
function cardEffect called 2000 returned 100% blocks executed 4%
     2000:  810:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  811:{
        -:  812:  int i;
        -:  813:  int j;
        -:  814:  int k;
        -:  815:  int x;
        -:  816:  int index;
     2000:  817:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  818:  int nextPlayer = currentPlayer + 1;
        -:  819:
     2000:  820:  int tributeRevealedCards[2] = {-1, -1};
        -:  821:  int temphand[MAX_HAND];// moved above the if statement
     2000:  822:  int drawntreasure=0;
        -:  823:  int cardDrawn;
     2000:  824:  int z = 0;// this is the counter for the temp hand
     2000:  825:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1001:  826:    nextPlayer = 0;
        -:  827:  }
        -:  828:  
        -:  829:	
        -:  830:  //uses switch to select card and perform actions
     2000:  831:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  832:    {
        -:  833:    case adventurer:
     2000:  834:		adventurerRefact(currentPlayer, state, temphand, drawntreasure, cardDrawn, z);
call    0 returned 100%
     2000:  835:		return 0;
        -:  836:	/*
        -:  837:	  while(drawntreasure<2){
        -:  838:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  839:	  shuffle(currentPlayer, state);
        -:  840:	}
        -:  841:	drawCard(currentPlayer, state);
        -:  842:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  843:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  844:	  drawntreasure++;
        -:  845:	else{
        -:  846:	  temphand[z]=cardDrawn;
        -:  847:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  848:	  z++;
        -:  849:	}
        -:  850:      }
        -:  851:      while(z-1>=0){
        -:  852:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  853:	z=z-1;
        -:  854:      }
        -:  855:      return 0;
        -:  856:	*/
        -:  857:			
        -:  858:    case council_room:
        -:  859:      //+4 Cards
    #####:  860:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  861:	{
    #####:  862:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  863:	}
        -:  864:			
        -:  865:      //+1 Buy
    #####:  866:      state->numBuys++;
        -:  867:			
        -:  868:      //Each other player draws a card
    #####:  869:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  870:	{
    #####:  871:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  872:	    {
    #####:  873:	      drawCard(i, state);
call    0 never executed
        -:  874:	    }
        -:  875:	}
        -:  876:			
        -:  877:      //put played card in played card pile
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:			
    #####:  880:      return 0;
        -:  881:			
        -:  882:    case feast:
        -:  883:      //gain card with cost up to 5
        -:  884:      //Backup hand
    #####:  885:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  886:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  887:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  888:      }
        -:  889:      //Backup hand
        -:  890:
        -:  891:      //Update Coins for Buy
    #####:  892:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  893:      x = 1;//Condition to loop on
    #####:  894:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  895:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  896:	  if (DEBUG)
        -:  897:	    printf("None of that card left, sorry!\n");
        -:  898:
        -:  899:	  if (DEBUG){
        -:  900:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  901:	  }
        -:  902:	}
    #####:  903:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  904:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  905:
        -:  906:	  if (DEBUG){
        -:  907:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  908:	  }
        -:  909:	}
        -:  910:	else{
        -:  911:
        -:  912:	  if (DEBUG){
        -:  913:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  914:	  }
        -:  915:
    #####:  916:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  917:	  x = 0;//No more buying cards
        -:  918:
        -:  919:	  if (DEBUG){
        -:  920:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  921:	  }
        -:  922:
        -:  923:	}
        -:  924:      }     
        -:  925:
        -:  926:      //Reset Hand
    #####:  927:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  928:	state->hand[currentPlayer][i] = temphand[i];
    #####:  929:	temphand[i] = -1;
        -:  930:      }
        -:  931:      //Reset Hand
        -:  932:      			
    #####:  933:      return 0;
        -:  934:			
        -:  935:    case gardens:
    #####:  936:      return -1;
        -:  937:			
        -:  938:    case mine:
    #####:  939:		mineRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
    #####:  940:		return 0;
        -:  941:	/*
        -:  942:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  943:
        -:  944:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  945:	{
        -:  946:	  return -1;
        -:  947:	}
        -:  948:		
        -:  949:      if (choice2 > treasure_map || choice2 < curse)
        -:  950:	{
        -:  951:	  return -1;
        -:  952:	}
        -:  953:
        -:  954:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  955:	{
        -:  956:	  return -1;
        -:  957:	}
        -:  958:
        -:  959:      gainCard(choice2, state, 2, currentPlayer);
        -:  960:
        -:  961:      //discard card from hand
        -:  962:      discardCard(handPos, currentPlayer, state, 0);
        -:  963:
        -:  964:      //discard trashed card
        -:  965:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  966:	{
        -:  967:	  if (state->hand[currentPlayer][i] == j)
        -:  968:	    {
        -:  969:	      discardCard(i, currentPlayer, state, 0);			
        -:  970:	      break;
        -:  971:	    }
        -:  972:	}
        -:  973:			
        -:  974:      return 0;
        -:  975:	*/
        -:  976:		
        -:  977:    case remodel:
    #####:  978:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  979:
    #####:  980:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  981:	{
    #####:  982:	  return -1;
        -:  983:	}
        -:  984:
    #####:  985:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  986:
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  989:
        -:  990:      //discard trashed card
    #####:  991:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  992:	{
    #####:  993:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  994:	    {
    #####:  995:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  996:	      break;
        -:  997:	    }
        -:  998:	}
        -:  999:
        -: 1000:
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case smithy:
    #####: 1004:		smithyRefact(currentPlayer, state, handPos, i);
call    0 never executed
    #####: 1005:		return 0;
        -: 1006:		
        -: 1007:    /*  //+3 Cards
        -: 1008:      for (i = 0; i < 3; i++)
        -: 1009:	{
        -: 1010:	  drawCard(currentPlayer, state);
        -: 1011:	}
        -: 1012:			
        -: 1013:      //discard card from hand
        -: 1014:      discardCard(handPos, currentPlayer, state, 0);
        -: 1015:      return 0;
        -: 1016:	 */
        -: 1017:		
        -: 1018:    case village:
        -: 1019:      //+1 Card
    #####: 1020:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1021:			
        -: 1022:      //+2 Actions
    #####: 1023:      state->numActions = state->numActions + 2;
        -: 1024:			
        -: 1025:      //discard played card from hand
    #####: 1026:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1027:      return 0;
        -: 1028:		
        -: 1029:    case baron:
    #####: 1030:      state->numBuys++;//Increase buys by 1!
    #####: 1031:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1032:	int p = 0;//Iterator for hand!
    #####: 1033:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1034:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1035:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1036:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1037:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1038:	    state->discardCount[currentPlayer]++;
    #####: 1039:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1041:	    }
    #####: 1042:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1043:	    state->handCount[currentPlayer]--;
    #####: 1044:	    card_not_discarded = 0;//Exit the loop
        -: 1045:	  }
    #####: 1046:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1047:	    if(DEBUG) {
        -: 1048:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1049:	      printf("Must gain an estate if there are any\n");
        -: 1050:	    }
    #####: 1051:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1052:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1053:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1054:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1055:		isGameOver(state);
call    0 never executed
        -: 1056:	      }
        -: 1057:	    }
    #####: 1058:	    card_not_discarded = 0;//Exit the loop
        -: 1059:	  }
        -: 1060:			    
        -: 1061:	  else{
    #####: 1062:	    p++;//Next card
        -: 1063:	  }
        -: 1064:	}
        -: 1065:      }
        -: 1066:			    
        -: 1067:      else{
    #####: 1068:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1069:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1070:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1071:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1072:	    isGameOver(state);
call    0 never executed
        -: 1073:	  }
        -: 1074:	}
        -: 1075:      }
        -: 1076:	    
        -: 1077:      
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case great_hall:
        -: 1081:      //+1 Card
    #####: 1082:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1083:			
        -: 1084:      //+1 Actions
    #####: 1085:      state->numActions++;
        -: 1086:			
        -: 1087:      //discard card from hand
    #####: 1088:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case minion:
    #####: 1092:		minionRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
    #####: 1093:		return 0;
        -: 1094:	/*
        -: 1095:      //+1 action
        -: 1096:      state->numActions++;
        -: 1097:			
        -: 1098:      //discard card from hand
        -: 1099:      discardCard(handPos, currentPlayer, state, 0);
        -: 1100:			
        -: 1101:      if (choice1)		//+2 coins
        -: 1102:	{
        -: 1103:	  state->coins = state->coins + 2;
        -: 1104:	}
        -: 1105:			
        -: 1106:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1107:	{
        -: 1108:	  //discard hand
        -: 1109:	  while(numHandCards(state) > 0)
        -: 1110:	    {
        -: 1111:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1112:	    }
        -: 1113:				
        -: 1114:	  //draw 4
        -: 1115:	  for (i = 0; i < 4; i++)
        -: 1116:	    {
        -: 1117:	      drawCard(currentPlayer, state);
        -: 1118:	    }
        -: 1119:				
        -: 1120:	  //other players discard hand and redraw if hand size > 4
        -: 1121:	  for (i = 0; i < state->numPlayers; i++)
        -: 1122:	    {
        -: 1123:	      if (i != currentPlayer)
        -: 1124:		{
        -: 1125:		  if ( state->handCount[i] > 4 )
        -: 1126:		    {
        -: 1127:		      //discard hand
        -: 1128:		      while( state->handCount[i] > 0 )
        -: 1129:			{
        -: 1130:			  discardCard(handPos, i, state, 0);
        -: 1131:			}
        -: 1132:							
        -: 1133:		      //draw 4
        -: 1134:		      for (j = 0; j < 4; j++)
        -: 1135:			{
        -: 1136:			  drawCard(i, state);
        -: 1137:			}
        -: 1138:		    }
        -: 1139:		}
        -: 1140:	    }
        -: 1141:				
        -: 1142:	}
        -: 1143:      return 0;
        -: 1144:	*/
        -: 1145:	
        -: 1146:    case steward:
    #####: 1147:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1148:	{
        -: 1149:	  //+2 cards
    #####: 1150:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1151:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1152:	}
    #####: 1153:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1154:	{
        -: 1155:	  //+2 coins
    #####: 1156:	  state->coins = state->coins + 2;
        -: 1157:	}
        -: 1158:      else
        -: 1159:	{
        -: 1160:	  //trash 2 cards in hand
    #####: 1161:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1162:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1163:	}
        -: 1164:			
        -: 1165:      //discard card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1167:      return 0;
        -: 1168:		
        -: 1169:    case tribute:
    #####: 1170:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1171:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1172:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1173:	  state->deckCount[nextPlayer]--;
        -: 1174:	}
    #####: 1175:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1176:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1177:	  state->discardCount[nextPlayer]--;
        -: 1178:	}
        -: 1179:	else{
        -: 1180:	  //No Card to Reveal
        -: 1181:	  if (DEBUG){
        -: 1182:	    printf("No cards to reveal\n");
        -: 1183:	  }
        -: 1184:	}
        -: 1185:      }
        -: 1186:	    
        -: 1187:      else{
    #####: 1188:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1189:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1190:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1191:	    state->deckCount[nextPlayer]++;
    #####: 1192:	    state->discard[nextPlayer][i] = -1;
    #####: 1193:	    state->discardCount[nextPlayer]--;
        -: 1194:	  }
        -: 1195:			    
    #####: 1196:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1197:	} 
    #####: 1198:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1199:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1200:	state->deckCount[nextPlayer]--;
    #####: 1201:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1202:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1203:	state->deckCount[nextPlayer]--;
        -: 1204:      }    
        -: 1205:		       
    #####: 1206:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1207:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1208:	state->playedCardCount++;
    #####: 1209:	tributeRevealedCards[1] = -1;
        -: 1210:      }
        -: 1211:
    #####: 1212:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1213:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1214:	  state->coins += 2;
        -: 1215:	}
        -: 1216:		    
    #####: 1217:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1218:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1219:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1220:	}
        -: 1221:	else{//Action Card
    #####: 1222:	  state->numActions = state->numActions + 2;
        -: 1223:	}
        -: 1224:      }
        -: 1225:	    
    #####: 1226:      return 0;
        -: 1227:		
        -: 1228:    case ambassador:
    #####: 1229:      j = 0;		//used to check if player has enough cards to discard
        -: 1230:
    #####: 1231:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1232:	{
    #####: 1233:	  return -1;				
        -: 1234:	}
        -: 1235:
    #####: 1236:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1237:	{
    #####: 1238:	  return -1;
        -: 1239:	}
        -: 1240:
    #####: 1241:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1242:	{
    #####: 1243:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1244:	    {
    #####: 1245:	      j++;
        -: 1246:	    }
        -: 1247:	}
    #####: 1248:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1249:	{
    #####: 1250:	  return -1;				
        -: 1251:	}
        -: 1252:
        -: 1253:      if (DEBUG) 
        -: 1254:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1255:
        -: 1256:      //increase supply count for choosen card by amount being discarded
    #####: 1257:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1258:			
        -: 1259:      //each other player gains a copy of revealed card
    #####: 1260:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1261:	{
    #####: 1262:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1263:	    {
    #####: 1264:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1265:	    }
        -: 1266:	}
        -: 1267:
        -: 1268:      //discard played card from hand
    #####: 1269:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1270:
        -: 1271:      //trash copies of cards returned to supply
    #####: 1272:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1273:	{
    #####: 1274:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1275:	    {
    #####: 1276:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1277:		{
    #####: 1278:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1279:		  break;
        -: 1280:		}
        -: 1281:	    }
        -: 1282:	}			
        -: 1283:
    #####: 1284:      return 0;
        -: 1285:		
        -: 1286:    case cutpurse:
    #####: 1287:		cutpurseRefact(currentPlayer, state, handPos, i, j, k);
call    0 never executed
        -: 1288:	/*
        -: 1289:      updateCoins(currentPlayer, state, 2);
        -: 1290:      for (i = 0; i < state->numPlayers; i++)
        -: 1291:	{
        -: 1292:	  if (i != currentPlayer)
        -: 1293:	    {
        -: 1294:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1295:		{
        -: 1296:		  if (state->hand[i][j] == copper)
        -: 1297:		    {
        -: 1298:		      discardCard(j, i, state, 0);
        -: 1299:		      break;
        -: 1300:		    }
        -: 1301:		  if (j == state->handCount[i])
        -: 1302:		    {
        -: 1303:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1304:			{
        -: 1305:			  if (DEBUG)
        -: 1306:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1307:			}	
        -: 1308:		      break;
        -: 1309:		    }		
        -: 1310:		}
        -: 1311:					
        -: 1312:	    }
        -: 1313:				
        -: 1314:	}				
        -: 1315:
        -: 1316:      //discard played card from hand
        -: 1317:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1318:
        -: 1319:      return 0;
        -: 1320:	*/
        -: 1321:		
        -: 1322:    case embargo: 
        -: 1323:      //+2 Coins
    #####: 1324:      state->coins = state->coins + 2;
        -: 1325:			
        -: 1326:      //see if selected pile is in play
    #####: 1327:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1328:	{
    #####: 1329:	  return -1;
        -: 1330:	}
        -: 1331:			
        -: 1332:      //add embargo token to selected supply pile
    #####: 1333:      state->embargoTokens[choice1]++;
        -: 1334:			
        -: 1335:      //trash card
    #####: 1336:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1337:      return 0;
        -: 1338:		
        -: 1339:    case outpost:
        -: 1340:      //set outpost flag
    #####: 1341:      state->outpostPlayed++;
        -: 1342:			
        -: 1343:      //discard card
    #####: 1344:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1345:      return 0;
        -: 1346:		
        -: 1347:    case salvager:
        -: 1348:      //+1 buy
    #####: 1349:      state->numBuys++;
        -: 1350:			
    #####: 1351:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1352:	{
        -: 1353:	  //gain coins equal to trashed card
    #####: 1354:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1355:	  //trash card
    #####: 1356:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1357:	}
        -: 1358:			
        -: 1359:      //discard card
    #####: 1360:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1361:      return 0;
        -: 1362:		
        -: 1363:    case sea_hag:
    #####: 1364:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1365:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1366:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1367:	  state->discardCount[i]++;
    #####: 1368:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1369:	}
        -: 1370:      }
    #####: 1371:      return 0;
        -: 1372:		
        -: 1373:    case treasure_map:
        -: 1374:      //search hand for another treasure_map
    #####: 1375:      index = -1;
    #####: 1376:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1377:	{
    #####: 1378:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1379:	    {
    #####: 1380:	      index = i;
    #####: 1381:	      break;
        -: 1382:	    }
        -: 1383:	}
    #####: 1384:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1385:	{
        -: 1386:	  //trash both treasure cards
    #####: 1387:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1388:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1389:
        -: 1390:	  //gain 4 Gold cards
    #####: 1391:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1392:	    {
    #####: 1393:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1394:	    }
        -: 1395:				
        -: 1396:	  //return success
    #####: 1397:	  return 1;
        -: 1398:	}
        -: 1399:			
        -: 1400:      //no second treasure_map found in hand
    #####: 1401:      return -1;
        -: 1402:    }
        -: 1403:	
    #####: 1404:  return -1;
        -: 1405:}
        -: 1406:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1407:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1408:{
        -: 1409:  //if card is not trashed, added to Played pile 
    #####: 1410:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1411:    {
        -: 1412:      //add card to played pile
    #####: 1413:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1414:      state->playedCardCount++;
        -: 1415:    }
        -: 1416:  //set played card to -1
    #####: 1417:  state->hand[currentPlayer][handPos] = -1;
        -: 1418:	
        -: 1419:  //remove card from player's hand
    #####: 1420:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1421:    {
        -: 1422:      //reduce number of cards in hand
    #####: 1423:      state->handCount[currentPlayer]--;
        -: 1424:    }
    #####: 1425:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1426:    {
        -: 1427:      //reduce number of cards in hand
    #####: 1428:      state->handCount[currentPlayer]--;
        -: 1429:    }
        -: 1430:  else 	
        -: 1431:    {
        -: 1432:      //replace discarded card with last card in hand
    #####: 1433:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1434:      //set last card to -1
    #####: 1435:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1436:      //reduce number of cards in hand
    #####: 1437:      state->handCount[currentPlayer]--;
        -: 1438:    }
        -: 1439:	
    #####: 1440:  return 0;
        -: 1441:}
        -: 1442:
function gainCard called 2000 returned 100% blocks executed 70%
     2000: 1443:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1444:{
        -: 1445:  //Note: supplyPos is enum of choosen card
        -: 1446:	
        -: 1447:  //check if supply pile is empty (0) or card is not used in game (-1)
     2000: 1448:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1449:    {
    #####: 1450:      return -1;
        -: 1451:    }
        -: 1452:	
        -: 1453:  //added card for [whoseTurn] current player:
        -: 1454:  // toFlag = 0 : add to discard
        -: 1455:  // toFlag = 1 : add to deck
        -: 1456:  // toFlag = 2 : add to hand
        -: 1457:
     2000: 1458:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1459:    {
    #####: 1460:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1461:      state->deckCount[player]++;
        -: 1462:    }
     2000: 1463:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1464:    {
     2000: 1465:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     2000: 1466:      state->handCount[player]++;
        -: 1467:    }
        -: 1468:  else
        -: 1469:    {
    #####: 1470:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1471:      state->discardCount[player]++;
        -: 1472:    }
        -: 1473:	
        -: 1474:  //decrease number in supply pile
     2000: 1475:  state->supplyCount[supplyPos]--;
        -: 1476:	 
     2000: 1477:  return 0;
        -: 1478:}
        -: 1479:
function updateCoins called 4000 returned 100% blocks executed 100%
     4000: 1480:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1481:{
        -: 1482:  int i;
        -: 1483:	
        -: 1484:  //reset coin count
     4000: 1485:  state->coins = 0;
        -: 1486:  
        -: 1487:  //add coins for each Treasure card in player's hand
   494696: 1488:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1489:    {
   490696: 1490:      if (state->hand[player][i] == copper)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1491:	{
    27611: 1492:	  state->coins += 1;
        -: 1493:	}
   463085: 1494:      else if (state->hand[player][i] == silver)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1495:	{
    20994: 1496:	  state->coins += 2;
        -: 1497:	}
   442091: 1498:      else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1499:	{
    17304: 1500:	  state->coins += 3;
        -: 1501:	}	
        -: 1502:    }	
        -: 1503:
        -: 1504:  //add bonus
     4000: 1505:  state->coins += bonus;
        -: 1506:
     4000: 1507:  return 0;
        -: 1508:}
        -: 1509:
        -: 1510:
        -: 1511://end of dominion.c
        -: 1512:
File 'dominion.c'
Lines executed:28.16% of 561
Branches executed:29.16% of 415
Taken at least once:20.24% of 415
Calls executed:17.89% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 69750 returned 100% blocks executed 83%
    69750:    8:int compare(const void* a, const void* b) {
    69750:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    69750:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    18600:   12:    return -1;
    51150:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2000 returned 100% blocks executed 94%
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
call    0 returned 100%
     2000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   220000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   200000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2000:   73:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   74:    {
     1350:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      650:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
      650:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2000:   87:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   88:    {
     1350:   89:      state->supplyCount[estate] = 8;
     1350:   90:      state->supplyCount[duchy] = 8;
     1350:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      650:   95:      state->supplyCount[estate] = 12;
      650:   96:      state->supplyCount[duchy] = 12;
      650:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  102:  state->supplyCount[silver] = 40;
     2000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   330000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   310000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
     1350:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      650:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    18000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    20000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   290000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     6650:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
     4650:  140:      state->deckCount[i] = 0;
    18600:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    13950:  143:	  state->deck[i][j] = estate;
    13950:  144:	  state->deckCount[i]++;
        -:  145:	}
    37200:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    32550:  148:	  state->deck[i][j] = copper;
    32550:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     6650:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
     4650:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     6650:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     4650:  166:      state->handCount[i] = 0;
     4650:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    54000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2000:  182:  state->outpostPlayed = 0;
     2000:  183:  state->phase = 0;
     2000:  184:  state->numActions = 1;
     2000:  185:  state->numBuys = 1;
     2000:  186:  state->playedCardCount = 0;
     2000:  187:  state->whoseTurn = 0;
     2000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     2000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     2000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 15924 returned 100% blocks executed 100%
    15924:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    15924:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    15924:  209:  if (state->deckCount[player] < 1)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
    11274:  210:    return -1;
     4650:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    55800:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    46500:  216:    newDeck[newDeckPos] = state->deck[player][card];
    46500:  217:    newDeckPos++;
   162278:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
   115778:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    46500:  221:    state->deckCount[player]--;
        -:  222:  }
    51150:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  224:    state->deck[player][i] = newDeck[i];
    46500:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     4650:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 2000 returned 100% blocks executed 73%
     2000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     2000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     2000:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     2000:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     2000:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
     2000:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     2000:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
     2000:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
     2000:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
     2000:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 2000 returned 100% blocks executed 100%
     2000:  315:int handCard(int handPos, struct gameState *state) {
     2000:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2000 returned 100% blocks executed 100%
     2000:  320:int supplyCount(int card, struct gameState *state) {
     2000:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4000 returned 100% blocks executed 100%
     4000:  346:int whoseTurn(struct gameState *state) {
     4000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 63162 returned 100% blocks executed 85%
    63162:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    63162:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     5637:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     5637:  538:    state->deckCount[player] = state->discardCount[player];
     5637:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5637:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5637:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5637:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5637:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5637:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     5637:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    57525:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    57525:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    57525:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    57525:  576:    state->deckCount[player]--;
    57525:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    57525:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function smithyRefact called 0 returned 0% blocks executed 0%
    #####:  646:int smithyRefact(int currentPlayer, struct gameState *state, int handPos, int i)
        -:  647:{
        -:  648:	//+3 Cards
    #####:  649:      for (i = 0; i < 5; i++) // changed from 3 cards to 5
branch  0 never executed
branch  1 never executed
        -:  650:	{
    #####:  651:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  652:	}
        -:  653:			
        -:  654:      //discard card from hand
    #####:  655:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  656:      return 0;
        -:  657:}
        -:  658:
function adventurerRefact called 2000 returned 100% blocks executed 100%
     2000:  659:int adventurerRefact(int currentPlayer, struct gameState *state, int temphand[], int drawntreasure, int cardDrawn, int z)
        -:  660:{	  
    57162:  661:	while(drawntreasure<2){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    53162:  662:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
     5637:  663:			shuffle(currentPlayer, state);
call    0 returned 100%
        -:  664:		}
    53162:  665:	drawCard(currentPlayer, state);
call    0 returned 100%
    53162:  666:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    53162:  667:	if (cardDrawn == copper || cardDrawn == silver) // removed gold as part of the statement || cardDrawn == gold
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
     4000:  668:		drawntreasure++;
        -:  669:	else{
    49162:  670:		temphand[z]=cardDrawn;
    49162:  671:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    49162:  672:		z++;
        -:  673:		}
        -:  674:    }
        -:  675:    
    53162:  676:	while(z-1>=0){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    49162:  677:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    49162:  678:		z=z-1;
        -:  679:    }
     2000:  680:    return 0;
        -:  681:}
        -:  682:
function cutpurseRefact called 0 returned 0% blocks executed 0%
    #####:  683:int cutpurseRefact(int currentPlayer, struct gameState *state, int handPos, int i, int j, int k)
        -:  684:{
    #####:  685:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  686:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  687:	{
    #####:  688:	  if (i == currentPlayer)  // removed not from statement != currentPlayer
branch  0 never executed
branch  1 never executed
        -:  689:	    {
    #####:  690:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  691:		{
    #####:  692:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  693:		    {
    #####:  694:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  695:		      break;
        -:  696:		    }
    #####:  697:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  698:		    {
    #####:  699:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  700:			{
        -:  701:			  if (DEBUG)
        -:  702:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  703:			}	
    #####:  704:		      break;
        -:  705:		    }		
        -:  706:		}
        -:  707:					
        -:  708:	    }
        -:  709:				
        -:  710:	}				
        -:  711:
        -:  712:      //discard played card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  714:
    #####:  715:      return 0;
        -:  716:}
        -:  717:
function mineRefact called 0 returned 0% blocks executed 0%
    #####:  718:int mineRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  719:{
    #####:  720:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:		
    #####:  727:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  728:	{
    #####:  729:	  return -1;
        -:  730:	}
        -:  731:
    #####:  732:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  733:	{
    #####:  734:	  return -1;
        -:  735:	}
        -:  736:
    #####:  737:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  738:
        -:  739:      //discard card from hand
    #####:  740:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  741:
        -:  742:      //discard trashed card
    #####:  743:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  744:	{
    #####:  745:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  746:	    {
    #####:  747:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  748:	      break;
        -:  749:	    }
        -:  750:	}
        -:  751:			
    #####:  752:      return 0;
        -:  753:}
        -:  754:
function minionRefact called 0 returned 0% blocks executed 0%
    #####:  755:int minionRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  756:{
        -:  757:	//+1 action
    #####:  758:	state->numActions++;
        -:  759:			
        -:  760:	//discard card from hand
    #####:  761:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  762:	
        -:  763:
        -:  764:	//reversed choices 1 & 2
    #####:  765:	if (choice2)		//+2 coins 
branch  0 never executed
branch  1 never executed
        -:  766:	{
    #####:  767:		state->coins = state->coins + 2;
        -:  768:	}
        -:  769:			
    #####:  770:    else if (choice1)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  771:	{
        -:  772:		//discard hand
    #####:  773:		while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  774:	    {
    #####:  775:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  776:	    }
        -:  777:				
        -:  778:		//draw 4
    #####:  779:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  780:	    {
    #####:  781:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  782:	    }
        -:  783:				
        -:  784:		//other players discard hand and redraw if hand size > 4
    #####:  785:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  788:			{
    #####:  789:				if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  790:				{
        -:  791:					//discard hand
    #####:  792:					while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  793:					{
    #####:  794:						discardCard(handPos, i, state, 0);
call    0 never executed
        -:  795:					}
        -:  796:							
        -:  797:					//draw 4
    #####:  798:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  799:					{
    #####:  800:						drawCard(i, state);
call    0 never executed
        -:  801:					}
        -:  802:				}
        -:  803:			}
        -:  804:	    }
        -:  805:				
        -:  806:	}
    #####:  807:		return 0;
        -:  808:}
        -:  809:
function cardEffect called 2000 returned 100% blocks executed 4%
     2000:  810:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  811:{
        -:  812:  int i;
        -:  813:  int j;
        -:  814:  int k;
        -:  815:  int x;
        -:  816:  int index;
     2000:  817:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  818:  int nextPlayer = currentPlayer + 1;
        -:  819:
     2000:  820:  int tributeRevealedCards[2] = {-1, -1};
        -:  821:  int temphand[MAX_HAND];// moved above the if statement
     2000:  822:  int drawntreasure=0;
        -:  823:  int cardDrawn;
     2000:  824:  int z = 0;// this is the counter for the temp hand
     2000:  825:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1001:  826:    nextPlayer = 0;
        -:  827:  }
        -:  828:  
        -:  829:	
        -:  830:  //uses switch to select card and perform actions
     2000:  831:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  832:    {
        -:  833:    case adventurer:
     2000:  834:		adventurerRefact(currentPlayer, state, temphand, drawntreasure, cardDrawn, z);
call    0 returned 100%
     2000:  835:		return 0;
        -:  836:	/*
        -:  837:	  while(drawntreasure<2){
        -:  838:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  839:	  shuffle(currentPlayer, state);
        -:  840:	}
        -:  841:	drawCard(currentPlayer, state);
        -:  842:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  843:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  844:	  drawntreasure++;
        -:  845:	else{
        -:  846:	  temphand[z]=cardDrawn;
        -:  847:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  848:	  z++;
        -:  849:	}
        -:  850:      }
        -:  851:      while(z-1>=0){
        -:  852:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  853:	z=z-1;
        -:  854:      }
        -:  855:      return 0;
        -:  856:	*/
        -:  857:			
        -:  858:    case council_room:
        -:  859:      //+4 Cards
    #####:  860:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  861:	{
    #####:  862:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  863:	}
        -:  864:			
        -:  865:      //+1 Buy
    #####:  866:      state->numBuys++;
        -:  867:			
        -:  868:      //Each other player draws a card
    #####:  869:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  870:	{
    #####:  871:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  872:	    {
    #####:  873:	      drawCard(i, state);
call    0 never executed
        -:  874:	    }
        -:  875:	}
        -:  876:			
        -:  877:      //put played card in played card pile
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:			
    #####:  880:      return 0;
        -:  881:			
        -:  882:    case feast:
        -:  883:      //gain card with cost up to 5
        -:  884:      //Backup hand
    #####:  885:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  886:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  887:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  888:      }
        -:  889:      //Backup hand
        -:  890:
        -:  891:      //Update Coins for Buy
    #####:  892:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  893:      x = 1;//Condition to loop on
    #####:  894:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  895:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  896:	  if (DEBUG)
        -:  897:	    printf("None of that card left, sorry!\n");
        -:  898:
        -:  899:	  if (DEBUG){
        -:  900:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  901:	  }
        -:  902:	}
    #####:  903:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  904:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  905:
        -:  906:	  if (DEBUG){
        -:  907:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  908:	  }
        -:  909:	}
        -:  910:	else{
        -:  911:
        -:  912:	  if (DEBUG){
        -:  913:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  914:	  }
        -:  915:
    #####:  916:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  917:	  x = 0;//No more buying cards
        -:  918:
        -:  919:	  if (DEBUG){
        -:  920:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  921:	  }
        -:  922:
        -:  923:	}
        -:  924:      }     
        -:  925:
        -:  926:      //Reset Hand
    #####:  927:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  928:	state->hand[currentPlayer][i] = temphand[i];
    #####:  929:	temphand[i] = -1;
        -:  930:      }
        -:  931:      //Reset Hand
        -:  932:      			
    #####:  933:      return 0;
        -:  934:			
        -:  935:    case gardens:
    #####:  936:      return -1;
        -:  937:			
        -:  938:    case mine:
    #####:  939:		return mineRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -:  940:		//return 0;
        -:  941:	/*
        -:  942:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  943:
        -:  944:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  945:	{
        -:  946:	  return -1;
        -:  947:	}
        -:  948:		
        -:  949:      if (choice2 > treasure_map || choice2 < curse)
        -:  950:	{
        -:  951:	  return -1;
        -:  952:	}
        -:  953:
        -:  954:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  955:	{
        -:  956:	  return -1;
        -:  957:	}
        -:  958:
        -:  959:      gainCard(choice2, state, 2, currentPlayer);
        -:  960:
        -:  961:      //discard card from hand
        -:  962:      discardCard(handPos, currentPlayer, state, 0);
        -:  963:
        -:  964:      //discard trashed card
        -:  965:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  966:	{
        -:  967:	  if (state->hand[currentPlayer][i] == j)
        -:  968:	    {
        -:  969:	      discardCard(i, currentPlayer, state, 0);			
        -:  970:	      break;
        -:  971:	    }
        -:  972:	}
        -:  973:			
        -:  974:      return 0;
        -:  975:	*/
        -:  976:		
        -:  977:    case remodel:
    #####:  978:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  979:
    #####:  980:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  981:	{
    #####:  982:	  return -1;
        -:  983:	}
        -:  984:
    #####:  985:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  986:
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  989:
        -:  990:      //discard trashed card
    #####:  991:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  992:	{
    #####:  993:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  994:	    {
    #####:  995:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  996:	      break;
        -:  997:	    }
        -:  998:	}
        -:  999:
        -: 1000:
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case smithy:
    #####: 1004:		smithyRefact(currentPlayer, state, handPos, i);
call    0 never executed
    #####: 1005:		return 0;
        -: 1006:		
        -: 1007:    /*  //+3 Cards
        -: 1008:      for (i = 0; i < 3; i++)
        -: 1009:	{
        -: 1010:	  drawCard(currentPlayer, state);
        -: 1011:	}
        -: 1012:			
        -: 1013:      //discard card from hand
        -: 1014:      discardCard(handPos, currentPlayer, state, 0);
        -: 1015:      return 0;
        -: 1016:	 */
        -: 1017:		
        -: 1018:    case village:
        -: 1019:      //+1 Card
    #####: 1020:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1021:			
        -: 1022:      //+2 Actions
    #####: 1023:      state->numActions = state->numActions + 2;
        -: 1024:			
        -: 1025:      //discard played card from hand
    #####: 1026:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1027:      return 0;
        -: 1028:		
        -: 1029:    case baron:
    #####: 1030:      state->numBuys++;//Increase buys by 1!
    #####: 1031:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1032:	int p = 0;//Iterator for hand!
    #####: 1033:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1034:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1035:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1036:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1037:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1038:	    state->discardCount[currentPlayer]++;
    #####: 1039:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1041:	    }
    #####: 1042:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1043:	    state->handCount[currentPlayer]--;
    #####: 1044:	    card_not_discarded = 0;//Exit the loop
        -: 1045:	  }
    #####: 1046:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1047:	    if(DEBUG) {
        -: 1048:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1049:	      printf("Must gain an estate if there are any\n");
        -: 1050:	    }
    #####: 1051:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1052:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1053:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1054:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1055:		isGameOver(state);
call    0 never executed
        -: 1056:	      }
        -: 1057:	    }
    #####: 1058:	    card_not_discarded = 0;//Exit the loop
        -: 1059:	  }
        -: 1060:			    
        -: 1061:	  else{
    #####: 1062:	    p++;//Next card
        -: 1063:	  }
        -: 1064:	}
        -: 1065:      }
        -: 1066:			    
        -: 1067:      else{
    #####: 1068:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1069:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1070:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1071:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1072:	    isGameOver(state);
call    0 never executed
        -: 1073:	  }
        -: 1074:	}
        -: 1075:      }
        -: 1076:	    
        -: 1077:      
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case great_hall:
        -: 1081:      //+1 Card
    #####: 1082:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1083:			
        -: 1084:      //+1 Actions
    #####: 1085:      state->numActions++;
        -: 1086:			
        -: 1087:      //discard card from hand
    #####: 1088:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case minion:
    #####: 1092:		minionRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
    #####: 1093:		return 0;
        -: 1094:	/*
        -: 1095:      //+1 action
        -: 1096:      state->numActions++;
        -: 1097:			
        -: 1098:      //discard card from hand
        -: 1099:      discardCard(handPos, currentPlayer, state, 0);
        -: 1100:			
        -: 1101:      if (choice1)		//+2 coins
        -: 1102:	{
        -: 1103:	  state->coins = state->coins + 2;
        -: 1104:	}
        -: 1105:			
        -: 1106:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1107:	{
        -: 1108:	  //discard hand
        -: 1109:	  while(numHandCards(state) > 0)
        -: 1110:	    {
        -: 1111:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1112:	    }
        -: 1113:				
        -: 1114:	  //draw 4
        -: 1115:	  for (i = 0; i < 4; i++)
        -: 1116:	    {
        -: 1117:	      drawCard(currentPlayer, state);
        -: 1118:	    }
        -: 1119:				
        -: 1120:	  //other players discard hand and redraw if hand size > 4
        -: 1121:	  for (i = 0; i < state->numPlayers; i++)
        -: 1122:	    {
        -: 1123:	      if (i != currentPlayer)
        -: 1124:		{
        -: 1125:		  if ( state->handCount[i] > 4 )
        -: 1126:		    {
        -: 1127:		      //discard hand
        -: 1128:		      while( state->handCount[i] > 0 )
        -: 1129:			{
        -: 1130:			  discardCard(handPos, i, state, 0);
        -: 1131:			}
        -: 1132:							
        -: 1133:		      //draw 4
        -: 1134:		      for (j = 0; j < 4; j++)
        -: 1135:			{
        -: 1136:			  drawCard(i, state);
        -: 1137:			}
        -: 1138:		    }
        -: 1139:		}
        -: 1140:	    }
        -: 1141:				
        -: 1142:	}
        -: 1143:      return 0;
        -: 1144:	*/
        -: 1145:	
        -: 1146:    case steward:
    #####: 1147:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1148:	{
        -: 1149:	  //+2 cards
    #####: 1150:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1151:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1152:	}
    #####: 1153:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1154:	{
        -: 1155:	  //+2 coins
    #####: 1156:	  state->coins = state->coins + 2;
        -: 1157:	}
        -: 1158:      else
        -: 1159:	{
        -: 1160:	  //trash 2 cards in hand
    #####: 1161:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1162:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1163:	}
        -: 1164:			
        -: 1165:      //discard card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1167:      return 0;
        -: 1168:		
        -: 1169:    case tribute:
    #####: 1170:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1171:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1172:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1173:	  state->deckCount[nextPlayer]--;
        -: 1174:	}
    #####: 1175:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1176:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1177:	  state->discardCount[nextPlayer]--;
        -: 1178:	}
        -: 1179:	else{
        -: 1180:	  //No Card to Reveal
        -: 1181:	  if (DEBUG){
        -: 1182:	    printf("No cards to reveal\n");
        -: 1183:	  }
        -: 1184:	}
        -: 1185:      }
        -: 1186:	    
        -: 1187:      else{
    #####: 1188:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1189:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1190:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1191:	    state->deckCount[nextPlayer]++;
    #####: 1192:	    state->discard[nextPlayer][i] = -1;
    #####: 1193:	    state->discardCount[nextPlayer]--;
        -: 1194:	  }
        -: 1195:			    
    #####: 1196:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1197:	} 
    #####: 1198:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1199:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1200:	state->deckCount[nextPlayer]--;
    #####: 1201:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1202:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1203:	state->deckCount[nextPlayer]--;
        -: 1204:      }    
        -: 1205:		       
    #####: 1206:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1207:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1208:	state->playedCardCount++;
    #####: 1209:	tributeRevealedCards[1] = -1;
        -: 1210:      }
        -: 1211:
    #####: 1212:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1213:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1214:	  state->coins += 2;
        -: 1215:	}
        -: 1216:		    
    #####: 1217:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1218:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1219:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1220:	}
        -: 1221:	else{//Action Card
    #####: 1222:	  state->numActions = state->numActions + 2;
        -: 1223:	}
        -: 1224:      }
        -: 1225:	    
    #####: 1226:      return 0;
        -: 1227:		
        -: 1228:    case ambassador:
    #####: 1229:      j = 0;		//used to check if player has enough cards to discard
        -: 1230:
    #####: 1231:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1232:	{
    #####: 1233:	  return -1;				
        -: 1234:	}
        -: 1235:
    #####: 1236:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1237:	{
    #####: 1238:	  return -1;
        -: 1239:	}
        -: 1240:
    #####: 1241:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1242:	{
    #####: 1243:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1244:	    {
    #####: 1245:	      j++;
        -: 1246:	    }
        -: 1247:	}
    #####: 1248:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1249:	{
    #####: 1250:	  return -1;				
        -: 1251:	}
        -: 1252:
        -: 1253:      if (DEBUG) 
        -: 1254:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1255:
        -: 1256:      //increase supply count for choosen card by amount being discarded
    #####: 1257:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1258:			
        -: 1259:      //each other player gains a copy of revealed card
    #####: 1260:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1261:	{
    #####: 1262:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1263:	    {
    #####: 1264:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1265:	    }
        -: 1266:	}
        -: 1267:
        -: 1268:      //discard played card from hand
    #####: 1269:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1270:
        -: 1271:      //trash copies of cards returned to supply
    #####: 1272:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1273:	{
    #####: 1274:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1275:	    {
    #####: 1276:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1277:		{
    #####: 1278:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1279:		  break;
        -: 1280:		}
        -: 1281:	    }
        -: 1282:	}			
        -: 1283:
    #####: 1284:      return 0;
        -: 1285:		
        -: 1286:    case cutpurse:
    #####: 1287:		cutpurseRefact(currentPlayer, state, handPos, i, j, k);
call    0 never executed
        -: 1288:	/*
        -: 1289:      updateCoins(currentPlayer, state, 2);
        -: 1290:      for (i = 0; i < state->numPlayers; i++)
        -: 1291:	{
        -: 1292:	  if (i != currentPlayer)
        -: 1293:	    {
        -: 1294:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1295:		{
        -: 1296:		  if (state->hand[i][j] == copper)
        -: 1297:		    {
        -: 1298:		      discardCard(j, i, state, 0);
        -: 1299:		      break;
        -: 1300:		    }
        -: 1301:		  if (j == state->handCount[i])
        -: 1302:		    {
        -: 1303:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1304:			{
        -: 1305:			  if (DEBUG)
        -: 1306:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1307:			}	
        -: 1308:		      break;
        -: 1309:		    }		
        -: 1310:		}
        -: 1311:					
        -: 1312:	    }
        -: 1313:				
        -: 1314:	}				
        -: 1315:
        -: 1316:      //discard played card from hand
        -: 1317:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1318:
        -: 1319:      return 0;
        -: 1320:	*/
        -: 1321:		
        -: 1322:    case embargo: 
        -: 1323:      //+2 Coins
    #####: 1324:      state->coins = state->coins + 2;
        -: 1325:			
        -: 1326:      //see if selected pile is in play
    #####: 1327:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1328:	{
    #####: 1329:	  return -1;
        -: 1330:	}
        -: 1331:			
        -: 1332:      //add embargo token to selected supply pile
    #####: 1333:      state->embargoTokens[choice1]++;
        -: 1334:			
        -: 1335:      //trash card
    #####: 1336:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1337:      return 0;
        -: 1338:		
        -: 1339:    case outpost:
        -: 1340:      //set outpost flag
    #####: 1341:      state->outpostPlayed++;
        -: 1342:			
        -: 1343:      //discard card
    #####: 1344:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1345:      return 0;
        -: 1346:		
        -: 1347:    case salvager:
        -: 1348:      //+1 buy
    #####: 1349:      state->numBuys++;
        -: 1350:			
    #####: 1351:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1352:	{
        -: 1353:	  //gain coins equal to trashed card
    #####: 1354:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1355:	  //trash card
    #####: 1356:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1357:	}
        -: 1358:			
        -: 1359:      //discard card
    #####: 1360:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1361:      return 0;
        -: 1362:		
        -: 1363:    case sea_hag:
    #####: 1364:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1365:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1366:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1367:	  state->discardCount[i]++;
    #####: 1368:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1369:	}
        -: 1370:      }
    #####: 1371:      return 0;
        -: 1372:		
        -: 1373:    case treasure_map:
        -: 1374:      //search hand for another treasure_map
    #####: 1375:      index = -1;
    #####: 1376:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1377:	{
    #####: 1378:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1379:	    {
    #####: 1380:	      index = i;
    #####: 1381:	      break;
        -: 1382:	    }
        -: 1383:	}
    #####: 1384:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1385:	{
        -: 1386:	  //trash both treasure cards
    #####: 1387:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1388:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1389:
        -: 1390:	  //gain 4 Gold cards
    #####: 1391:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1392:	    {
    #####: 1393:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1394:	    }
        -: 1395:				
        -: 1396:	  //return success
    #####: 1397:	  return 1;
        -: 1398:	}
        -: 1399:			
        -: 1400:      //no second treasure_map found in hand
    #####: 1401:      return -1;
        -: 1402:    }
        -: 1403:	
    #####: 1404:  return -1;
        -: 1405:}
        -: 1406:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1407:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1408:{
        -: 1409:  //if card is not trashed, added to Played pile 
    #####: 1410:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1411:    {
        -: 1412:      //add card to played pile
    #####: 1413:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1414:      state->playedCardCount++;
        -: 1415:    }
        -: 1416:  //set played card to -1
    #####: 1417:  state->hand[currentPlayer][handPos] = -1;
        -: 1418:	
        -: 1419:  //remove card from player's hand
    #####: 1420:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1421:    {
        -: 1422:      //reduce number of cards in hand
    #####: 1423:      state->handCount[currentPlayer]--;
        -: 1424:    }
    #####: 1425:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1426:    {
        -: 1427:      //reduce number of cards in hand
    #####: 1428:      state->handCount[currentPlayer]--;
        -: 1429:    }
        -: 1430:  else 	
        -: 1431:    {
        -: 1432:      //replace discarded card with last card in hand
    #####: 1433:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1434:      //set last card to -1
    #####: 1435:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1436:      //reduce number of cards in hand
    #####: 1437:      state->handCount[currentPlayer]--;
        -: 1438:    }
        -: 1439:	
    #####: 1440:  return 0;
        -: 1441:}
        -: 1442:
function gainCard called 2000 returned 100% blocks executed 70%
     2000: 1443:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1444:{
        -: 1445:  //Note: supplyPos is enum of choosen card
        -: 1446:	
        -: 1447:  //check if supply pile is empty (0) or card is not used in game (-1)
     2000: 1448:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1449:    {
    #####: 1450:      return -1;
        -: 1451:    }
        -: 1452:	
        -: 1453:  //added card for [whoseTurn] current player:
        -: 1454:  // toFlag = 0 : add to discard
        -: 1455:  // toFlag = 1 : add to deck
        -: 1456:  // toFlag = 2 : add to hand
        -: 1457:
     2000: 1458:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1459:    {
    #####: 1460:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1461:      state->deckCount[player]++;
        -: 1462:    }
     2000: 1463:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1464:    {
     2000: 1465:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     2000: 1466:      state->handCount[player]++;
        -: 1467:    }
        -: 1468:  else
        -: 1469:    {
    #####: 1470:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1471:      state->discardCount[player]++;
        -: 1472:    }
        -: 1473:	
        -: 1474:  //decrease number in supply pile
     2000: 1475:  state->supplyCount[supplyPos]--;
        -: 1476:	 
     2000: 1477:  return 0;
        -: 1478:}
        -: 1479:
function updateCoins called 4000 returned 100% blocks executed 100%
     4000: 1480:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1481:{
        -: 1482:  int i;
        -: 1483:	
        -: 1484:  //reset coin count
     4000: 1485:  state->coins = 0;
        -: 1486:  
        -: 1487:  //add coins for each Treasure card in player's hand
   494696: 1488:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1489:    {
   490696: 1490:      if (state->hand[player][i] == copper)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1491:	{
    27611: 1492:	  state->coins += 1;
        -: 1493:	}
   463085: 1494:      else if (state->hand[player][i] == silver)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1495:	{
    20994: 1496:	  state->coins += 2;
        -: 1497:	}
   442091: 1498:      else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1499:	{
    17304: 1500:	  state->coins += 3;
        -: 1501:	}	
        -: 1502:    }	
        -: 1503:
        -: 1504:  //add bonus
     4000: 1505:  state->coins += bonus;
        -: 1506:
     4000: 1507:  return 0;
        -: 1508:}
        -: 1509:
        -: 1510:
        -: 1511://end of dominion.c
        -: 1512:
File 'dominion.c'
Lines executed:28.11% of 562
Branches executed:29.16% of 415
Taken at least once:20.24% of 415
Calls executed:17.71% of 96
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 69750 returned 100% blocks executed 83%
    69750:    8:int compare(const void* a, const void* b) {
    69750:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    69750:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    18600:   12:    return -1;
    51150:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2000 returned 100% blocks executed 94%
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
call    0 returned 100%
     2000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   220000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   200000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2000:   73:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   74:    {
     1350:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      650:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
      650:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2000:   87:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   88:    {
     1350:   89:      state->supplyCount[estate] = 8;
     1350:   90:      state->supplyCount[duchy] = 8;
     1350:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      650:   95:      state->supplyCount[estate] = 12;
      650:   96:      state->supplyCount[duchy] = 12;
      650:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  102:  state->supplyCount[silver] = 40;
     2000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   330000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   310000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
     1350:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      650:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    18000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    20000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   290000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     6650:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
     4650:  140:      state->deckCount[i] = 0;
    18600:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    13950:  143:	  state->deck[i][j] = estate;
    13950:  144:	  state->deckCount[i]++;
        -:  145:	}
    37200:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    32550:  148:	  state->deck[i][j] = copper;
    32550:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     6650:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
     4650:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     6650:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     4650:  166:      state->handCount[i] = 0;
     4650:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    54000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2000:  182:  state->outpostPlayed = 0;
     2000:  183:  state->phase = 0;
     2000:  184:  state->numActions = 1;
     2000:  185:  state->numBuys = 1;
     2000:  186:  state->playedCardCount = 0;
     2000:  187:  state->whoseTurn = 0;
     2000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     2000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     2000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 15924 returned 100% blocks executed 100%
    15924:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    15924:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    15924:  209:  if (state->deckCount[player] < 1)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
    11274:  210:    return -1;
     4650:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    55800:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    46500:  216:    newDeck[newDeckPos] = state->deck[player][card];
    46500:  217:    newDeckPos++;
   162278:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
   115778:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    46500:  221:    state->deckCount[player]--;
        -:  222:  }
    51150:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  224:    state->deck[player][i] = newDeck[i];
    46500:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     4650:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 2000 returned 100% blocks executed 69%
     2000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     2000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     2000:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     2000:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     2000:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
     2000:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     2000:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:	  printf("Return cardeffect = -1\n");
call    0 never executed
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
     2000:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
     2000:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  269:	
     2000:  270:  return 0;
        -:  271:}
        -:  272:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
    #####:  281:  who = state->whoseTurn;
        -:  282:
    #####:  283:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
    #####:  287:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
    #####:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
    #####:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  299:  
    #####:  300:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
    #####:  309:  return 0;
        -:  310:}
        -:  311:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  312:int numHandCards(struct gameState *state) {
    #####:  313:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  314:}
        -:  315:
function handCard called 2000 returned 100% blocks executed 100%
     2000:  316:int handCard(int handPos, struct gameState *state) {
     2000:  317:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
function supplyCount called 2000 returned 100% blocks executed 100%
     2000:  321:int supplyCount(int card, struct gameState *state) {
     2000:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
function whoseTurn called 4000 returned 100% blocks executed 100%
     4000:  347:int whoseTurn(struct gameState *state) {
     4000:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
    #####:  354:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  355:  
        -:  356:  //Discard hand
    #####:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:  }
    #####:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
    #####:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  366:  }
        -:  367:  else{
    #####:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
    #####:  371:  state->outpostPlayed = 0;
    #####:  372:  state->phase = 0;
    #####:  373:  state->numActions = 1;
    #####:  374:  state->coins = 0;
    #####:  375:  state->numBuys = 1;
    #####:  376:  state->playedCardCount = 0;
    #####:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
    #####:  381:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  382:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  383:  }
        -:  384:
        -:  385:  //Update money
    #####:  386:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  387:
    #####:  388:  return 0;
        -:  389:}
        -:  390:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
    #####:  396:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  397:    {
    #####:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
    #####:  402:  j = 0;
    #####:  403:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  404:    {
    #####:  405:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  406:	{
    #####:  407:	  j++;
        -:  408:	}
        -:  409:    }
    #####:  410:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
    #####:  415:  return 0;
        -:  416:}
        -:  417:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
    #####:  421:  int score = 0;
        -:  422:  //score from hand
    #####:  423:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  424:    {
    #####:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  431:    }
        -:  432:
        -:  433:  //score from discard
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  435:    {
    #####:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  442:    }
        -:  443:
        -:  444:  //score from deck
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  446:    {
    #####:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  453:    }
        -:  454:
    #####:  455:  return score;
        -:  456:}
        -:  457:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  469:	{
    #####:  470:	  players[i] = -9999;
        -:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  475:	}
        -:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  483:	{
    #####:  484:	  j = i;
        -:  485:	}
        -:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  494:	{
    #####:  495:	  players[i]++;
        -:  496:	}
        -:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  504:	{
    #####:  505:	  j = i;
        -:  506:	}
        -:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  514:	{
    #####:  515:	  players[i] = 1;
        -:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
        -:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
function drawCard called 63162 returned 100% blocks executed 85%
    63162:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
    63162:  529:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
     5637:  534:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  535:      state->deck[player][i] = state->discard[player][i];
    #####:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
     5637:  539:    state->deckCount[player] = state->discardCount[player];
     5637:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
     5637:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
     5637:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
     5637:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
     5637:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
     5637:  560:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     5637:  561:      return -1;
        -:  562:
    #####:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  564:    state->deckCount[player]--;
    #####:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
    57525:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
    57525:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
    57525:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    57525:  577:    state->deckCount[player]--;
    57525:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
    57525:  581:  return 0;
        -:  582:}
        -:  583:
function getCost called 0 returned 0% blocks executed 0%
    #####:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
    #####:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
    #####:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
    #####:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646:
function smithyRefact called 0 returned 0% blocks executed 0%
    #####:  647:int smithyRefact(int currentPlayer, struct gameState *state, int handPos, int i)
        -:  648:{
        -:  649:	//+3 Cards
    #####:  650:      for (i = 0; i < 5; i++) // changed from 3 cards to 5
branch  0 never executed
branch  1 never executed
        -:  651:	{
    #####:  652:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  653:	}
        -:  654:			
        -:  655:      //discard card from hand
    #####:  656:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  657:      return 0;
        -:  658:}
        -:  659:
function adventurerRefact called 2000 returned 100% blocks executed 100%
     2000:  660:int adventurerRefact(int currentPlayer, struct gameState *state, int temphand[], int drawntreasure, int cardDrawn, int z)
        -:  661:{	  
    57162:  662:	while(drawntreasure<2){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    53162:  663:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
     5637:  664:			shuffle(currentPlayer, state);
call    0 returned 100%
        -:  665:		}
    53162:  666:	drawCard(currentPlayer, state);
call    0 returned 100%
    53162:  667:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    53162:  668:	if (cardDrawn == copper || cardDrawn == silver) // removed gold as part of the statement || cardDrawn == gold
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
     4000:  669:		drawntreasure++;
        -:  670:	else{
    49162:  671:		temphand[z]=cardDrawn;
    49162:  672:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    49162:  673:		z++;
        -:  674:		}
        -:  675:    }
        -:  676:    
    53162:  677:	while(z-1>=0){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    49162:  678:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    49162:  679:		z=z-1;
        -:  680:    }
     2000:  681:    return 0;
        -:  682:}
        -:  683:
function cutpurseRefact called 0 returned 0% blocks executed 0%
    #####:  684:int cutpurseRefact(int currentPlayer, struct gameState *state, int handPos, int i, int j, int k)
        -:  685:{
    #####:  686:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  687:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  688:	{
    #####:  689:	  if (i == currentPlayer)  // removed not from statement != currentPlayer
branch  0 never executed
branch  1 never executed
        -:  690:	    {
    #####:  691:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  692:		{
    #####:  693:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  694:		    {
    #####:  695:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  696:		      break;
        -:  697:		    }
    #####:  698:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  699:		    {
    #####:  700:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  701:			{
        -:  702:			  if (DEBUG)
        -:  703:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  704:			}	
    #####:  705:		      break;
        -:  706:		    }		
        -:  707:		}
        -:  708:					
        -:  709:	    }
        -:  710:				
        -:  711:	}				
        -:  712:
        -:  713:      //discard played card from hand
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  715:
    #####:  716:      return 0;
        -:  717:}
        -:  718:
function mineRefact called 0 returned 0% blocks executed 0%
    #####:  719:int mineRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  720:{
    #####:  721:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  722:
    #####:  723:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  724:	{
    #####:  725:	  return -1;
        -:  726:	}
        -:  727:		
    #####:  728:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  729:	{
    #####:  730:	  return -1;
        -:  731:	}
        -:  732:
    #####:  733:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  734:	{
    #####:  735:	  return -1;
        -:  736:	}
        -:  737:
    #####:  738:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  739:
        -:  740:      //discard card from hand
    #####:  741:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  742:
        -:  743:      //discard trashed card
    #####:  744:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  745:	{
    #####:  746:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  747:	    {
    #####:  748:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  749:	      break;
        -:  750:	    }
        -:  751:	}
        -:  752:			
    #####:  753:      return 0;
        -:  754:}
        -:  755:
function minionRefact called 0 returned 0% blocks executed 0%
    #####:  756:int minionRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  757:{
        -:  758:	//+1 action
    #####:  759:	state->numActions++;
        -:  760:			
        -:  761:	//discard card from hand
    #####:  762:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  763:	
        -:  764:
        -:  765:	//reversed choices 1 & 2
    #####:  766:	if (choice2)		//+2 coins 
branch  0 never executed
branch  1 never executed
        -:  767:	{
    #####:  768:		state->coins = state->coins + 2;
        -:  769:	}
        -:  770:			
    #####:  771:    else if (choice1)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  772:	{
        -:  773:		//discard hand
    #####:  774:		while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  775:	    {
    #####:  776:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  777:	    }
        -:  778:				
        -:  779:		//draw 4
    #####:  780:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  781:	    {
    #####:  782:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  783:	    }
        -:  784:				
        -:  785:		//other players discard hand and redraw if hand size > 4
    #####:  786:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  789:			{
    #####:  790:				if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  791:				{
        -:  792:					//discard hand
    #####:  793:					while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  794:					{
    #####:  795:						discardCard(handPos, i, state, 0);
call    0 never executed
        -:  796:					}
        -:  797:							
        -:  798:					//draw 4
    #####:  799:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  800:					{
    #####:  801:						drawCard(i, state);
call    0 never executed
        -:  802:					}
        -:  803:				}
        -:  804:			}
        -:  805:	    }
        -:  806:				
        -:  807:	}
    #####:  808:		return 0;
        -:  809:}
        -:  810:
function cardEffect called 2000 returned 100% blocks executed 4%
     2000:  811:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  812:{
        -:  813:  int i;
        -:  814:  int j;
        -:  815:  int k;
        -:  816:  int x;
        -:  817:  int index;
     2000:  818:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  819:  int nextPlayer = currentPlayer + 1;
        -:  820:
     2000:  821:  int tributeRevealedCards[2] = {-1, -1};
        -:  822:  int temphand[MAX_HAND];// moved above the if statement
     2000:  823:  int drawntreasure=0;
        -:  824:  int cardDrawn;
     2000:  825:  int z = 0;// this is the counter for the temp hand
     2000:  826:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1001:  827:    nextPlayer = 0;
        -:  828:  }
        -:  829:  
        -:  830:	
        -:  831:  //uses switch to select card and perform actions
     2000:  832:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  833:    {
        -:  834:    case adventurer:
     2000:  835:		adventurerRefact(currentPlayer, state, temphand, drawntreasure, cardDrawn, z);
call    0 returned 100%
     2000:  836:		return 0;
        -:  837:	/*
        -:  838:	  while(drawntreasure<2){
        -:  839:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  840:	  shuffle(currentPlayer, state);
        -:  841:	}
        -:  842:	drawCard(currentPlayer, state);
        -:  843:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  844:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  845:	  drawntreasure++;
        -:  846:	else{
        -:  847:	  temphand[z]=cardDrawn;
        -:  848:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  849:	  z++;
        -:  850:	}
        -:  851:      }
        -:  852:      while(z-1>=0){
        -:  853:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  854:	z=z-1;
        -:  855:      }
        -:  856:      return 0;
        -:  857:	*/
        -:  858:			
        -:  859:    case council_room:
        -:  860:      //+4 Cards
    #####:  861:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  862:	{
    #####:  863:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  864:	}
        -:  865:			
        -:  866:      //+1 Buy
    #####:  867:      state->numBuys++;
        -:  868:			
        -:  869:      //Each other player draws a card
    #####:  870:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  871:	{
    #####:  872:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  873:	    {
    #####:  874:	      drawCard(i, state);
call    0 never executed
        -:  875:	    }
        -:  876:	}
        -:  877:			
        -:  878:      //put played card in played card pile
    #####:  879:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  880:			
    #####:  881:      return 0;
        -:  882:			
        -:  883:    case feast:
        -:  884:      //gain card with cost up to 5
        -:  885:      //Backup hand
    #####:  886:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  887:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  888:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  889:      }
        -:  890:      //Backup hand
        -:  891:
        -:  892:      //Update Coins for Buy
    #####:  893:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  894:      x = 1;//Condition to loop on
    #####:  895:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  896:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  897:	  if (DEBUG)
        -:  898:	    printf("None of that card left, sorry!\n");
        -:  899:
        -:  900:	  if (DEBUG){
        -:  901:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  902:	  }
        -:  903:	}
    #####:  904:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  905:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  906:
        -:  907:	  if (DEBUG){
        -:  908:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  909:	  }
        -:  910:	}
        -:  911:	else{
        -:  912:
        -:  913:	  if (DEBUG){
        -:  914:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  915:	  }
        -:  916:
    #####:  917:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  918:	  x = 0;//No more buying cards
        -:  919:
        -:  920:	  if (DEBUG){
        -:  921:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  922:	  }
        -:  923:
        -:  924:	}
        -:  925:      }     
        -:  926:
        -:  927:      //Reset Hand
    #####:  928:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  929:	state->hand[currentPlayer][i] = temphand[i];
    #####:  930:	temphand[i] = -1;
        -:  931:      }
        -:  932:      //Reset Hand
        -:  933:      			
    #####:  934:      return 0;
        -:  935:			
        -:  936:    case gardens:
    #####:  937:      return -1;
        -:  938:			
        -:  939:    case mine:
    #####:  940:		return mineRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -:  941:		//return 0;
        -:  942:	/*
        -:  943:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  944:
        -:  945:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  946:	{
        -:  947:	  return -1;
        -:  948:	}
        -:  949:		
        -:  950:      if (choice2 > treasure_map || choice2 < curse)
        -:  951:	{
        -:  952:	  return -1;
        -:  953:	}
        -:  954:
        -:  955:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  956:	{
        -:  957:	  return -1;
        -:  958:	}
        -:  959:
        -:  960:      gainCard(choice2, state, 2, currentPlayer);
        -:  961:
        -:  962:      //discard card from hand
        -:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:
        -:  965:      //discard trashed card
        -:  966:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  967:	{
        -:  968:	  if (state->hand[currentPlayer][i] == j)
        -:  969:	    {
        -:  970:	      discardCard(i, currentPlayer, state, 0);			
        -:  971:	      break;
        -:  972:	    }
        -:  973:	}
        -:  974:			
        -:  975:      return 0;
        -:  976:	*/
        -:  977:		
        -:  978:    case remodel:
    #####:  979:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  980:
    #####:  981:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  982:	{
    #####:  983:	  return -1;
        -:  984:	}
        -:  985:
    #####:  986:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  987:
        -:  988:      //discard card from hand
    #####:  989:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  990:
        -:  991:      //discard trashed card
    #####:  992:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  993:	{
    #####:  994:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  995:	    {
    #####:  996:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  997:	      break;
        -:  998:	    }
        -:  999:	}
        -: 1000:
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case smithy:
    #####: 1005:		smithyRefact(currentPlayer, state, handPos, i);
call    0 never executed
    #####: 1006:		return 0;
        -: 1007:		
        -: 1008:    /*  //+3 Cards
        -: 1009:      for (i = 0; i < 3; i++)
        -: 1010:	{
        -: 1011:	  drawCard(currentPlayer, state);
        -: 1012:	}
        -: 1013:			
        -: 1014:      //discard card from hand
        -: 1015:      discardCard(handPos, currentPlayer, state, 0);
        -: 1016:      return 0;
        -: 1017:	 */
        -: 1018:		
        -: 1019:    case village:
        -: 1020:      //+1 Card
    #####: 1021:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1022:			
        -: 1023:      //+2 Actions
    #####: 1024:      state->numActions = state->numActions + 2;
        -: 1025:			
        -: 1026:      //discard played card from hand
    #####: 1027:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1028:      return 0;
        -: 1029:		
        -: 1030:    case baron:
    #####: 1031:      state->numBuys++;//Increase buys by 1!
    #####: 1032:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1033:	int p = 0;//Iterator for hand!
    #####: 1034:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1035:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1036:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1037:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1038:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1039:	    state->discardCount[currentPlayer]++;
    #####: 1040:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1041:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1042:	    }
    #####: 1043:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1044:	    state->handCount[currentPlayer]--;
    #####: 1045:	    card_not_discarded = 0;//Exit the loop
        -: 1046:	  }
    #####: 1047:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1048:	    if(DEBUG) {
        -: 1049:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1050:	      printf("Must gain an estate if there are any\n");
        -: 1051:	    }
    #####: 1052:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1053:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1054:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1055:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1056:		isGameOver(state);
call    0 never executed
        -: 1057:	      }
        -: 1058:	    }
    #####: 1059:	    card_not_discarded = 0;//Exit the loop
        -: 1060:	  }
        -: 1061:			    
        -: 1062:	  else{
    #####: 1063:	    p++;//Next card
        -: 1064:	  }
        -: 1065:	}
        -: 1066:      }
        -: 1067:			    
        -: 1068:      else{
    #####: 1069:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1070:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1071:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1072:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1073:	    isGameOver(state);
call    0 never executed
        -: 1074:	  }
        -: 1075:	}
        -: 1076:      }
        -: 1077:	    
        -: 1078:      
    #####: 1079:      return 0;
        -: 1080:		
        -: 1081:    case great_hall:
        -: 1082:      //+1 Card
    #####: 1083:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1084:			
        -: 1085:      //+1 Actions
    #####: 1086:      state->numActions++;
        -: 1087:			
        -: 1088:      //discard card from hand
    #####: 1089:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1090:      return 0;
        -: 1091:		
        -: 1092:    case minion:
    #####: 1093:		minionRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
    #####: 1094:		return 0;
        -: 1095:	/*
        -: 1096:      //+1 action
        -: 1097:      state->numActions++;
        -: 1098:			
        -: 1099:      //discard card from hand
        -: 1100:      discardCard(handPos, currentPlayer, state, 0);
        -: 1101:			
        -: 1102:      if (choice1)		//+2 coins
        -: 1103:	{
        -: 1104:	  state->coins = state->coins + 2;
        -: 1105:	}
        -: 1106:			
        -: 1107:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1108:	{
        -: 1109:	  //discard hand
        -: 1110:	  while(numHandCards(state) > 0)
        -: 1111:	    {
        -: 1112:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1113:	    }
        -: 1114:				
        -: 1115:	  //draw 4
        -: 1116:	  for (i = 0; i < 4; i++)
        -: 1117:	    {
        -: 1118:	      drawCard(currentPlayer, state);
        -: 1119:	    }
        -: 1120:				
        -: 1121:	  //other players discard hand and redraw if hand size > 4
        -: 1122:	  for (i = 0; i < state->numPlayers; i++)
        -: 1123:	    {
        -: 1124:	      if (i != currentPlayer)
        -: 1125:		{
        -: 1126:		  if ( state->handCount[i] > 4 )
        -: 1127:		    {
        -: 1128:		      //discard hand
        -: 1129:		      while( state->handCount[i] > 0 )
        -: 1130:			{
        -: 1131:			  discardCard(handPos, i, state, 0);
        -: 1132:			}
        -: 1133:							
        -: 1134:		      //draw 4
        -: 1135:		      for (j = 0; j < 4; j++)
        -: 1136:			{
        -: 1137:			  drawCard(i, state);
        -: 1138:			}
        -: 1139:		    }
        -: 1140:		}
        -: 1141:	    }
        -: 1142:				
        -: 1143:	}
        -: 1144:      return 0;
        -: 1145:	*/
        -: 1146:	
        -: 1147:    case steward:
    #####: 1148:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1149:	{
        -: 1150:	  //+2 cards
    #####: 1151:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1152:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1153:	}
    #####: 1154:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
        -: 1156:	  //+2 coins
    #####: 1157:	  state->coins = state->coins + 2;
        -: 1158:	}
        -: 1159:      else
        -: 1160:	{
        -: 1161:	  //trash 2 cards in hand
    #####: 1162:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1163:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1164:	}
        -: 1165:			
        -: 1166:      //discard card from hand
    #####: 1167:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1168:      return 0;
        -: 1169:		
        -: 1170:    case tribute:
    #####: 1171:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1172:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1173:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1174:	  state->deckCount[nextPlayer]--;
        -: 1175:	}
    #####: 1176:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1177:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1178:	  state->discardCount[nextPlayer]--;
        -: 1179:	}
        -: 1180:	else{
        -: 1181:	  //No Card to Reveal
        -: 1182:	  if (DEBUG){
        -: 1183:	    printf("No cards to reveal\n");
        -: 1184:	  }
        -: 1185:	}
        -: 1186:      }
        -: 1187:	    
        -: 1188:      else{
    #####: 1189:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1190:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1191:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1192:	    state->deckCount[nextPlayer]++;
    #####: 1193:	    state->discard[nextPlayer][i] = -1;
    #####: 1194:	    state->discardCount[nextPlayer]--;
        -: 1195:	  }
        -: 1196:			    
    #####: 1197:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1198:	} 
    #####: 1199:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1200:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1201:	state->deckCount[nextPlayer]--;
    #####: 1202:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1203:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1204:	state->deckCount[nextPlayer]--;
        -: 1205:      }    
        -: 1206:		       
    #####: 1207:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1208:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1209:	state->playedCardCount++;
    #####: 1210:	tributeRevealedCards[1] = -1;
        -: 1211:      }
        -: 1212:
    #####: 1213:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1215:	  state->coins += 2;
        -: 1216:	}
        -: 1217:		    
    #####: 1218:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1219:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1220:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1221:	}
        -: 1222:	else{//Action Card
    #####: 1223:	  state->numActions = state->numActions + 2;
        -: 1224:	}
        -: 1225:      }
        -: 1226:	    
    #####: 1227:      return 0;
        -: 1228:		
        -: 1229:    case ambassador:
    #####: 1230:      j = 0;		//used to check if player has enough cards to discard
        -: 1231:
    #####: 1232:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1233:	{
    #####: 1234:	  return -1;				
        -: 1235:	}
        -: 1236:
    #####: 1237:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1238:	{
    #####: 1239:	  return -1;
        -: 1240:	}
        -: 1241:
    #####: 1242:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1243:	{
    #####: 1244:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1245:	    {
    #####: 1246:	      j++;
        -: 1247:	    }
        -: 1248:	}
    #####: 1249:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1250:	{
    #####: 1251:	  return -1;				
        -: 1252:	}
        -: 1253:
        -: 1254:      if (DEBUG) 
        -: 1255:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1256:
        -: 1257:      //increase supply count for choosen card by amount being discarded
    #####: 1258:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1259:			
        -: 1260:      //each other player gains a copy of revealed card
    #####: 1261:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1262:	{
    #####: 1263:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1264:	    {
    #####: 1265:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1266:	    }
        -: 1267:	}
        -: 1268:
        -: 1269:      //discard played card from hand
    #####: 1270:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1271:
        -: 1272:      //trash copies of cards returned to supply
    #####: 1273:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1274:	{
    #####: 1275:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1276:	    {
    #####: 1277:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1278:		{
    #####: 1279:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1280:		  break;
        -: 1281:		}
        -: 1282:	    }
        -: 1283:	}			
        -: 1284:
    #####: 1285:      return 0;
        -: 1286:		
        -: 1287:    case cutpurse:
    #####: 1288:		cutpurseRefact(currentPlayer, state, handPos, i, j, k);
call    0 never executed
        -: 1289:	/*
        -: 1290:      updateCoins(currentPlayer, state, 2);
        -: 1291:      for (i = 0; i < state->numPlayers; i++)
        -: 1292:	{
        -: 1293:	  if (i != currentPlayer)
        -: 1294:	    {
        -: 1295:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1296:		{
        -: 1297:		  if (state->hand[i][j] == copper)
        -: 1298:		    {
        -: 1299:		      discardCard(j, i, state, 0);
        -: 1300:		      break;
        -: 1301:		    }
        -: 1302:		  if (j == state->handCount[i])
        -: 1303:		    {
        -: 1304:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1305:			{
        -: 1306:			  if (DEBUG)
        -: 1307:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1308:			}	
        -: 1309:		      break;
        -: 1310:		    }		
        -: 1311:		}
        -: 1312:					
        -: 1313:	    }
        -: 1314:				
        -: 1315:	}				
        -: 1316:
        -: 1317:      //discard played card from hand
        -: 1318:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1319:
        -: 1320:      return 0;
        -: 1321:	*/
        -: 1322:		
        -: 1323:    case embargo: 
        -: 1324:      //+2 Coins
    #####: 1325:      state->coins = state->coins + 2;
        -: 1326:			
        -: 1327:      //see if selected pile is in play
    #####: 1328:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1329:	{
    #####: 1330:	  return -1;
        -: 1331:	}
        -: 1332:			
        -: 1333:      //add embargo token to selected supply pile
    #####: 1334:      state->embargoTokens[choice1]++;
        -: 1335:			
        -: 1336:      //trash card
    #####: 1337:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1338:      return 0;
        -: 1339:		
        -: 1340:    case outpost:
        -: 1341:      //set outpost flag
    #####: 1342:      state->outpostPlayed++;
        -: 1343:			
        -: 1344:      //discard card
    #####: 1345:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1346:      return 0;
        -: 1347:		
        -: 1348:    case salvager:
        -: 1349:      //+1 buy
    #####: 1350:      state->numBuys++;
        -: 1351:			
    #####: 1352:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1353:	{
        -: 1354:	  //gain coins equal to trashed card
    #####: 1355:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1356:	  //trash card
    #####: 1357:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1358:	}
        -: 1359:			
        -: 1360:      //discard card
    #####: 1361:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1362:      return 0;
        -: 1363:		
        -: 1364:    case sea_hag:
    #####: 1365:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1366:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1367:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1368:	  state->discardCount[i]++;
    #####: 1369:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1370:	}
        -: 1371:      }
    #####: 1372:      return 0;
        -: 1373:		
        -: 1374:    case treasure_map:
        -: 1375:      //search hand for another treasure_map
    #####: 1376:      index = -1;
    #####: 1377:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1378:	{
    #####: 1379:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1380:	    {
    #####: 1381:	      index = i;
    #####: 1382:	      break;
        -: 1383:	    }
        -: 1384:	}
    #####: 1385:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1386:	{
        -: 1387:	  //trash both treasure cards
    #####: 1388:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1389:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1390:
        -: 1391:	  //gain 4 Gold cards
    #####: 1392:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1393:	    {
    #####: 1394:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1395:	    }
        -: 1396:				
        -: 1397:	  //return success
    #####: 1398:	  return 1;
        -: 1399:	}
        -: 1400:			
        -: 1401:      //no second treasure_map found in hand
    #####: 1402:      return -1;
        -: 1403:    }
        -: 1404:	
    #####: 1405:  return -1;
        -: 1406:}
        -: 1407:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1408:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1409:{
        -: 1410:  //if card is not trashed, added to Played pile 
    #####: 1411:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1412:    {
        -: 1413:      //add card to played pile
    #####: 1414:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1415:      state->playedCardCount++;
        -: 1416:    }
        -: 1417:  //set played card to -1
    #####: 1418:  state->hand[currentPlayer][handPos] = -1;
        -: 1419:	
        -: 1420:  //remove card from player's hand
    #####: 1421:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1422:    {
        -: 1423:      //reduce number of cards in hand
    #####: 1424:      state->handCount[currentPlayer]--;
        -: 1425:    }
    #####: 1426:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1427:    {
        -: 1428:      //reduce number of cards in hand
    #####: 1429:      state->handCount[currentPlayer]--;
        -: 1430:    }
        -: 1431:  else 	
        -: 1432:    {
        -: 1433:      //replace discarded card with last card in hand
    #####: 1434:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1435:      //set last card to -1
    #####: 1436:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1437:      //reduce number of cards in hand
    #####: 1438:      state->handCount[currentPlayer]--;
        -: 1439:    }
        -: 1440:	
    #####: 1441:  return 0;
        -: 1442:}
        -: 1443:
function gainCard called 2000 returned 100% blocks executed 70%
     2000: 1444:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1445:{
        -: 1446:  //Note: supplyPos is enum of choosen card
        -: 1447:	
        -: 1448:  //check if supply pile is empty (0) or card is not used in game (-1)
     2000: 1449:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1450:    {
    #####: 1451:      return -1;
        -: 1452:    }
        -: 1453:	
        -: 1454:  //added card for [whoseTurn] current player:
        -: 1455:  // toFlag = 0 : add to discard
        -: 1456:  // toFlag = 1 : add to deck
        -: 1457:  // toFlag = 2 : add to hand
        -: 1458:
     2000: 1459:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1460:    {
    #####: 1461:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1462:      state->deckCount[player]++;
        -: 1463:    }
     2000: 1464:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1465:    {
     2000: 1466:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     2000: 1467:      state->handCount[player]++;
        -: 1468:    }
        -: 1469:  else
        -: 1470:    {
    #####: 1471:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1472:      state->discardCount[player]++;
        -: 1473:    }
        -: 1474:	
        -: 1475:  //decrease number in supply pile
     2000: 1476:  state->supplyCount[supplyPos]--;
        -: 1477:	 
     2000: 1478:  return 0;
        -: 1479:}
        -: 1480:
function updateCoins called 4000 returned 100% blocks executed 100%
     4000: 1481:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1482:{
        -: 1483:  int i;
        -: 1484:	
        -: 1485:  //reset coin count
     4000: 1486:  state->coins = 0;
        -: 1487:  
        -: 1488:  //add coins for each Treasure card in player's hand
   494696: 1489:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1490:    {
   490696: 1491:      if (state->hand[player][i] == copper)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1492:	{
    27611: 1493:	  state->coins += 1;
        -: 1494:	}
   463085: 1495:      else if (state->hand[player][i] == silver)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1496:	{
    20994: 1497:	  state->coins += 2;
        -: 1498:	}
   442091: 1499:      else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1500:	{
    17304: 1501:	  state->coins += 3;
        -: 1502:	}	
        -: 1503:    }	
        -: 1504:
        -: 1505:  //add bonus
     4000: 1506:  state->coins += bonus;
        -: 1507:
     4000: 1508:  return 0;
        -: 1509:}
        -: 1510:
        -: 1511:
        -: 1512://end of dominion.c
        -: 1513:
File 'dominion.c'
Lines executed:28.14% of 558
Branches executed:29.16% of 415
Taken at least once:20.24% of 415
Calls executed:17.89% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 69750 returned 100% blocks executed 83%
    69750:    8:int compare(const void* a, const void* b) {
    69750:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    69750:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    18600:   12:    return -1;
    51150:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2000 returned 100% blocks executed 94%
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
call    0 returned 100%
     2000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   220000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   200000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2000:   73:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   74:    {
     1350:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      650:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
      650:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2000:   87:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   88:    {
     1350:   89:      state->supplyCount[estate] = 8;
     1350:   90:      state->supplyCount[duchy] = 8;
     1350:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      650:   95:      state->supplyCount[estate] = 12;
      650:   96:      state->supplyCount[duchy] = 12;
      650:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  102:  state->supplyCount[silver] = 40;
     2000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   330000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   310000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
     1350:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      650:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    18000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    20000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   290000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     6650:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
     4650:  140:      state->deckCount[i] = 0;
    18600:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    13950:  143:	  state->deck[i][j] = estate;
    13950:  144:	  state->deckCount[i]++;
        -:  145:	}
    37200:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    32550:  148:	  state->deck[i][j] = copper;
    32550:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     6650:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
     4650:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     6650:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     4650:  166:      state->handCount[i] = 0;
     4650:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    54000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2000:  182:  state->outpostPlayed = 0;
     2000:  183:  state->phase = 0;
     2000:  184:  state->numActions = 1;
     2000:  185:  state->numBuys = 1;
     2000:  186:  state->playedCardCount = 0;
     2000:  187:  state->whoseTurn = 0;
     2000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     2000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     2000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 15924 returned 100% blocks executed 100%
    15924:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    15924:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    15924:  209:  if (state->deckCount[player] < 1)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
    11274:  210:    return -1;
     4650:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    55800:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    46500:  216:    newDeck[newDeckPos] = state->deck[player][card];
    46500:  217:    newDeckPos++;
   162278:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
   115778:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    46500:  221:    state->deckCount[player]--;
        -:  222:  }
    51150:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  224:    state->deck[player][i] = newDeck[i];
    46500:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     4650:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 2000 returned 100% blocks executed 73%
     2000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     2000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     2000:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     2000:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     2000:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
     2000:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     2000:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
     2000:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
     2000:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
     2000:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 2000 returned 100% blocks executed 100%
     2000:  315:int handCard(int handPos, struct gameState *state) {
     2000:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2000 returned 100% blocks executed 100%
     2000:  320:int supplyCount(int card, struct gameState *state) {
     2000:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4000 returned 100% blocks executed 100%
     4000:  346:int whoseTurn(struct gameState *state) {
     4000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 63162 returned 100% blocks executed 85%
    63162:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    63162:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     5637:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     5637:  538:    state->deckCount[player] = state->discardCount[player];
     5637:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5637:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5637:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5637:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5637:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5637:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     5637:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    57525:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    57525:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    57525:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    57525:  576:    state->deckCount[player]--;
    57525:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    57525:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function smithyRefact called 0 returned 0% blocks executed 0%
    #####:  646:int smithyRefact(int currentPlayer, struct gameState *state, int handPos, int i)
        -:  647:{
        -:  648:	//+3 Cards
    #####:  649:      for (i = 0; i < 5; i++) // changed from 3 cards to 5
branch  0 never executed
branch  1 never executed
        -:  650:	{
    #####:  651:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  652:	}
        -:  653:			
        -:  654:      //discard card from hand
    #####:  655:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  656:      return 0;
        -:  657:}
        -:  658:
function adventurerRefact called 2000 returned 100% blocks executed 100%
     2000:  659:int adventurerRefact(int currentPlayer, struct gameState *state, int temphand[], int drawntreasure, int cardDrawn, int z)
        -:  660:{	  
    57162:  661:	while(drawntreasure<2){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    53162:  662:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
     5637:  663:			shuffle(currentPlayer, state);
call    0 returned 100%
        -:  664:		}
    53162:  665:	drawCard(currentPlayer, state);
call    0 returned 100%
    53162:  666:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    53162:  667:	if (cardDrawn == copper || cardDrawn == silver) // removed gold as part of the statement || cardDrawn == gold
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
     4000:  668:		drawntreasure++;
        -:  669:	else{
    49162:  670:		temphand[z]=cardDrawn;
    49162:  671:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    49162:  672:		z++;
        -:  673:		}
        -:  674:    }
        -:  675:    
    53162:  676:	while(z-1>=0){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    49162:  677:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    49162:  678:		z=z-1;
        -:  679:    }
     2000:  680:    return 0;
        -:  681:}
        -:  682:
function cutpurseRefact called 0 returned 0% blocks executed 0%
    #####:  683:int cutpurseRefact(int currentPlayer, struct gameState *state, int handPos, int i, int j, int k)
        -:  684:{
    #####:  685:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  686:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  687:	{
    #####:  688:	  if (i == currentPlayer)  // removed not from statement != currentPlayer
branch  0 never executed
branch  1 never executed
        -:  689:	    {
    #####:  690:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  691:		{
    #####:  692:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  693:		    {
    #####:  694:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  695:		      break;
        -:  696:		    }
    #####:  697:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  698:		    {
    #####:  699:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  700:			{
        -:  701:			  if (DEBUG)
        -:  702:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  703:			}	
    #####:  704:		      break;
        -:  705:		    }		
        -:  706:		}
        -:  707:					
        -:  708:	    }
        -:  709:				
        -:  710:	}				
        -:  711:
        -:  712:      //discard played card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  714:
    #####:  715:      return 0;
        -:  716:}
        -:  717:
function mineRefact called 0 returned 0% blocks executed 0%
    #####:  718:int mineRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  719:{
    #####:  720:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:		
    #####:  727:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  728:	{
    #####:  729:	  return -1;
        -:  730:	}
        -:  731:
    #####:  732:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  733:	{
    #####:  734:	  return -1;
        -:  735:	}
        -:  736:
    #####:  737:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  738:
        -:  739:      //discard card from hand
    #####:  740:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  741:
        -:  742:      //discard trashed card
    #####:  743:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  744:	{
    #####:  745:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  746:	    {
    #####:  747:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  748:	      break;
        -:  749:	    }
        -:  750:	}
        -:  751:			
    #####:  752:      return 0;
        -:  753:}
        -:  754:
function minionRefact called 0 returned 0% blocks executed 0%
    #####:  755:int minionRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  756:{
        -:  757:	//+1 action
    #####:  758:	state->numActions++;
        -:  759:			
        -:  760:	//discard card from hand
    #####:  761:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  762:	
        -:  763:
        -:  764:	//reversed choices 1 & 2
    #####:  765:	if (choice2)		//+2 coins 
branch  0 never executed
branch  1 never executed
        -:  766:	{
    #####:  767:		state->coins = state->coins + 2;
        -:  768:	}
        -:  769:			
    #####:  770:    else if (choice1)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  771:	{
        -:  772:		//discard hand
    #####:  773:		while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  774:	    {
    #####:  775:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  776:	    }
        -:  777:				
        -:  778:		//draw 4
    #####:  779:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  780:	    {
    #####:  781:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  782:	    }
        -:  783:				
        -:  784:		//other players discard hand and redraw if hand size > 4
    #####:  785:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  788:			{
    #####:  789:				if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  790:				{
        -:  791:					//discard hand
    #####:  792:					while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  793:					{
    #####:  794:						discardCard(handPos, i, state, 0);
call    0 never executed
        -:  795:					}
        -:  796:							
        -:  797:					//draw 4
    #####:  798:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  799:					{
    #####:  800:						drawCard(i, state);
call    0 never executed
        -:  801:					}
        -:  802:				}
        -:  803:			}
        -:  804:	    }
        -:  805:				
        -:  806:	}
    #####:  807:		return 0;
        -:  808:}
        -:  809:
function cardEffect called 2000 returned 100% blocks executed 4%
     2000:  810:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  811:{
        -:  812:  int i;
        -:  813:  int j;
        -:  814:  int k;
        -:  815:  int x;
        -:  816:  int index;
     2000:  817:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  818:  int nextPlayer = currentPlayer + 1;
        -:  819:
     2000:  820:  int tributeRevealedCards[2] = {-1, -1};
        -:  821:  int temphand[MAX_HAND];// moved above the if statement
     2000:  822:  int drawntreasure=0;
        -:  823:  int cardDrawn;
     2000:  824:  int z = 0;// this is the counter for the temp hand
     2000:  825:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1001:  826:    nextPlayer = 0;
        -:  827:  }
        -:  828:  
        -:  829:	
        -:  830:  //uses switch to select card and perform actions
     2000:  831:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  832:    {
        -:  833:    case adventurer:
     2000:  834:		return adventurerRefact(currentPlayer, state, temphand, drawntreasure, cardDrawn, z);
call    0 returned 100%
        -:  835:	/*
        -:  836:	  while(drawntreasure<2){
        -:  837:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  838:	  shuffle(currentPlayer, state);
        -:  839:	}
        -:  840:	drawCard(currentPlayer, state);
        -:  841:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  842:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  843:	  drawntreasure++;
        -:  844:	else{
        -:  845:	  temphand[z]=cardDrawn;
        -:  846:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  847:	  z++;
        -:  848:	}
        -:  849:      }
        -:  850:      while(z-1>=0){
        -:  851:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  852:	z=z-1;
        -:  853:      }
        -:  854:      return 0;
        -:  855:	*/
        -:  856:			
        -:  857:    case council_room:
        -:  858:      //+4 Cards
    #####:  859:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  860:	{
    #####:  861:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  862:	}
        -:  863:			
        -:  864:      //+1 Buy
    #####:  865:      state->numBuys++;
        -:  866:			
        -:  867:      //Each other player draws a card
    #####:  868:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  869:	{
    #####:  870:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  871:	    {
    #####:  872:	      drawCard(i, state);
call    0 never executed
        -:  873:	    }
        -:  874:	}
        -:  875:			
        -:  876:      //put played card in played card pile
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:			
    #####:  879:      return 0;
        -:  880:			
        -:  881:    case feast:
        -:  882:      //gain card with cost up to 5
        -:  883:      //Backup hand
    #####:  884:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  885:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  886:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  887:      }
        -:  888:      //Backup hand
        -:  889:
        -:  890:      //Update Coins for Buy
    #####:  891:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  892:      x = 1;//Condition to loop on
    #####:  893:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  894:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  895:	  if (DEBUG)
        -:  896:	    printf("None of that card left, sorry!\n");
        -:  897:
        -:  898:	  if (DEBUG){
        -:  899:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  900:	  }
        -:  901:	}
    #####:  902:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  903:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  904:
        -:  905:	  if (DEBUG){
        -:  906:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  907:	  }
        -:  908:	}
        -:  909:	else{
        -:  910:
        -:  911:	  if (DEBUG){
        -:  912:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  913:	  }
        -:  914:
    #####:  915:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  916:	  x = 0;//No more buying cards
        -:  917:
        -:  918:	  if (DEBUG){
        -:  919:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  920:	  }
        -:  921:
        -:  922:	}
        -:  923:      }     
        -:  924:
        -:  925:      //Reset Hand
    #####:  926:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  927:	state->hand[currentPlayer][i] = temphand[i];
    #####:  928:	temphand[i] = -1;
        -:  929:      }
        -:  930:      //Reset Hand
        -:  931:      			
    #####:  932:      return 0;
        -:  933:			
        -:  934:    case gardens:
    #####:  935:      return -1;
        -:  936:			
        -:  937:    case mine:
    #####:  938:		return mineRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -:  939:		//return 0;
        -:  940:	/*
        -:  941:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  942:
        -:  943:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  944:	{
        -:  945:	  return -1;
        -:  946:	}
        -:  947:		
        -:  948:      if (choice2 > treasure_map || choice2 < curse)
        -:  949:	{
        -:  950:	  return -1;
        -:  951:	}
        -:  952:
        -:  953:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  954:	{
        -:  955:	  return -1;
        -:  956:	}
        -:  957:
        -:  958:      gainCard(choice2, state, 2, currentPlayer);
        -:  959:
        -:  960:      //discard card from hand
        -:  961:      discardCard(handPos, currentPlayer, state, 0);
        -:  962:
        -:  963:      //discard trashed card
        -:  964:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  965:	{
        -:  966:	  if (state->hand[currentPlayer][i] == j)
        -:  967:	    {
        -:  968:	      discardCard(i, currentPlayer, state, 0);			
        -:  969:	      break;
        -:  970:	    }
        -:  971:	}
        -:  972:			
        -:  973:      return 0;
        -:  974:	*/
        -:  975:		
        -:  976:    case remodel:
    #####:  977:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  978:
    #####:  979:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  980:	{
    #####:  981:	  return -1;
        -:  982:	}
        -:  983:
    #####:  984:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  985:
        -:  986:      //discard card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  988:
        -:  989:      //discard trashed card
    #####:  990:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  993:	    {
    #####:  994:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  995:	      break;
        -:  996:	    }
        -:  997:	}
        -:  998:
        -:  999:
    #####: 1000:      return 0;
        -: 1001:		
        -: 1002:    case smithy:
    #####: 1003:		return smithyRefact(currentPlayer, state, handPos, i);
call    0 never executed
        -: 1004:		
        -: 1005:    /*  //+3 Cards
        -: 1006:      for (i = 0; i < 3; i++)
        -: 1007:	{
        -: 1008:	  drawCard(currentPlayer, state);
        -: 1009:	}
        -: 1010:			
        -: 1011:      //discard card from hand
        -: 1012:      discardCard(handPos, currentPlayer, state, 0);
        -: 1013:      return 0;
        -: 1014:	 */
        -: 1015:		
        -: 1016:    case village:
        -: 1017:      //+1 Card
    #####: 1018:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1019:			
        -: 1020:      //+2 Actions
    #####: 1021:      state->numActions = state->numActions + 2;
        -: 1022:			
        -: 1023:      //discard played card from hand
    #####: 1024:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1025:      return 0;
        -: 1026:		
        -: 1027:    case baron:
    #####: 1028:      state->numBuys++;//Increase buys by 1!
    #####: 1029:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1030:	int p = 0;//Iterator for hand!
    #####: 1031:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1032:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1033:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1034:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1035:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1036:	    state->discardCount[currentPlayer]++;
    #####: 1037:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1038:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1039:	    }
    #####: 1040:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1041:	    state->handCount[currentPlayer]--;
    #####: 1042:	    card_not_discarded = 0;//Exit the loop
        -: 1043:	  }
    #####: 1044:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1045:	    if(DEBUG) {
        -: 1046:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1047:	      printf("Must gain an estate if there are any\n");
        -: 1048:	    }
    #####: 1049:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1050:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1051:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1052:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1053:		isGameOver(state);
call    0 never executed
        -: 1054:	      }
        -: 1055:	    }
    #####: 1056:	    card_not_discarded = 0;//Exit the loop
        -: 1057:	  }
        -: 1058:			    
        -: 1059:	  else{
    #####: 1060:	    p++;//Next card
        -: 1061:	  }
        -: 1062:	}
        -: 1063:      }
        -: 1064:			    
        -: 1065:      else{
    #####: 1066:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1067:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1068:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1069:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1070:	    isGameOver(state);
call    0 never executed
        -: 1071:	  }
        -: 1072:	}
        -: 1073:      }
        -: 1074:	    
        -: 1075:      
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case great_hall:
        -: 1079:      //+1 Card
    #####: 1080:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1081:			
        -: 1082:      //+1 Actions
    #####: 1083:      state->numActions++;
        -: 1084:			
        -: 1085:      //discard card from hand
    #####: 1086:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case minion:
    #####: 1090:		return minionRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -: 1091:	/*
        -: 1092:      //+1 action
        -: 1093:      state->numActions++;
        -: 1094:			
        -: 1095:      //discard card from hand
        -: 1096:      discardCard(handPos, currentPlayer, state, 0);
        -: 1097:			
        -: 1098:      if (choice1)		//+2 coins
        -: 1099:	{
        -: 1100:	  state->coins = state->coins + 2;
        -: 1101:	}
        -: 1102:			
        -: 1103:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1104:	{
        -: 1105:	  //discard hand
        -: 1106:	  while(numHandCards(state) > 0)
        -: 1107:	    {
        -: 1108:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1109:	    }
        -: 1110:				
        -: 1111:	  //draw 4
        -: 1112:	  for (i = 0; i < 4; i++)
        -: 1113:	    {
        -: 1114:	      drawCard(currentPlayer, state);
        -: 1115:	    }
        -: 1116:				
        -: 1117:	  //other players discard hand and redraw if hand size > 4
        -: 1118:	  for (i = 0; i < state->numPlayers; i++)
        -: 1119:	    {
        -: 1120:	      if (i != currentPlayer)
        -: 1121:		{
        -: 1122:		  if ( state->handCount[i] > 4 )
        -: 1123:		    {
        -: 1124:		      //discard hand
        -: 1125:		      while( state->handCount[i] > 0 )
        -: 1126:			{
        -: 1127:			  discardCard(handPos, i, state, 0);
        -: 1128:			}
        -: 1129:							
        -: 1130:		      //draw 4
        -: 1131:		      for (j = 0; j < 4; j++)
        -: 1132:			{
        -: 1133:			  drawCard(i, state);
        -: 1134:			}
        -: 1135:		    }
        -: 1136:		}
        -: 1137:	    }
        -: 1138:				
        -: 1139:	}
        -: 1140:      return 0;
        -: 1141:	*/
        -: 1142:	
        -: 1143:    case steward:
    #####: 1144:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1145:	{
        -: 1146:	  //+2 cards
    #####: 1147:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1148:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1149:	}
    #####: 1150:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1151:	{
        -: 1152:	  //+2 coins
    #####: 1153:	  state->coins = state->coins + 2;
        -: 1154:	}
        -: 1155:      else
        -: 1156:	{
        -: 1157:	  //trash 2 cards in hand
    #####: 1158:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1159:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1160:	}
        -: 1161:			
        -: 1162:      //discard card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case tribute:
    #####: 1167:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1168:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1169:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1170:	  state->deckCount[nextPlayer]--;
        -: 1171:	}
    #####: 1172:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1173:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1174:	  state->discardCount[nextPlayer]--;
        -: 1175:	}
        -: 1176:	else{
        -: 1177:	  //No Card to Reveal
        -: 1178:	  if (DEBUG){
        -: 1179:	    printf("No cards to reveal\n");
        -: 1180:	  }
        -: 1181:	}
        -: 1182:      }
        -: 1183:	    
        -: 1184:      else{
    #####: 1185:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1186:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1187:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1188:	    state->deckCount[nextPlayer]++;
    #####: 1189:	    state->discard[nextPlayer][i] = -1;
    #####: 1190:	    state->discardCount[nextPlayer]--;
        -: 1191:	  }
        -: 1192:			    
    #####: 1193:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1194:	} 
    #####: 1195:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1196:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1197:	state->deckCount[nextPlayer]--;
    #####: 1198:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1199:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1200:	state->deckCount[nextPlayer]--;
        -: 1201:      }    
        -: 1202:		       
    #####: 1203:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1204:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1205:	state->playedCardCount++;
    #####: 1206:	tributeRevealedCards[1] = -1;
        -: 1207:      }
        -: 1208:
    #####: 1209:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1210:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1211:	  state->coins += 2;
        -: 1212:	}
        -: 1213:		    
    #####: 1214:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1215:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1216:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1217:	}
        -: 1218:	else{//Action Card
    #####: 1219:	  state->numActions = state->numActions + 2;
        -: 1220:	}
        -: 1221:      }
        -: 1222:	    
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case ambassador:
    #####: 1226:      j = 0;		//used to check if player has enough cards to discard
        -: 1227:
    #####: 1228:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1229:	{
    #####: 1230:	  return -1;				
        -: 1231:	}
        -: 1232:
    #####: 1233:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
    #####: 1235:	  return -1;
        -: 1236:	}
        -: 1237:
    #####: 1238:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1239:	{
    #####: 1240:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1241:	    {
    #####: 1242:	      j++;
        -: 1243:	    }
        -: 1244:	}
    #####: 1245:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1246:	{
    #####: 1247:	  return -1;				
        -: 1248:	}
        -: 1249:
        -: 1250:      if (DEBUG) 
        -: 1251:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1252:
        -: 1253:      //increase supply count for choosen card by amount being discarded
    #####: 1254:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1255:			
        -: 1256:      //each other player gains a copy of revealed card
    #####: 1257:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1258:	{
    #####: 1259:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1260:	    {
    #####: 1261:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1262:	    }
        -: 1263:	}
        -: 1264:
        -: 1265:      //discard played card from hand
    #####: 1266:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1267:
        -: 1268:      //trash copies of cards returned to supply
    #####: 1269:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1270:	{
    #####: 1271:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1272:	    {
    #####: 1273:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1274:		{
    #####: 1275:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1276:		  break;
        -: 1277:		}
        -: 1278:	    }
        -: 1279:	}			
        -: 1280:
    #####: 1281:      return 0;
        -: 1282:		
        -: 1283:    case cutpurse:
    #####: 1284:		cutpurseRefact(currentPlayer, state, handPos, i, j, k);
call    0 never executed
        -: 1285:	/*
        -: 1286:      updateCoins(currentPlayer, state, 2);
        -: 1287:      for (i = 0; i < state->numPlayers; i++)
        -: 1288:	{
        -: 1289:	  if (i != currentPlayer)
        -: 1290:	    {
        -: 1291:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1292:		{
        -: 1293:		  if (state->hand[i][j] == copper)
        -: 1294:		    {
        -: 1295:		      discardCard(j, i, state, 0);
        -: 1296:		      break;
        -: 1297:		    }
        -: 1298:		  if (j == state->handCount[i])
        -: 1299:		    {
        -: 1300:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1301:			{
        -: 1302:			  if (DEBUG)
        -: 1303:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1304:			}	
        -: 1305:		      break;
        -: 1306:		    }		
        -: 1307:		}
        -: 1308:					
        -: 1309:	    }
        -: 1310:				
        -: 1311:	}				
        -: 1312:
        -: 1313:      //discard played card from hand
        -: 1314:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1315:
        -: 1316:      return 0;
        -: 1317:	*/
        -: 1318:		
        -: 1319:    case embargo: 
        -: 1320:      //+2 Coins
    #####: 1321:      state->coins = state->coins + 2;
        -: 1322:			
        -: 1323:      //see if selected pile is in play
    #####: 1324:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1325:	{
    #####: 1326:	  return -1;
        -: 1327:	}
        -: 1328:			
        -: 1329:      //add embargo token to selected supply pile
    #####: 1330:      state->embargoTokens[choice1]++;
        -: 1331:			
        -: 1332:      //trash card
    #####: 1333:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1334:      return 0;
        -: 1335:		
        -: 1336:    case outpost:
        -: 1337:      //set outpost flag
    #####: 1338:      state->outpostPlayed++;
        -: 1339:			
        -: 1340:      //discard card
    #####: 1341:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1342:      return 0;
        -: 1343:		
        -: 1344:    case salvager:
        -: 1345:      //+1 buy
    #####: 1346:      state->numBuys++;
        -: 1347:			
    #####: 1348:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1349:	{
        -: 1350:	  //gain coins equal to trashed card
    #####: 1351:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1352:	  //trash card
    #####: 1353:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1354:	}
        -: 1355:			
        -: 1356:      //discard card
    #####: 1357:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1358:      return 0;
        -: 1359:		
        -: 1360:    case sea_hag:
    #####: 1361:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1362:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1363:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1364:	  state->discardCount[i]++;
    #####: 1365:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1366:	}
        -: 1367:      }
    #####: 1368:      return 0;
        -: 1369:		
        -: 1370:    case treasure_map:
        -: 1371:      //search hand for another treasure_map
    #####: 1372:      index = -1;
    #####: 1373:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1374:	{
    #####: 1375:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1376:	    {
    #####: 1377:	      index = i;
    #####: 1378:	      break;
        -: 1379:	    }
        -: 1380:	}
    #####: 1381:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1382:	{
        -: 1383:	  //trash both treasure cards
    #####: 1384:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1385:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1386:
        -: 1387:	  //gain 4 Gold cards
    #####: 1388:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1389:	    {
    #####: 1390:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1391:	    }
        -: 1392:				
        -: 1393:	  //return success
    #####: 1394:	  return 1;
        -: 1395:	}
        -: 1396:			
        -: 1397:      //no second treasure_map found in hand
    #####: 1398:      return -1;
        -: 1399:    }
        -: 1400:	
    #####: 1401:  return -1;
        -: 1402:}
        -: 1403:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1404:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1405:{
        -: 1406:  //if card is not trashed, added to Played pile 
    #####: 1407:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1408:    {
        -: 1409:      //add card to played pile
    #####: 1410:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1411:      state->playedCardCount++;
        -: 1412:    }
        -: 1413:  //set played card to -1
    #####: 1414:  state->hand[currentPlayer][handPos] = -1;
        -: 1415:	
        -: 1416:  //remove card from player's hand
    #####: 1417:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1418:    {
        -: 1419:      //reduce number of cards in hand
    #####: 1420:      state->handCount[currentPlayer]--;
        -: 1421:    }
    #####: 1422:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1423:    {
        -: 1424:      //reduce number of cards in hand
    #####: 1425:      state->handCount[currentPlayer]--;
        -: 1426:    }
        -: 1427:  else 	
        -: 1428:    {
        -: 1429:      //replace discarded card with last card in hand
    #####: 1430:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1431:      //set last card to -1
    #####: 1432:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1433:      //reduce number of cards in hand
    #####: 1434:      state->handCount[currentPlayer]--;
        -: 1435:    }
        -: 1436:	
    #####: 1437:  return 0;
        -: 1438:}
        -: 1439:
function gainCard called 2000 returned 100% blocks executed 70%
     2000: 1440:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1441:{
        -: 1442:  //Note: supplyPos is enum of choosen card
        -: 1443:	
        -: 1444:  //check if supply pile is empty (0) or card is not used in game (-1)
     2000: 1445:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1446:    {
    #####: 1447:      return -1;
        -: 1448:    }
        -: 1449:	
        -: 1450:  //added card for [whoseTurn] current player:
        -: 1451:  // toFlag = 0 : add to discard
        -: 1452:  // toFlag = 1 : add to deck
        -: 1453:  // toFlag = 2 : add to hand
        -: 1454:
     2000: 1455:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1456:    {
    #####: 1457:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1458:      state->deckCount[player]++;
        -: 1459:    }
     2000: 1460:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1461:    {
     2000: 1462:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     2000: 1463:      state->handCount[player]++;
        -: 1464:    }
        -: 1465:  else
        -: 1466:    {
    #####: 1467:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1468:      state->discardCount[player]++;
        -: 1469:    }
        -: 1470:	
        -: 1471:  //decrease number in supply pile
     2000: 1472:  state->supplyCount[supplyPos]--;
        -: 1473:	 
     2000: 1474:  return 0;
        -: 1475:}
        -: 1476:
function updateCoins called 4000 returned 100% blocks executed 100%
     4000: 1477:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1478:{
        -: 1479:  int i;
        -: 1480:	
        -: 1481:  //reset coin count
     4000: 1482:  state->coins = 0;
        -: 1483:  
        -: 1484:  //add coins for each Treasure card in player's hand
   494696: 1485:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1486:    {
   490696: 1487:      if (state->hand[player][i] == copper)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1488:	{
    27611: 1489:	  state->coins += 1;
        -: 1490:	}
   463085: 1491:      else if (state->hand[player][i] == silver)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1492:	{
    20994: 1493:	  state->coins += 2;
        -: 1494:	}
   442091: 1495:      else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1496:	{
    17304: 1497:	  state->coins += 3;
        -: 1498:	}	
        -: 1499:    }	
        -: 1500:
        -: 1501:  //add bonus
     4000: 1502:  state->coins += bonus;
        -: 1503:
     4000: 1504:  return 0;
        -: 1505:}
        -: 1506:
        -: 1507:
        -: 1508://end of dominion.c
        -: 1509:
File 'dominion.c'
Lines executed:28.14% of 558
Branches executed:29.16% of 415
Taken at least once:20.24% of 415
Calls executed:17.89% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 69750 returned 100% blocks executed 83%
    69750:    8:int compare(const void* a, const void* b) {
    69750:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    69750:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    18600:   12:    return -1;
    51150:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2000 returned 100% blocks executed 94%
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
call    0 returned 100%
     2000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   220000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   200000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2000:   73:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   74:    {
     1350:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      650:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
      650:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2000:   87:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   88:    {
     1350:   89:      state->supplyCount[estate] = 8;
     1350:   90:      state->supplyCount[duchy] = 8;
     1350:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      650:   95:      state->supplyCount[estate] = 12;
      650:   96:      state->supplyCount[duchy] = 12;
      650:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  102:  state->supplyCount[silver] = 40;
     2000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   330000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   310000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
     1350:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      650:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    18000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    20000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   290000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     6650:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
     4650:  140:      state->deckCount[i] = 0;
    18600:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    13950:  143:	  state->deck[i][j] = estate;
    13950:  144:	  state->deckCount[i]++;
        -:  145:	}
    37200:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    32550:  148:	  state->deck[i][j] = copper;
    32550:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     6650:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
     4650:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     6650:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     4650:  166:      state->handCount[i] = 0;
     4650:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    54000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2000:  182:  state->outpostPlayed = 0;
     2000:  183:  state->phase = 0;
     2000:  184:  state->numActions = 1;
     2000:  185:  state->numBuys = 1;
     2000:  186:  state->playedCardCount = 0;
     2000:  187:  state->whoseTurn = 0;
     2000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     2000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     2000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 15924 returned 100% blocks executed 100%
    15924:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    15924:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    15924:  209:  if (state->deckCount[player] < 1)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
    11274:  210:    return -1;
     4650:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    55800:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    46500:  216:    newDeck[newDeckPos] = state->deck[player][card];
    46500:  217:    newDeckPos++;
   162278:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
   115778:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    46500:  221:    state->deckCount[player]--;
        -:  222:  }
    51150:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  224:    state->deck[player][i] = newDeck[i];
    46500:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     4650:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 2000 returned 100% blocks executed 73%
     2000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     2000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     2000:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     2000:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     2000:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
     2000:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     2000:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
     2000:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
     2000:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
     2000:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 2000 returned 100% blocks executed 100%
     2000:  315:int handCard(int handPos, struct gameState *state) {
     2000:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2000 returned 100% blocks executed 100%
     2000:  320:int supplyCount(int card, struct gameState *state) {
     2000:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4000 returned 100% blocks executed 100%
     4000:  346:int whoseTurn(struct gameState *state) {
     4000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 63162 returned 100% blocks executed 85%
    63162:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    63162:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     5637:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     5637:  538:    state->deckCount[player] = state->discardCount[player];
     5637:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5637:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5637:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5637:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5637:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5637:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     5637:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    57525:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    57525:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    57525:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    57525:  576:    state->deckCount[player]--;
    57525:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    57525:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function smithyRefact called 0 returned 0% blocks executed 0%
    #####:  646:int smithyRefact(int currentPlayer, struct gameState *state, int handPos, int i)
        -:  647:{
        -:  648:	//+3 Cards
    #####:  649:      for (i = 0; i < 5; i++) // changed from 3 cards to 5
branch  0 never executed
branch  1 never executed
        -:  650:	{
    #####:  651:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  652:	}
        -:  653:			
        -:  654:      //discard card from hand
    #####:  655:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  656:      return 0;
        -:  657:}
        -:  658:
function adventurerRefact called 2000 returned 100% blocks executed 100%
     2000:  659:int adventurerRefact(int currentPlayer, struct gameState *state, int temphand[], int drawntreasure, int cardDrawn, int z)
        -:  660:{	  
    57162:  661:	while(drawntreasure<2){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    53162:  662:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
     5637:  663:			shuffle(currentPlayer, state);
call    0 returned 100%
        -:  664:		}
    53162:  665:	drawCard(currentPlayer, state);
call    0 returned 100%
    53162:  666:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    53162:  667:	if (cardDrawn == copper || cardDrawn == silver) // removed gold as part of the statement || cardDrawn == gold
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
     4000:  668:		drawntreasure++;
        -:  669:	else{
    49162:  670:		temphand[z]=cardDrawn;
    49162:  671:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    49162:  672:		z++;
        -:  673:		}
        -:  674:    }
        -:  675:    
    53162:  676:	while(z-1>=0){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    49162:  677:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    49162:  678:		z=z-1;
        -:  679:    }
     2000:  680:    return 0;
        -:  681:}
        -:  682:
function cutpurseRefact called 0 returned 0% blocks executed 0%
    #####:  683:int cutpurseRefact(int currentPlayer, struct gameState *state, int handPos, int i, int j, int k)
        -:  684:{
    #####:  685:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  686:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  687:	{
    #####:  688:	  if (i == currentPlayer)  // removed not from statement != currentPlayer
branch  0 never executed
branch  1 never executed
        -:  689:	    {
    #####:  690:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  691:		{
    #####:  692:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  693:		    {
    #####:  694:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  695:		      break;
        -:  696:		    }
    #####:  697:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  698:		    {
    #####:  699:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  700:			{
        -:  701:			  if (DEBUG)
        -:  702:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  703:			}	
    #####:  704:		      break;
        -:  705:		    }		
        -:  706:		}
        -:  707:					
        -:  708:	    }
        -:  709:				
        -:  710:	}				
        -:  711:
        -:  712:      //discard played card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  714:
    #####:  715:      return 0;
        -:  716:}
        -:  717:
function mineRefact called 0 returned 0% blocks executed 0%
    #####:  718:int mineRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  719:{
    #####:  720:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:		
    #####:  727:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  728:	{
    #####:  729:	  return -1;
        -:  730:	}
        -:  731:
    #####:  732:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  733:	{
    #####:  734:	  return -1;
        -:  735:	}
        -:  736:
    #####:  737:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  738:
        -:  739:      //discard card from hand
    #####:  740:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  741:
        -:  742:      //discard trashed card
    #####:  743:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  744:	{
    #####:  745:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  746:	    {
    #####:  747:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  748:	      break;
        -:  749:	    }
        -:  750:	}
        -:  751:			
    #####:  752:      return 0;
        -:  753:}
        -:  754:
function minionRefact called 0 returned 0% blocks executed 0%
    #####:  755:int minionRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  756:{
        -:  757:	//+1 action
    #####:  758:	state->numActions++;
        -:  759:			
        -:  760:	//discard card from hand
    #####:  761:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  762:	
        -:  763:
        -:  764:	//reversed choices 1 & 2
    #####:  765:	if (choice2)		//+2 coins 
branch  0 never executed
branch  1 never executed
        -:  766:	{
    #####:  767:		state->coins = state->coins + 2;
        -:  768:	}
        -:  769:			
    #####:  770:    else if (choice1)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  771:	{
        -:  772:		//discard hand
    #####:  773:		while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  774:	    {
    #####:  775:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  776:	    }
        -:  777:				
        -:  778:		//draw 4
    #####:  779:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  780:	    {
    #####:  781:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  782:	    }
        -:  783:				
        -:  784:		//other players discard hand and redraw if hand size > 4
    #####:  785:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  788:			{
    #####:  789:				if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  790:				{
        -:  791:					//discard hand
    #####:  792:					while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  793:					{
    #####:  794:						discardCard(handPos, i, state, 0);
call    0 never executed
        -:  795:					}
        -:  796:							
        -:  797:					//draw 4
    #####:  798:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  799:					{
    #####:  800:						drawCard(i, state);
call    0 never executed
        -:  801:					}
        -:  802:				}
        -:  803:			}
        -:  804:	    }
        -:  805:				
        -:  806:	}
    #####:  807:		return 0;
        -:  808:}
        -:  809:
function cardEffect called 2000 returned 100% blocks executed 4%
     2000:  810:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  811:{
        -:  812:  int i;
        -:  813:  int j;
        -:  814:  int k;
        -:  815:  int x;
        -:  816:  int index;
     2000:  817:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  818:  int nextPlayer = currentPlayer + 1;
        -:  819:
     2000:  820:  int tributeRevealedCards[2] = {-1, -1};
        -:  821:  int temphand[MAX_HAND];// moved above the if statement
     2000:  822:  int drawntreasure=0;
        -:  823:  int cardDrawn;
     2000:  824:  int z = 0;// this is the counter for the temp hand
     2000:  825:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1001:  826:    nextPlayer = 0;
        -:  827:  }
        -:  828:  
        -:  829:	
        -:  830:  //uses switch to select card and perform actions
     2000:  831:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  832:    {
        -:  833:    case adventurer:
     2000:  834:		return adventurerRefact(currentPlayer, state, temphand, drawntreasure, cardDrawn, z);
call    0 returned 100%
        -:  835:	/*
        -:  836:	  while(drawntreasure<2){
        -:  837:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  838:	  shuffle(currentPlayer, state);
        -:  839:	}
        -:  840:	drawCard(currentPlayer, state);
        -:  841:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  842:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  843:	  drawntreasure++;
        -:  844:	else{
        -:  845:	  temphand[z]=cardDrawn;
        -:  846:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  847:	  z++;
        -:  848:	}
        -:  849:      }
        -:  850:      while(z-1>=0){
        -:  851:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  852:	z=z-1;
        -:  853:      }
        -:  854:      return 0;
        -:  855:	*/
        -:  856:			
        -:  857:    case council_room:
        -:  858:      //+4 Cards
    #####:  859:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  860:	{
    #####:  861:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  862:	}
        -:  863:			
        -:  864:      //+1 Buy
    #####:  865:      state->numBuys++;
        -:  866:			
        -:  867:      //Each other player draws a card
    #####:  868:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  869:	{
    #####:  870:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  871:	    {
    #####:  872:	      drawCard(i, state);
call    0 never executed
        -:  873:	    }
        -:  874:	}
        -:  875:			
        -:  876:      //put played card in played card pile
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:			
    #####:  879:      return 0;
        -:  880:			
        -:  881:    case feast:
        -:  882:      //gain card with cost up to 5
        -:  883:      //Backup hand
    #####:  884:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  885:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  886:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  887:      }
        -:  888:      //Backup hand
        -:  889:
        -:  890:      //Update Coins for Buy
    #####:  891:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  892:      x = 1;//Condition to loop on
    #####:  893:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  894:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  895:	  if (DEBUG)
        -:  896:	    printf("None of that card left, sorry!\n");
        -:  897:
        -:  898:	  if (DEBUG){
        -:  899:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  900:	  }
        -:  901:	}
    #####:  902:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  903:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  904:
        -:  905:	  if (DEBUG){
        -:  906:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  907:	  }
        -:  908:	}
        -:  909:	else{
        -:  910:
        -:  911:	  if (DEBUG){
        -:  912:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  913:	  }
        -:  914:
    #####:  915:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  916:	  x = 0;//No more buying cards
        -:  917:
        -:  918:	  if (DEBUG){
        -:  919:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  920:	  }
        -:  921:
        -:  922:	}
        -:  923:      }     
        -:  924:
        -:  925:      //Reset Hand
    #####:  926:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  927:	state->hand[currentPlayer][i] = temphand[i];
    #####:  928:	temphand[i] = -1;
        -:  929:      }
        -:  930:      //Reset Hand
        -:  931:      			
    #####:  932:      return 0;
        -:  933:			
        -:  934:    case gardens:
    #####:  935:      return -1;
        -:  936:			
        -:  937:    case mine:
    #####:  938:		return mineRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -:  939:		//return 0;
        -:  940:	/*
        -:  941:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  942:
        -:  943:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  944:	{
        -:  945:	  return -1;
        -:  946:	}
        -:  947:		
        -:  948:      if (choice2 > treasure_map || choice2 < curse)
        -:  949:	{
        -:  950:	  return -1;
        -:  951:	}
        -:  952:
        -:  953:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  954:	{
        -:  955:	  return -1;
        -:  956:	}
        -:  957:
        -:  958:      gainCard(choice2, state, 2, currentPlayer);
        -:  959:
        -:  960:      //discard card from hand
        -:  961:      discardCard(handPos, currentPlayer, state, 0);
        -:  962:
        -:  963:      //discard trashed card
        -:  964:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  965:	{
        -:  966:	  if (state->hand[currentPlayer][i] == j)
        -:  967:	    {
        -:  968:	      discardCard(i, currentPlayer, state, 0);			
        -:  969:	      break;
        -:  970:	    }
        -:  971:	}
        -:  972:			
        -:  973:      return 0;
        -:  974:	*/
        -:  975:		
        -:  976:    case remodel:
    #####:  977:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  978:
    #####:  979:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  980:	{
    #####:  981:	  return -1;
        -:  982:	}
        -:  983:
    #####:  984:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  985:
        -:  986:      //discard card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  988:
        -:  989:      //discard trashed card
    #####:  990:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  993:	    {
    #####:  994:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  995:	      break;
        -:  996:	    }
        -:  997:	}
        -:  998:
        -:  999:
    #####: 1000:      return 0;
        -: 1001:		
        -: 1002:    case smithy:
    #####: 1003:		return smithyRefact(currentPlayer, state, handPos, i);
call    0 never executed
        -: 1004:		
        -: 1005:    /*  //+3 Cards
        -: 1006:      for (i = 0; i < 3; i++)
        -: 1007:	{
        -: 1008:	  drawCard(currentPlayer, state);
        -: 1009:	}
        -: 1010:			
        -: 1011:      //discard card from hand
        -: 1012:      discardCard(handPos, currentPlayer, state, 0);
        -: 1013:      return 0;
        -: 1014:	 */
        -: 1015:		
        -: 1016:    case village:
        -: 1017:      //+1 Card
    #####: 1018:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1019:			
        -: 1020:      //+2 Actions
    #####: 1021:      state->numActions = state->numActions + 2;
        -: 1022:			
        -: 1023:      //discard played card from hand
    #####: 1024:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1025:      return 0;
        -: 1026:		
        -: 1027:    case baron:
    #####: 1028:      state->numBuys++;//Increase buys by 1!
    #####: 1029:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1030:	int p = 0;//Iterator for hand!
    #####: 1031:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1032:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1033:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1034:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1035:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1036:	    state->discardCount[currentPlayer]++;
    #####: 1037:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1038:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1039:	    }
    #####: 1040:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1041:	    state->handCount[currentPlayer]--;
    #####: 1042:	    card_not_discarded = 0;//Exit the loop
        -: 1043:	  }
    #####: 1044:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1045:	    if(DEBUG) {
        -: 1046:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1047:	      printf("Must gain an estate if there are any\n");
        -: 1048:	    }
    #####: 1049:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1050:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1051:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1052:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1053:		isGameOver(state);
call    0 never executed
        -: 1054:	      }
        -: 1055:	    }
    #####: 1056:	    card_not_discarded = 0;//Exit the loop
        -: 1057:	  }
        -: 1058:			    
        -: 1059:	  else{
    #####: 1060:	    p++;//Next card
        -: 1061:	  }
        -: 1062:	}
        -: 1063:      }
        -: 1064:			    
        -: 1065:      else{
    #####: 1066:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1067:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1068:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1069:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1070:	    isGameOver(state);
call    0 never executed
        -: 1071:	  }
        -: 1072:	}
        -: 1073:      }
        -: 1074:	    
        -: 1075:      
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case great_hall:
        -: 1079:      //+1 Card
    #####: 1080:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1081:			
        -: 1082:      //+1 Actions
    #####: 1083:      state->numActions++;
        -: 1084:			
        -: 1085:      //discard card from hand
    #####: 1086:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case minion:
    #####: 1090:		return minionRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -: 1091:	/*
        -: 1092:      //+1 action
        -: 1093:      state->numActions++;
        -: 1094:			
        -: 1095:      //discard card from hand
        -: 1096:      discardCard(handPos, currentPlayer, state, 0);
        -: 1097:			
        -: 1098:      if (choice1)		//+2 coins
        -: 1099:	{
        -: 1100:	  state->coins = state->coins + 2;
        -: 1101:	}
        -: 1102:			
        -: 1103:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1104:	{
        -: 1105:	  //discard hand
        -: 1106:	  while(numHandCards(state) > 0)
        -: 1107:	    {
        -: 1108:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1109:	    }
        -: 1110:				
        -: 1111:	  //draw 4
        -: 1112:	  for (i = 0; i < 4; i++)
        -: 1113:	    {
        -: 1114:	      drawCard(currentPlayer, state);
        -: 1115:	    }
        -: 1116:				
        -: 1117:	  //other players discard hand and redraw if hand size > 4
        -: 1118:	  for (i = 0; i < state->numPlayers; i++)
        -: 1119:	    {
        -: 1120:	      if (i != currentPlayer)
        -: 1121:		{
        -: 1122:		  if ( state->handCount[i] > 4 )
        -: 1123:		    {
        -: 1124:		      //discard hand
        -: 1125:		      while( state->handCount[i] > 0 )
        -: 1126:			{
        -: 1127:			  discardCard(handPos, i, state, 0);
        -: 1128:			}
        -: 1129:							
        -: 1130:		      //draw 4
        -: 1131:		      for (j = 0; j < 4; j++)
        -: 1132:			{
        -: 1133:			  drawCard(i, state);
        -: 1134:			}
        -: 1135:		    }
        -: 1136:		}
        -: 1137:	    }
        -: 1138:				
        -: 1139:	}
        -: 1140:      return 0;
        -: 1141:	*/
        -: 1142:	
        -: 1143:    case steward:
    #####: 1144:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1145:	{
        -: 1146:	  //+2 cards
    #####: 1147:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1148:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1149:	}
    #####: 1150:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1151:	{
        -: 1152:	  //+2 coins
    #####: 1153:	  state->coins = state->coins + 2;
        -: 1154:	}
        -: 1155:      else
        -: 1156:	{
        -: 1157:	  //trash 2 cards in hand
    #####: 1158:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1159:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1160:	}
        -: 1161:			
        -: 1162:      //discard card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case tribute:
    #####: 1167:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1168:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1169:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1170:	  state->deckCount[nextPlayer]--;
        -: 1171:	}
    #####: 1172:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1173:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1174:	  state->discardCount[nextPlayer]--;
        -: 1175:	}
        -: 1176:	else{
        -: 1177:	  //No Card to Reveal
        -: 1178:	  if (DEBUG){
        -: 1179:	    printf("No cards to reveal\n");
        -: 1180:	  }
        -: 1181:	}
        -: 1182:      }
        -: 1183:	    
        -: 1184:      else{
    #####: 1185:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1186:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1187:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1188:	    state->deckCount[nextPlayer]++;
    #####: 1189:	    state->discard[nextPlayer][i] = -1;
    #####: 1190:	    state->discardCount[nextPlayer]--;
        -: 1191:	  }
        -: 1192:			    
    #####: 1193:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1194:	} 
    #####: 1195:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1196:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1197:	state->deckCount[nextPlayer]--;
    #####: 1198:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1199:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1200:	state->deckCount[nextPlayer]--;
        -: 1201:      }    
        -: 1202:		       
    #####: 1203:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1204:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1205:	state->playedCardCount++;
    #####: 1206:	tributeRevealedCards[1] = -1;
        -: 1207:      }
        -: 1208:
    #####: 1209:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1210:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1211:	  state->coins += 2;
        -: 1212:	}
        -: 1213:		    
    #####: 1214:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1215:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1216:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1217:	}
        -: 1218:	else{//Action Card
    #####: 1219:	  state->numActions = state->numActions + 2;
        -: 1220:	}
        -: 1221:      }
        -: 1222:	    
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case ambassador:
    #####: 1226:      j = 0;		//used to check if player has enough cards to discard
        -: 1227:
    #####: 1228:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1229:	{
    #####: 1230:	  return -1;				
        -: 1231:	}
        -: 1232:
    #####: 1233:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
    #####: 1235:	  return -1;
        -: 1236:	}
        -: 1237:
    #####: 1238:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1239:	{
    #####: 1240:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1241:	    {
    #####: 1242:	      j++;
        -: 1243:	    }
        -: 1244:	}
    #####: 1245:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1246:	{
    #####: 1247:	  return -1;				
        -: 1248:	}
        -: 1249:
        -: 1250:      if (DEBUG) 
        -: 1251:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1252:
        -: 1253:      //increase supply count for choosen card by amount being discarded
    #####: 1254:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1255:			
        -: 1256:      //each other player gains a copy of revealed card
    #####: 1257:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1258:	{
    #####: 1259:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1260:	    {
    #####: 1261:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1262:	    }
        -: 1263:	}
        -: 1264:
        -: 1265:      //discard played card from hand
    #####: 1266:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1267:
        -: 1268:      //trash copies of cards returned to supply
    #####: 1269:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1270:	{
    #####: 1271:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1272:	    {
    #####: 1273:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1274:		{
    #####: 1275:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1276:		  break;
        -: 1277:		}
        -: 1278:	    }
        -: 1279:	}			
        -: 1280:
    #####: 1281:      return 0;
        -: 1282:		
        -: 1283:    case cutpurse:
    #####: 1284:		cutpurseRefact(currentPlayer, state, handPos, i, j, k);
call    0 never executed
        -: 1285:	/*
        -: 1286:      updateCoins(currentPlayer, state, 2);
        -: 1287:      for (i = 0; i < state->numPlayers; i++)
        -: 1288:	{
        -: 1289:	  if (i != currentPlayer)
        -: 1290:	    {
        -: 1291:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1292:		{
        -: 1293:		  if (state->hand[i][j] == copper)
        -: 1294:		    {
        -: 1295:		      discardCard(j, i, state, 0);
        -: 1296:		      break;
        -: 1297:		    }
        -: 1298:		  if (j == state->handCount[i])
        -: 1299:		    {
        -: 1300:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1301:			{
        -: 1302:			  if (DEBUG)
        -: 1303:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1304:			}	
        -: 1305:		      break;
        -: 1306:		    }		
        -: 1307:		}
        -: 1308:					
        -: 1309:	    }
        -: 1310:				
        -: 1311:	}				
        -: 1312:
        -: 1313:      //discard played card from hand
        -: 1314:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1315:
        -: 1316:      return 0;
        -: 1317:	*/
        -: 1318:		
        -: 1319:    case embargo: 
        -: 1320:      //+2 Coins
    #####: 1321:      state->coins = state->coins + 2;
        -: 1322:			
        -: 1323:      //see if selected pile is in play
    #####: 1324:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1325:	{
    #####: 1326:	  return -1;
        -: 1327:	}
        -: 1328:			
        -: 1329:      //add embargo token to selected supply pile
    #####: 1330:      state->embargoTokens[choice1]++;
        -: 1331:			
        -: 1332:      //trash card
    #####: 1333:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1334:      return 0;
        -: 1335:		
        -: 1336:    case outpost:
        -: 1337:      //set outpost flag
    #####: 1338:      state->outpostPlayed++;
        -: 1339:			
        -: 1340:      //discard card
    #####: 1341:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1342:      return 0;
        -: 1343:		
        -: 1344:    case salvager:
        -: 1345:      //+1 buy
    #####: 1346:      state->numBuys++;
        -: 1347:			
    #####: 1348:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1349:	{
        -: 1350:	  //gain coins equal to trashed card
    #####: 1351:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1352:	  //trash card
    #####: 1353:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1354:	}
        -: 1355:			
        -: 1356:      //discard card
    #####: 1357:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1358:      return 0;
        -: 1359:		
        -: 1360:    case sea_hag:
    #####: 1361:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1362:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1363:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1364:	  state->discardCount[i]++;
    #####: 1365:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1366:	}
        -: 1367:      }
    #####: 1368:      return 0;
        -: 1369:		
        -: 1370:    case treasure_map:
        -: 1371:      //search hand for another treasure_map
    #####: 1372:      index = -1;
    #####: 1373:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1374:	{
    #####: 1375:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1376:	    {
    #####: 1377:	      index = i;
    #####: 1378:	      break;
        -: 1379:	    }
        -: 1380:	}
    #####: 1381:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1382:	{
        -: 1383:	  //trash both treasure cards
    #####: 1384:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1385:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1386:
        -: 1387:	  //gain 4 Gold cards
    #####: 1388:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1389:	    {
    #####: 1390:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1391:	    }
        -: 1392:				
        -: 1393:	  //return success
    #####: 1394:	  return 1;
        -: 1395:	}
        -: 1396:			
        -: 1397:      //no second treasure_map found in hand
    #####: 1398:      return -1;
        -: 1399:    }
        -: 1400:	
    #####: 1401:  return -1;
        -: 1402:}
        -: 1403:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1404:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1405:{
        -: 1406:  //if card is not trashed, added to Played pile 
    #####: 1407:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1408:    {
        -: 1409:      //add card to played pile
    #####: 1410:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1411:      state->playedCardCount++;
        -: 1412:    }
        -: 1413:  //set played card to -1
    #####: 1414:  state->hand[currentPlayer][handPos] = -1;
        -: 1415:	
        -: 1416:  //remove card from player's hand
    #####: 1417:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1418:    {
        -: 1419:      //reduce number of cards in hand
    #####: 1420:      state->handCount[currentPlayer]--;
        -: 1421:    }
    #####: 1422:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1423:    {
        -: 1424:      //reduce number of cards in hand
    #####: 1425:      state->handCount[currentPlayer]--;
        -: 1426:    }
        -: 1427:  else 	
        -: 1428:    {
        -: 1429:      //replace discarded card with last card in hand
    #####: 1430:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1431:      //set last card to -1
    #####: 1432:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1433:      //reduce number of cards in hand
    #####: 1434:      state->handCount[currentPlayer]--;
        -: 1435:    }
        -: 1436:	
    #####: 1437:  return 0;
        -: 1438:}
        -: 1439:
function gainCard called 2000 returned 100% blocks executed 70%
     2000: 1440:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1441:{
        -: 1442:  //Note: supplyPos is enum of choosen card
        -: 1443:	
        -: 1444:  //check if supply pile is empty (0) or card is not used in game (-1)
     2000: 1445:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1446:    {
    #####: 1447:      return -1;
        -: 1448:    }
        -: 1449:	
        -: 1450:  //added card for [whoseTurn] current player:
        -: 1451:  // toFlag = 0 : add to discard
        -: 1452:  // toFlag = 1 : add to deck
        -: 1453:  // toFlag = 2 : add to hand
        -: 1454:
     2000: 1455:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1456:    {
    #####: 1457:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1458:      state->deckCount[player]++;
        -: 1459:    }
     2000: 1460:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1461:    {
     2000: 1462:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     2000: 1463:      state->handCount[player]++;
        -: 1464:    }
        -: 1465:  else
        -: 1466:    {
    #####: 1467:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1468:      state->discardCount[player]++;
        -: 1469:    }
        -: 1470:	
        -: 1471:  //decrease number in supply pile
     2000: 1472:  state->supplyCount[supplyPos]--;
        -: 1473:	 
     2000: 1474:  return 0;
        -: 1475:}
        -: 1476:
function updateCoins called 4000 returned 100% blocks executed 100%
     4000: 1477:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1478:{
        -: 1479:  int i;
        -: 1480:	
        -: 1481:  //reset coin count
     4000: 1482:  state->coins = 0;
        -: 1483:  
        -: 1484:  //add coins for each Treasure card in player's hand
   494696: 1485:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1486:    {
   490696: 1487:      if (state->hand[player][i] == copper)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1488:	{
    27611: 1489:	  state->coins += 1;
        -: 1490:	}
   463085: 1491:      else if (state->hand[player][i] == silver)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1492:	{
    20994: 1493:	  state->coins += 2;
        -: 1494:	}
   442091: 1495:      else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1496:	{
    17304: 1497:	  state->coins += 3;
        -: 1498:	}	
        -: 1499:    }	
        -: 1500:
        -: 1501:  //add bonus
     4000: 1502:  state->coins += bonus;
        -: 1503:
     4000: 1504:  return 0;
        -: 1505:}
        -: 1506:
        -: 1507:
        -: 1508://end of dominion.c
        -: 1509:
File 'dominion.c'
Lines executed:28.09% of 559
Branches executed:29.16% of 415
Taken at least once:20.24% of 415
Calls executed:17.71% of 96
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 69750 returned 100% blocks executed 83%
    69750:    8:int compare(const void* a, const void* b) {
    69750:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    69750:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    18600:   12:    return -1;
    51150:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2000 returned 100% blocks executed 94%
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
call    0 returned 100%
     2000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   220000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   200000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2000:   73:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   74:    {
     1350:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      650:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
      650:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2000:   87:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   88:    {
     1350:   89:      state->supplyCount[estate] = 8;
     1350:   90:      state->supplyCount[duchy] = 8;
     1350:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      650:   95:      state->supplyCount[estate] = 12;
      650:   96:      state->supplyCount[duchy] = 12;
      650:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  102:  state->supplyCount[silver] = 40;
     2000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   330000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   310000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
     1350:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      650:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    18000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    20000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   290000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     6650:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
     4650:  140:      state->deckCount[i] = 0;
    18600:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    13950:  143:	  state->deck[i][j] = estate;
    13950:  144:	  state->deckCount[i]++;
        -:  145:	}
    37200:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    32550:  148:	  state->deck[i][j] = copper;
    32550:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     6650:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
     4650:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     6650:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     4650:  166:      state->handCount[i] = 0;
     4650:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    54000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2000:  182:  state->outpostPlayed = 0;
     2000:  183:  state->phase = 0;
     2000:  184:  state->numActions = 1;
     2000:  185:  state->numBuys = 1;
     2000:  186:  state->playedCardCount = 0;
     2000:  187:  state->whoseTurn = 0;
     2000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     2000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     2000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 15924 returned 100% blocks executed 100%
    15924:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    15924:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    15924:  209:  if (state->deckCount[player] < 1)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
    11274:  210:    return -1;
     4650:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    55800:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    46500:  216:    newDeck[newDeckPos] = state->deck[player][card];
    46500:  217:    newDeckPos++;
   162278:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
   115778:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    46500:  221:    state->deckCount[player]--;
        -:  222:  }
    51150:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  224:    state->deck[player][i] = newDeck[i];
    46500:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     4650:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 2000 returned 100% blocks executed 73%
     2000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     2000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     2000:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     2000:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     2000:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
     2000:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     2000:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
     2000:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
     2000:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
     2000:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 2000 returned 100% blocks executed 100%
     2000:  315:int handCard(int handPos, struct gameState *state) {
     2000:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2000 returned 100% blocks executed 100%
     2000:  320:int supplyCount(int card, struct gameState *state) {
     2000:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4000 returned 100% blocks executed 100%
     4000:  346:int whoseTurn(struct gameState *state) {
     4000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 63162 returned 100% blocks executed 85%
    63162:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    63162:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     5637:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     5637:  538:    state->deckCount[player] = state->discardCount[player];
     5637:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5637:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5637:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5637:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5637:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5637:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     5637:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    57525:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    57525:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    57525:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    57525:  576:    state->deckCount[player]--;
    57525:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    57525:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function smithyRefact called 0 returned 0% blocks executed 0%
    #####:  646:int smithyRefact(int currentPlayer, struct gameState *state, int handPos, int i)
        -:  647:{
        -:  648:	//+3 Cards
    #####:  649:      for (i = 0; i < 5; i++) // changed from 3 cards to 5
branch  0 never executed
branch  1 never executed
        -:  650:	{
    #####:  651:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  652:	}
        -:  653:			
        -:  654:      //discard card from hand
    #####:  655:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  656:      return 0;
        -:  657:}
        -:  658:
function adventurerRefact called 2000 returned 100% blocks executed 100%
     2000:  659:int adventurerRefact(int currentPlayer, struct gameState *state, int temphand[], int drawntreasure, int cardDrawn, int z)
        -:  660:{	  
    57162:  661:	while(drawntreasure<2){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    53162:  662:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
     5637:  663:			shuffle(currentPlayer, state);
call    0 returned 100%
        -:  664:		}
    53162:  665:	drawCard(currentPlayer, state);
call    0 returned 100%
    53162:  666:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    53162:  667:	if (cardDrawn == copper || cardDrawn == silver) // removed gold as part of the statement || cardDrawn == gold
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
     4000:  668:		drawntreasure++;
        -:  669:	else{
    49162:  670:		temphand[z]=cardDrawn;
    49162:  671:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    49162:  672:		z++;
        -:  673:		}
        -:  674:    }
        -:  675:    
    53162:  676:	while(z-1>=0){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    49162:  677:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    49162:  678:		z=z-1;
        -:  679:    }
     2000:  680:    return 0;
        -:  681:}
        -:  682:
function cutpurseRefact called 0 returned 0% blocks executed 0%
    #####:  683:int cutpurseRefact(int currentPlayer, struct gameState *state, int handPos, int i, int j, int k)
        -:  684:{
    #####:  685:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  686:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  687:	{
    #####:  688:	  if (i == currentPlayer)  // removed not from statement != currentPlayer
branch  0 never executed
branch  1 never executed
        -:  689:	    {
    #####:  690:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  691:		{
    #####:  692:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  693:		    {
    #####:  694:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  695:		      break;
        -:  696:		    }
    #####:  697:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  698:		    {
    #####:  699:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  700:			{
        -:  701:			  if (DEBUG)
        -:  702:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  703:			}	
    #####:  704:		      break;
        -:  705:		    }		
        -:  706:		}
        -:  707:					
        -:  708:	    }
        -:  709:				
        -:  710:	}				
        -:  711:
        -:  712:      //discard played card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  714:
    #####:  715:      return 0;
        -:  716:}
        -:  717:
function mineRefact called 0 returned 0% blocks executed 0%
    #####:  718:int mineRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  719:{
    #####:  720:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:		
    #####:  727:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  728:	{
    #####:  729:	  return -1;
        -:  730:	}
        -:  731:
    #####:  732:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  733:	{
    #####:  734:	  return -1;
        -:  735:	}
        -:  736:
    #####:  737:	printf("refact choice2: %d\n", choice2);
call    0 never executed
    #####:  738:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  739:
        -:  740:      //discard card from hand
    #####:  741:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  742:
        -:  743:      //discard trashed card
    #####:  744:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  745:	{
    #####:  746:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  747:	    {
    #####:  748:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  749:	      break;
        -:  750:	    }
        -:  751:	}
        -:  752:			
    #####:  753:      return 0;
        -:  754:}
        -:  755:
function minionRefact called 0 returned 0% blocks executed 0%
    #####:  756:int minionRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  757:{
        -:  758:	//+1 action
    #####:  759:	state->numActions++;
        -:  760:			
        -:  761:	//discard card from hand
    #####:  762:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  763:	
        -:  764:
        -:  765:	//reversed choices 1 & 2
    #####:  766:	if (choice2)		//+2 coins 
branch  0 never executed
branch  1 never executed
        -:  767:	{
    #####:  768:		state->coins = state->coins + 2;
        -:  769:	}
        -:  770:			
    #####:  771:    else if (choice1)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  772:	{
        -:  773:		//discard hand
    #####:  774:		while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  775:	    {
    #####:  776:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  777:	    }
        -:  778:				
        -:  779:		//draw 4
    #####:  780:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  781:	    {
    #####:  782:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  783:	    }
        -:  784:				
        -:  785:		//other players discard hand and redraw if hand size > 4
    #####:  786:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  789:			{
    #####:  790:				if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  791:				{
        -:  792:					//discard hand
    #####:  793:					while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  794:					{
    #####:  795:						discardCard(handPos, i, state, 0);
call    0 never executed
        -:  796:					}
        -:  797:							
        -:  798:					//draw 4
    #####:  799:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  800:					{
    #####:  801:						drawCard(i, state);
call    0 never executed
        -:  802:					}
        -:  803:				}
        -:  804:			}
        -:  805:	    }
        -:  806:				
        -:  807:	}
    #####:  808:		return 0;
        -:  809:}
        -:  810:
function cardEffect called 2000 returned 100% blocks executed 4%
     2000:  811:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  812:{
        -:  813:  int i;
        -:  814:  int j;
        -:  815:  int k;
        -:  816:  int x;
        -:  817:  int index;
     2000:  818:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  819:  int nextPlayer = currentPlayer + 1;
        -:  820:
     2000:  821:  int tributeRevealedCards[2] = {-1, -1};
        -:  822:  int temphand[MAX_HAND];// moved above the if statement
     2000:  823:  int drawntreasure=0;
        -:  824:  int cardDrawn;
     2000:  825:  int z = 0;// this is the counter for the temp hand
     2000:  826:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1001:  827:    nextPlayer = 0;
        -:  828:  }
        -:  829:  
        -:  830:	
        -:  831:  //uses switch to select card and perform actions
     2000:  832:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  833:    {
        -:  834:    case adventurer:
     2000:  835:		return adventurerRefact(currentPlayer, state, temphand, drawntreasure, cardDrawn, z);
call    0 returned 100%
        -:  836:	/*
        -:  837:	  while(drawntreasure<2){
        -:  838:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  839:	  shuffle(currentPlayer, state);
        -:  840:	}
        -:  841:	drawCard(currentPlayer, state);
        -:  842:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  843:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  844:	  drawntreasure++;
        -:  845:	else{
        -:  846:	  temphand[z]=cardDrawn;
        -:  847:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  848:	  z++;
        -:  849:	}
        -:  850:      }
        -:  851:      while(z-1>=0){
        -:  852:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  853:	z=z-1;
        -:  854:      }
        -:  855:      return 0;
        -:  856:	*/
        -:  857:			
        -:  858:    case council_room:
        -:  859:      //+4 Cards
    #####:  860:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  861:	{
    #####:  862:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  863:	}
        -:  864:			
        -:  865:      //+1 Buy
    #####:  866:      state->numBuys++;
        -:  867:			
        -:  868:      //Each other player draws a card
    #####:  869:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  870:	{
    #####:  871:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  872:	    {
    #####:  873:	      drawCard(i, state);
call    0 never executed
        -:  874:	    }
        -:  875:	}
        -:  876:			
        -:  877:      //put played card in played card pile
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:			
    #####:  880:      return 0;
        -:  881:			
        -:  882:    case feast:
        -:  883:      //gain card with cost up to 5
        -:  884:      //Backup hand
    #####:  885:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  886:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  887:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  888:      }
        -:  889:      //Backup hand
        -:  890:
        -:  891:      //Update Coins for Buy
    #####:  892:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  893:      x = 1;//Condition to loop on
    #####:  894:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  895:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  896:	  if (DEBUG)
        -:  897:	    printf("None of that card left, sorry!\n");
        -:  898:
        -:  899:	  if (DEBUG){
        -:  900:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  901:	  }
        -:  902:	}
    #####:  903:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  904:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  905:
        -:  906:	  if (DEBUG){
        -:  907:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  908:	  }
        -:  909:	}
        -:  910:	else{
        -:  911:
        -:  912:	  if (DEBUG){
        -:  913:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  914:	  }
        -:  915:
    #####:  916:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  917:	  x = 0;//No more buying cards
        -:  918:
        -:  919:	  if (DEBUG){
        -:  920:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  921:	  }
        -:  922:
        -:  923:	}
        -:  924:      }     
        -:  925:
        -:  926:      //Reset Hand
    #####:  927:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  928:	state->hand[currentPlayer][i] = temphand[i];
    #####:  929:	temphand[i] = -1;
        -:  930:      }
        -:  931:      //Reset Hand
        -:  932:      			
    #####:  933:      return 0;
        -:  934:			
        -:  935:    case gardens:
    #####:  936:      return -1;
        -:  937:			
        -:  938:    case mine:
    #####:  939:		return mineRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -:  940:		//return 0;
        -:  941:	/*
        -:  942:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  943:
        -:  944:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  945:	{
        -:  946:	  return -1;
        -:  947:	}
        -:  948:		
        -:  949:      if (choice2 > treasure_map || choice2 < curse)
        -:  950:	{
        -:  951:	  return -1;
        -:  952:	}
        -:  953:
        -:  954:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  955:	{
        -:  956:	  return -1;
        -:  957:	}
        -:  958:
        -:  959:      gainCard(choice2, state, 2, currentPlayer);
        -:  960:
        -:  961:      //discard card from hand
        -:  962:      discardCard(handPos, currentPlayer, state, 0);
        -:  963:
        -:  964:      //discard trashed card
        -:  965:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  966:	{
        -:  967:	  if (state->hand[currentPlayer][i] == j)
        -:  968:	    {
        -:  969:	      discardCard(i, currentPlayer, state, 0);			
        -:  970:	      break;
        -:  971:	    }
        -:  972:	}
        -:  973:			
        -:  974:      return 0;
        -:  975:	*/
        -:  976:		
        -:  977:    case remodel:
    #####:  978:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  979:
    #####:  980:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  981:	{
    #####:  982:	  return -1;
        -:  983:	}
        -:  984:
    #####:  985:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  986:
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  989:
        -:  990:      //discard trashed card
    #####:  991:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  992:	{
    #####:  993:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  994:	    {
    #####:  995:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  996:	      break;
        -:  997:	    }
        -:  998:	}
        -:  999:
        -: 1000:
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case smithy:
    #####: 1004:		return smithyRefact(currentPlayer, state, handPos, i);
call    0 never executed
        -: 1005:		
        -: 1006:    /*  //+3 Cards
        -: 1007:      for (i = 0; i < 3; i++)
        -: 1008:	{
        -: 1009:	  drawCard(currentPlayer, state);
        -: 1010:	}
        -: 1011:			
        -: 1012:      //discard card from hand
        -: 1013:      discardCard(handPos, currentPlayer, state, 0);
        -: 1014:      return 0;
        -: 1015:	 */
        -: 1016:		
        -: 1017:    case village:
        -: 1018:      //+1 Card
    #####: 1019:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1020:			
        -: 1021:      //+2 Actions
    #####: 1022:      state->numActions = state->numActions + 2;
        -: 1023:			
        -: 1024:      //discard played card from hand
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case baron:
    #####: 1029:      state->numBuys++;//Increase buys by 1!
    #####: 1030:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1031:	int p = 0;//Iterator for hand!
    #####: 1032:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1033:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1034:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1035:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1036:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1037:	    state->discardCount[currentPlayer]++;
    #####: 1038:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1039:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1040:	    }
    #####: 1041:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1042:	    state->handCount[currentPlayer]--;
    #####: 1043:	    card_not_discarded = 0;//Exit the loop
        -: 1044:	  }
    #####: 1045:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1046:	    if(DEBUG) {
        -: 1047:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1048:	      printf("Must gain an estate if there are any\n");
        -: 1049:	    }
    #####: 1050:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1051:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1052:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1053:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1054:		isGameOver(state);
call    0 never executed
        -: 1055:	      }
        -: 1056:	    }
    #####: 1057:	    card_not_discarded = 0;//Exit the loop
        -: 1058:	  }
        -: 1059:			    
        -: 1060:	  else{
    #####: 1061:	    p++;//Next card
        -: 1062:	  }
        -: 1063:	}
        -: 1064:      }
        -: 1065:			    
        -: 1066:      else{
    #####: 1067:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1068:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1069:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1070:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1071:	    isGameOver(state);
call    0 never executed
        -: 1072:	  }
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
        -: 1076:      
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case great_hall:
        -: 1080:      //+1 Card
    #####: 1081:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1082:			
        -: 1083:      //+1 Actions
    #####: 1084:      state->numActions++;
        -: 1085:			
        -: 1086:      //discard card from hand
    #####: 1087:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case minion:
    #####: 1091:		return minionRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -: 1092:	/*
        -: 1093:      //+1 action
        -: 1094:      state->numActions++;
        -: 1095:			
        -: 1096:      //discard card from hand
        -: 1097:      discardCard(handPos, currentPlayer, state, 0);
        -: 1098:			
        -: 1099:      if (choice1)		//+2 coins
        -: 1100:	{
        -: 1101:	  state->coins = state->coins + 2;
        -: 1102:	}
        -: 1103:			
        -: 1104:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1105:	{
        -: 1106:	  //discard hand
        -: 1107:	  while(numHandCards(state) > 0)
        -: 1108:	    {
        -: 1109:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1110:	    }
        -: 1111:				
        -: 1112:	  //draw 4
        -: 1113:	  for (i = 0; i < 4; i++)
        -: 1114:	    {
        -: 1115:	      drawCard(currentPlayer, state);
        -: 1116:	    }
        -: 1117:				
        -: 1118:	  //other players discard hand and redraw if hand size > 4
        -: 1119:	  for (i = 0; i < state->numPlayers; i++)
        -: 1120:	    {
        -: 1121:	      if (i != currentPlayer)
        -: 1122:		{
        -: 1123:		  if ( state->handCount[i] > 4 )
        -: 1124:		    {
        -: 1125:		      //discard hand
        -: 1126:		      while( state->handCount[i] > 0 )
        -: 1127:			{
        -: 1128:			  discardCard(handPos, i, state, 0);
        -: 1129:			}
        -: 1130:							
        -: 1131:		      //draw 4
        -: 1132:		      for (j = 0; j < 4; j++)
        -: 1133:			{
        -: 1134:			  drawCard(i, state);
        -: 1135:			}
        -: 1136:		    }
        -: 1137:		}
        -: 1138:	    }
        -: 1139:				
        -: 1140:	}
        -: 1141:      return 0;
        -: 1142:	*/
        -: 1143:	
        -: 1144:    case steward:
    #####: 1145:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1146:	{
        -: 1147:	  //+2 cards
    #####: 1148:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1149:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1150:	}
    #####: 1151:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1152:	{
        -: 1153:	  //+2 coins
    #####: 1154:	  state->coins = state->coins + 2;
        -: 1155:	}
        -: 1156:      else
        -: 1157:	{
        -: 1158:	  //trash 2 cards in hand
    #####: 1159:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1160:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1161:	}
        -: 1162:			
        -: 1163:      //discard card from hand
    #####: 1164:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1165:      return 0;
        -: 1166:		
        -: 1167:    case tribute:
    #####: 1168:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1169:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1170:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1171:	  state->deckCount[nextPlayer]--;
        -: 1172:	}
    #####: 1173:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1174:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1175:	  state->discardCount[nextPlayer]--;
        -: 1176:	}
        -: 1177:	else{
        -: 1178:	  //No Card to Reveal
        -: 1179:	  if (DEBUG){
        -: 1180:	    printf("No cards to reveal\n");
        -: 1181:	  }
        -: 1182:	}
        -: 1183:      }
        -: 1184:	    
        -: 1185:      else{
    #####: 1186:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1187:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1188:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1189:	    state->deckCount[nextPlayer]++;
    #####: 1190:	    state->discard[nextPlayer][i] = -1;
    #####: 1191:	    state->discardCount[nextPlayer]--;
        -: 1192:	  }
        -: 1193:			    
    #####: 1194:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1195:	} 
    #####: 1196:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1197:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1198:	state->deckCount[nextPlayer]--;
    #####: 1199:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1200:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1201:	state->deckCount[nextPlayer]--;
        -: 1202:      }    
        -: 1203:		       
    #####: 1204:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1205:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1206:	state->playedCardCount++;
    #####: 1207:	tributeRevealedCards[1] = -1;
        -: 1208:      }
        -: 1209:
    #####: 1210:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1211:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1212:	  state->coins += 2;
        -: 1213:	}
        -: 1214:		    
    #####: 1215:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1216:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1217:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1218:	}
        -: 1219:	else{//Action Card
    #####: 1220:	  state->numActions = state->numActions + 2;
        -: 1221:	}
        -: 1222:      }
        -: 1223:	    
    #####: 1224:      return 0;
        -: 1225:		
        -: 1226:    case ambassador:
    #####: 1227:      j = 0;		//used to check if player has enough cards to discard
        -: 1228:
    #####: 1229:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1230:	{
    #####: 1231:	  return -1;				
        -: 1232:	}
        -: 1233:
    #####: 1234:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1235:	{
    #####: 1236:	  return -1;
        -: 1237:	}
        -: 1238:
    #####: 1239:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1240:	{
    #####: 1241:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1242:	    {
    #####: 1243:	      j++;
        -: 1244:	    }
        -: 1245:	}
    #####: 1246:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1247:	{
    #####: 1248:	  return -1;				
        -: 1249:	}
        -: 1250:
        -: 1251:      if (DEBUG) 
        -: 1252:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1253:
        -: 1254:      //increase supply count for choosen card by amount being discarded
    #####: 1255:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1256:			
        -: 1257:      //each other player gains a copy of revealed card
    #####: 1258:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1259:	{
    #####: 1260:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1261:	    {
    #####: 1262:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1263:	    }
        -: 1264:	}
        -: 1265:
        -: 1266:      //discard played card from hand
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1268:
        -: 1269:      //trash copies of cards returned to supply
    #####: 1270:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1271:	{
    #####: 1272:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1273:	    {
    #####: 1274:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1275:		{
    #####: 1276:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1277:		  break;
        -: 1278:		}
        -: 1279:	    }
        -: 1280:	}			
        -: 1281:
    #####: 1282:      return 0;
        -: 1283:		
        -: 1284:    case cutpurse:
    #####: 1285:		cutpurseRefact(currentPlayer, state, handPos, i, j, k);
call    0 never executed
        -: 1286:	/*
        -: 1287:      updateCoins(currentPlayer, state, 2);
        -: 1288:      for (i = 0; i < state->numPlayers; i++)
        -: 1289:	{
        -: 1290:	  if (i != currentPlayer)
        -: 1291:	    {
        -: 1292:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1293:		{
        -: 1294:		  if (state->hand[i][j] == copper)
        -: 1295:		    {
        -: 1296:		      discardCard(j, i, state, 0);
        -: 1297:		      break;
        -: 1298:		    }
        -: 1299:		  if (j == state->handCount[i])
        -: 1300:		    {
        -: 1301:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1302:			{
        -: 1303:			  if (DEBUG)
        -: 1304:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1305:			}	
        -: 1306:		      break;
        -: 1307:		    }		
        -: 1308:		}
        -: 1309:					
        -: 1310:	    }
        -: 1311:				
        -: 1312:	}				
        -: 1313:
        -: 1314:      //discard played card from hand
        -: 1315:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1316:
        -: 1317:      return 0;
        -: 1318:	*/
        -: 1319:		
        -: 1320:    case embargo: 
        -: 1321:      //+2 Coins
    #####: 1322:      state->coins = state->coins + 2;
        -: 1323:			
        -: 1324:      //see if selected pile is in play
    #####: 1325:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1326:	{
    #####: 1327:	  return -1;
        -: 1328:	}
        -: 1329:			
        -: 1330:      //add embargo token to selected supply pile
    #####: 1331:      state->embargoTokens[choice1]++;
        -: 1332:			
        -: 1333:      //trash card
    #####: 1334:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1335:      return 0;
        -: 1336:		
        -: 1337:    case outpost:
        -: 1338:      //set outpost flag
    #####: 1339:      state->outpostPlayed++;
        -: 1340:			
        -: 1341:      //discard card
    #####: 1342:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1343:      return 0;
        -: 1344:		
        -: 1345:    case salvager:
        -: 1346:      //+1 buy
    #####: 1347:      state->numBuys++;
        -: 1348:			
    #####: 1349:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1350:	{
        -: 1351:	  //gain coins equal to trashed card
    #####: 1352:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1353:	  //trash card
    #####: 1354:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1355:	}
        -: 1356:			
        -: 1357:      //discard card
    #####: 1358:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1359:      return 0;
        -: 1360:		
        -: 1361:    case sea_hag:
    #####: 1362:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1363:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1364:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1365:	  state->discardCount[i]++;
    #####: 1366:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1367:	}
        -: 1368:      }
    #####: 1369:      return 0;
        -: 1370:		
        -: 1371:    case treasure_map:
        -: 1372:      //search hand for another treasure_map
    #####: 1373:      index = -1;
    #####: 1374:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1375:	{
    #####: 1376:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1377:	    {
    #####: 1378:	      index = i;
    #####: 1379:	      break;
        -: 1380:	    }
        -: 1381:	}
    #####: 1382:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1383:	{
        -: 1384:	  //trash both treasure cards
    #####: 1385:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1386:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1387:
        -: 1388:	  //gain 4 Gold cards
    #####: 1389:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1390:	    {
    #####: 1391:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1392:	    }
        -: 1393:				
        -: 1394:	  //return success
    #####: 1395:	  return 1;
        -: 1396:	}
        -: 1397:			
        -: 1398:      //no second treasure_map found in hand
    #####: 1399:      return -1;
        -: 1400:    }
        -: 1401:	
    #####: 1402:  return -1;
        -: 1403:}
        -: 1404:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1405:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1406:{
        -: 1407:  //if card is not trashed, added to Played pile 
    #####: 1408:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1409:    {
        -: 1410:      //add card to played pile
    #####: 1411:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1412:      state->playedCardCount++;
        -: 1413:    }
        -: 1414:  //set played card to -1
    #####: 1415:  state->hand[currentPlayer][handPos] = -1;
        -: 1416:	
        -: 1417:  //remove card from player's hand
    #####: 1418:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1419:    {
        -: 1420:      //reduce number of cards in hand
    #####: 1421:      state->handCount[currentPlayer]--;
        -: 1422:    }
    #####: 1423:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1424:    {
        -: 1425:      //reduce number of cards in hand
    #####: 1426:      state->handCount[currentPlayer]--;
        -: 1427:    }
        -: 1428:  else 	
        -: 1429:    {
        -: 1430:      //replace discarded card with last card in hand
    #####: 1431:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1432:      //set last card to -1
    #####: 1433:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1434:      //reduce number of cards in hand
    #####: 1435:      state->handCount[currentPlayer]--;
        -: 1436:    }
        -: 1437:	
    #####: 1438:  return 0;
        -: 1439:}
        -: 1440:
function gainCard called 2000 returned 100% blocks executed 70%
     2000: 1441:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1442:{
        -: 1443:  //Note: supplyPos is enum of choosen card
        -: 1444:	
        -: 1445:  //check if supply pile is empty (0) or card is not used in game (-1)
     2000: 1446:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1447:    {
    #####: 1448:      return -1;
        -: 1449:    }
        -: 1450:	
        -: 1451:  //added card for [whoseTurn] current player:
        -: 1452:  // toFlag = 0 : add to discard
        -: 1453:  // toFlag = 1 : add to deck
        -: 1454:  // toFlag = 2 : add to hand
        -: 1455:
     2000: 1456:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1457:    {
    #####: 1458:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1459:      state->deckCount[player]++;
        -: 1460:    }
     2000: 1461:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1462:    {
     2000: 1463:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     2000: 1464:      state->handCount[player]++;
        -: 1465:    }
        -: 1466:  else
        -: 1467:    {
    #####: 1468:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1469:      state->discardCount[player]++;
        -: 1470:    }
        -: 1471:	
        -: 1472:  //decrease number in supply pile
     2000: 1473:  state->supplyCount[supplyPos]--;
        -: 1474:	 
     2000: 1475:  return 0;
        -: 1476:}
        -: 1477:
function updateCoins called 4000 returned 100% blocks executed 100%
     4000: 1478:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1479:{
        -: 1480:  int i;
        -: 1481:	
        -: 1482:  //reset coin count
     4000: 1483:  state->coins = 0;
        -: 1484:  
        -: 1485:  //add coins for each Treasure card in player's hand
   494696: 1486:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1487:    {
   490696: 1488:      if (state->hand[player][i] == copper)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1489:	{
    27611: 1490:	  state->coins += 1;
        -: 1491:	}
   463085: 1492:      else if (state->hand[player][i] == silver)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1493:	{
    20994: 1494:	  state->coins += 2;
        -: 1495:	}
   442091: 1496:      else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1497:	{
    17304: 1498:	  state->coins += 3;
        -: 1499:	}	
        -: 1500:    }	
        -: 1501:
        -: 1502:  //add bonus
     4000: 1503:  state->coins += bonus;
        -: 1504:
     4000: 1505:  return 0;
        -: 1506:}
        -: 1507:
        -: 1508:
        -: 1509://end of dominion.c
        -: 1510:
File 'dominion.c'
Lines executed:28.09% of 559
Branches executed:29.16% of 415
Taken at least once:20.24% of 415
Calls executed:17.71% of 96
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 69750 returned 100% blocks executed 83%
    69750:    8:int compare(const void* a, const void* b) {
    69750:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    69750:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    18600:   12:    return -1;
    51150:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2000 returned 100% blocks executed 94%
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
call    0 returned 100%
     2000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   220000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   200000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2000:   73:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   74:    {
     1350:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      650:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
      650:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2000:   87:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   88:    {
     1350:   89:      state->supplyCount[estate] = 8;
     1350:   90:      state->supplyCount[duchy] = 8;
     1350:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      650:   95:      state->supplyCount[estate] = 12;
      650:   96:      state->supplyCount[duchy] = 12;
      650:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  102:  state->supplyCount[silver] = 40;
     2000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   330000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   310000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
     1350:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      650:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    18000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    20000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   290000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     6650:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
     4650:  140:      state->deckCount[i] = 0;
    18600:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    13950:  143:	  state->deck[i][j] = estate;
    13950:  144:	  state->deckCount[i]++;
        -:  145:	}
    37200:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    32550:  148:	  state->deck[i][j] = copper;
    32550:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     6650:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
     4650:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     6650:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     4650:  166:      state->handCount[i] = 0;
     4650:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    54000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2000:  182:  state->outpostPlayed = 0;
     2000:  183:  state->phase = 0;
     2000:  184:  state->numActions = 1;
     2000:  185:  state->numBuys = 1;
     2000:  186:  state->playedCardCount = 0;
     2000:  187:  state->whoseTurn = 0;
     2000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     2000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     2000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 15924 returned 100% blocks executed 100%
    15924:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    15924:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    15924:  209:  if (state->deckCount[player] < 1)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
    11274:  210:    return -1;
     4650:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    55800:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    46500:  216:    newDeck[newDeckPos] = state->deck[player][card];
    46500:  217:    newDeckPos++;
   162278:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
   115778:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    46500:  221:    state->deckCount[player]--;
        -:  222:  }
    51150:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  224:    state->deck[player][i] = newDeck[i];
    46500:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     4650:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 2000 returned 100% blocks executed 73%
     2000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     2000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     2000:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     2000:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     2000:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
     2000:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     2000:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
     2000:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
     2000:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
     2000:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 2000 returned 100% blocks executed 100%
     2000:  315:int handCard(int handPos, struct gameState *state) {
     2000:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2000 returned 100% blocks executed 100%
     2000:  320:int supplyCount(int card, struct gameState *state) {
     2000:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4000 returned 100% blocks executed 100%
     4000:  346:int whoseTurn(struct gameState *state) {
     4000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 63162 returned 100% blocks executed 85%
    63162:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    63162:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     5637:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     5637:  538:    state->deckCount[player] = state->discardCount[player];
     5637:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5637:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5637:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5637:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5637:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5637:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     5637:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    57525:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    57525:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    57525:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    57525:  576:    state->deckCount[player]--;
    57525:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    57525:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function smithyRefact called 0 returned 0% blocks executed 0%
    #####:  646:int smithyRefact(int currentPlayer, struct gameState *state, int handPos, int i)
        -:  647:{
        -:  648:	//+3 Cards
    #####:  649:      for (i = 0; i < 5; i++) // changed from 3 cards to 5
branch  0 never executed
branch  1 never executed
        -:  650:	{
    #####:  651:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  652:	}
        -:  653:			
        -:  654:      //discard card from hand
    #####:  655:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  656:      return 0;
        -:  657:}
        -:  658:
function adventurerRefact called 2000 returned 100% blocks executed 100%
     2000:  659:int adventurerRefact(int currentPlayer, struct gameState *state, int temphand[], int drawntreasure, int cardDrawn, int z)
        -:  660:{	  
    57162:  661:	while(drawntreasure<2){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    53162:  662:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
     5637:  663:			shuffle(currentPlayer, state);
call    0 returned 100%
        -:  664:		}
    53162:  665:	drawCard(currentPlayer, state);
call    0 returned 100%
    53162:  666:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    53162:  667:	if (cardDrawn == copper || cardDrawn == silver) // removed gold as part of the statement || cardDrawn == gold
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
     4000:  668:		drawntreasure++;
        -:  669:	else{
    49162:  670:		temphand[z]=cardDrawn;
    49162:  671:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    49162:  672:		z++;
        -:  673:		}
        -:  674:    }
        -:  675:    
    53162:  676:	while(z-1>=0){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    49162:  677:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    49162:  678:		z=z-1;
        -:  679:    }
     2000:  680:    return 0;
        -:  681:}
        -:  682:
function cutpurseRefact called 0 returned 0% blocks executed 0%
    #####:  683:int cutpurseRefact(int currentPlayer, struct gameState *state, int handPos, int i, int j, int k)
        -:  684:{
    #####:  685:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  686:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  687:	{
    #####:  688:	  if (i == currentPlayer)  // removed not from statement != currentPlayer
branch  0 never executed
branch  1 never executed
        -:  689:	    {
    #####:  690:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  691:		{
    #####:  692:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  693:		    {
    #####:  694:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  695:		      break;
        -:  696:		    }
    #####:  697:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  698:		    {
    #####:  699:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  700:			{
        -:  701:			  if (DEBUG)
        -:  702:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  703:			}	
    #####:  704:		      break;
        -:  705:		    }		
        -:  706:		}
        -:  707:					
        -:  708:	    }
        -:  709:				
        -:  710:	}				
        -:  711:
        -:  712:      //discard played card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  714:
    #####:  715:      return 0;
        -:  716:}
        -:  717:
function mineRefact called 0 returned 0% blocks executed 0%
    #####:  718:int mineRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  719:{
    #####:  720:		printf("refact choice2: %d\n", choice2);
call    0 never executed
    #####:  721:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  722:
    #####:  723:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  724:	{
    #####:  725:	  return -1;
        -:  726:	}
        -:  727:		
    #####:  728:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  729:	{
    #####:  730:	  return -1;
        -:  731:	}
        -:  732:
    #####:  733:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  734:	{
    #####:  735:	  return -1;
        -:  736:	}
        -:  737:
    #####:  738:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  739:
        -:  740:      //discard card from hand
    #####:  741:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  742:
        -:  743:      //discard trashed card
    #####:  744:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  745:	{
    #####:  746:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  747:	    {
    #####:  748:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  749:	      break;
        -:  750:	    }
        -:  751:	}
        -:  752:			
    #####:  753:      return 0;
        -:  754:}
        -:  755:
function minionRefact called 0 returned 0% blocks executed 0%
    #####:  756:int minionRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  757:{
        -:  758:	//+1 action
    #####:  759:	state->numActions++;
        -:  760:			
        -:  761:	//discard card from hand
    #####:  762:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  763:	
        -:  764:
        -:  765:	//reversed choices 1 & 2
    #####:  766:	if (choice2)		//+2 coins 
branch  0 never executed
branch  1 never executed
        -:  767:	{
    #####:  768:		state->coins = state->coins + 2;
        -:  769:	}
        -:  770:			
    #####:  771:    else if (choice1)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  772:	{
        -:  773:		//discard hand
    #####:  774:		while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  775:	    {
    #####:  776:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  777:	    }
        -:  778:				
        -:  779:		//draw 4
    #####:  780:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  781:	    {
    #####:  782:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  783:	    }
        -:  784:				
        -:  785:		//other players discard hand and redraw if hand size > 4
    #####:  786:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  789:			{
    #####:  790:				if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  791:				{
        -:  792:					//discard hand
    #####:  793:					while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  794:					{
    #####:  795:						discardCard(handPos, i, state, 0);
call    0 never executed
        -:  796:					}
        -:  797:							
        -:  798:					//draw 4
    #####:  799:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  800:					{
    #####:  801:						drawCard(i, state);
call    0 never executed
        -:  802:					}
        -:  803:				}
        -:  804:			}
        -:  805:	    }
        -:  806:				
        -:  807:	}
    #####:  808:		return 0;
        -:  809:}
        -:  810:
function cardEffect called 2000 returned 100% blocks executed 4%
     2000:  811:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  812:{
        -:  813:  int i;
        -:  814:  int j;
        -:  815:  int k;
        -:  816:  int x;
        -:  817:  int index;
     2000:  818:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  819:  int nextPlayer = currentPlayer + 1;
        -:  820:
     2000:  821:  int tributeRevealedCards[2] = {-1, -1};
        -:  822:  int temphand[MAX_HAND];// moved above the if statement
     2000:  823:  int drawntreasure=0;
        -:  824:  int cardDrawn;
     2000:  825:  int z = 0;// this is the counter for the temp hand
     2000:  826:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1001:  827:    nextPlayer = 0;
        -:  828:  }
        -:  829:  
        -:  830:	
        -:  831:  //uses switch to select card and perform actions
     2000:  832:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  833:    {
        -:  834:    case adventurer:
     2000:  835:		return adventurerRefact(currentPlayer, state, temphand, drawntreasure, cardDrawn, z);
call    0 returned 100%
        -:  836:	/*
        -:  837:	  while(drawntreasure<2){
        -:  838:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  839:	  shuffle(currentPlayer, state);
        -:  840:	}
        -:  841:	drawCard(currentPlayer, state);
        -:  842:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  843:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  844:	  drawntreasure++;
        -:  845:	else{
        -:  846:	  temphand[z]=cardDrawn;
        -:  847:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  848:	  z++;
        -:  849:	}
        -:  850:      }
        -:  851:      while(z-1>=0){
        -:  852:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  853:	z=z-1;
        -:  854:      }
        -:  855:      return 0;
        -:  856:	*/
        -:  857:			
        -:  858:    case council_room:
        -:  859:      //+4 Cards
    #####:  860:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  861:	{
    #####:  862:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  863:	}
        -:  864:			
        -:  865:      //+1 Buy
    #####:  866:      state->numBuys++;
        -:  867:			
        -:  868:      //Each other player draws a card
    #####:  869:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  870:	{
    #####:  871:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  872:	    {
    #####:  873:	      drawCard(i, state);
call    0 never executed
        -:  874:	    }
        -:  875:	}
        -:  876:			
        -:  877:      //put played card in played card pile
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:			
    #####:  880:      return 0;
        -:  881:			
        -:  882:    case feast:
        -:  883:      //gain card with cost up to 5
        -:  884:      //Backup hand
    #####:  885:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  886:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  887:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  888:      }
        -:  889:      //Backup hand
        -:  890:
        -:  891:      //Update Coins for Buy
    #####:  892:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  893:      x = 1;//Condition to loop on
    #####:  894:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  895:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  896:	  if (DEBUG)
        -:  897:	    printf("None of that card left, sorry!\n");
        -:  898:
        -:  899:	  if (DEBUG){
        -:  900:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  901:	  }
        -:  902:	}
    #####:  903:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  904:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  905:
        -:  906:	  if (DEBUG){
        -:  907:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  908:	  }
        -:  909:	}
        -:  910:	else{
        -:  911:
        -:  912:	  if (DEBUG){
        -:  913:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  914:	  }
        -:  915:
    #####:  916:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  917:	  x = 0;//No more buying cards
        -:  918:
        -:  919:	  if (DEBUG){
        -:  920:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  921:	  }
        -:  922:
        -:  923:	}
        -:  924:      }     
        -:  925:
        -:  926:      //Reset Hand
    #####:  927:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  928:	state->hand[currentPlayer][i] = temphand[i];
    #####:  929:	temphand[i] = -1;
        -:  930:      }
        -:  931:      //Reset Hand
        -:  932:      			
    #####:  933:      return 0;
        -:  934:			
        -:  935:    case gardens:
    #####:  936:      return -1;
        -:  937:			
        -:  938:    case mine:
    #####:  939:		return mineRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -:  940:		//return 0;
        -:  941:	/*
        -:  942:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  943:
        -:  944:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  945:	{
        -:  946:	  return -1;
        -:  947:	}
        -:  948:		
        -:  949:      if (choice2 > treasure_map || choice2 < curse)
        -:  950:	{
        -:  951:	  return -1;
        -:  952:	}
        -:  953:
        -:  954:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  955:	{
        -:  956:	  return -1;
        -:  957:	}
        -:  958:
        -:  959:      gainCard(choice2, state, 2, currentPlayer);
        -:  960:
        -:  961:      //discard card from hand
        -:  962:      discardCard(handPos, currentPlayer, state, 0);
        -:  963:
        -:  964:      //discard trashed card
        -:  965:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  966:	{
        -:  967:	  if (state->hand[currentPlayer][i] == j)
        -:  968:	    {
        -:  969:	      discardCard(i, currentPlayer, state, 0);			
        -:  970:	      break;
        -:  971:	    }
        -:  972:	}
        -:  973:			
        -:  974:      return 0;
        -:  975:	*/
        -:  976:		
        -:  977:    case remodel:
    #####:  978:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  979:
    #####:  980:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  981:	{
    #####:  982:	  return -1;
        -:  983:	}
        -:  984:
    #####:  985:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  986:
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  989:
        -:  990:      //discard trashed card
    #####:  991:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  992:	{
    #####:  993:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  994:	    {
    #####:  995:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  996:	      break;
        -:  997:	    }
        -:  998:	}
        -:  999:
        -: 1000:
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case smithy:
    #####: 1004:		return smithyRefact(currentPlayer, state, handPos, i);
call    0 never executed
        -: 1005:		
        -: 1006:    /*  //+3 Cards
        -: 1007:      for (i = 0; i < 3; i++)
        -: 1008:	{
        -: 1009:	  drawCard(currentPlayer, state);
        -: 1010:	}
        -: 1011:			
        -: 1012:      //discard card from hand
        -: 1013:      discardCard(handPos, currentPlayer, state, 0);
        -: 1014:      return 0;
        -: 1015:	 */
        -: 1016:		
        -: 1017:    case village:
        -: 1018:      //+1 Card
    #####: 1019:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1020:			
        -: 1021:      //+2 Actions
    #####: 1022:      state->numActions = state->numActions + 2;
        -: 1023:			
        -: 1024:      //discard played card from hand
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case baron:
    #####: 1029:      state->numBuys++;//Increase buys by 1!
    #####: 1030:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1031:	int p = 0;//Iterator for hand!
    #####: 1032:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1033:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1034:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1035:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1036:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1037:	    state->discardCount[currentPlayer]++;
    #####: 1038:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1039:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1040:	    }
    #####: 1041:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1042:	    state->handCount[currentPlayer]--;
    #####: 1043:	    card_not_discarded = 0;//Exit the loop
        -: 1044:	  }
    #####: 1045:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1046:	    if(DEBUG) {
        -: 1047:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1048:	      printf("Must gain an estate if there are any\n");
        -: 1049:	    }
    #####: 1050:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1051:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1052:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1053:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1054:		isGameOver(state);
call    0 never executed
        -: 1055:	      }
        -: 1056:	    }
    #####: 1057:	    card_not_discarded = 0;//Exit the loop
        -: 1058:	  }
        -: 1059:			    
        -: 1060:	  else{
    #####: 1061:	    p++;//Next card
        -: 1062:	  }
        -: 1063:	}
        -: 1064:      }
        -: 1065:			    
        -: 1066:      else{
    #####: 1067:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1068:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1069:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1070:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1071:	    isGameOver(state);
call    0 never executed
        -: 1072:	  }
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
        -: 1076:      
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case great_hall:
        -: 1080:      //+1 Card
    #####: 1081:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1082:			
        -: 1083:      //+1 Actions
    #####: 1084:      state->numActions++;
        -: 1085:			
        -: 1086:      //discard card from hand
    #####: 1087:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case minion:
    #####: 1091:		return minionRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -: 1092:	/*
        -: 1093:      //+1 action
        -: 1094:      state->numActions++;
        -: 1095:			
        -: 1096:      //discard card from hand
        -: 1097:      discardCard(handPos, currentPlayer, state, 0);
        -: 1098:			
        -: 1099:      if (choice1)		//+2 coins
        -: 1100:	{
        -: 1101:	  state->coins = state->coins + 2;
        -: 1102:	}
        -: 1103:			
        -: 1104:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1105:	{
        -: 1106:	  //discard hand
        -: 1107:	  while(numHandCards(state) > 0)
        -: 1108:	    {
        -: 1109:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1110:	    }
        -: 1111:				
        -: 1112:	  //draw 4
        -: 1113:	  for (i = 0; i < 4; i++)
        -: 1114:	    {
        -: 1115:	      drawCard(currentPlayer, state);
        -: 1116:	    }
        -: 1117:				
        -: 1118:	  //other players discard hand and redraw if hand size > 4
        -: 1119:	  for (i = 0; i < state->numPlayers; i++)
        -: 1120:	    {
        -: 1121:	      if (i != currentPlayer)
        -: 1122:		{
        -: 1123:		  if ( state->handCount[i] > 4 )
        -: 1124:		    {
        -: 1125:		      //discard hand
        -: 1126:		      while( state->handCount[i] > 0 )
        -: 1127:			{
        -: 1128:			  discardCard(handPos, i, state, 0);
        -: 1129:			}
        -: 1130:							
        -: 1131:		      //draw 4
        -: 1132:		      for (j = 0; j < 4; j++)
        -: 1133:			{
        -: 1134:			  drawCard(i, state);
        -: 1135:			}
        -: 1136:		    }
        -: 1137:		}
        -: 1138:	    }
        -: 1139:				
        -: 1140:	}
        -: 1141:      return 0;
        -: 1142:	*/
        -: 1143:	
        -: 1144:    case steward:
    #####: 1145:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1146:	{
        -: 1147:	  //+2 cards
    #####: 1148:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1149:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1150:	}
    #####: 1151:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1152:	{
        -: 1153:	  //+2 coins
    #####: 1154:	  state->coins = state->coins + 2;
        -: 1155:	}
        -: 1156:      else
        -: 1157:	{
        -: 1158:	  //trash 2 cards in hand
    #####: 1159:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1160:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1161:	}
        -: 1162:			
        -: 1163:      //discard card from hand
    #####: 1164:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1165:      return 0;
        -: 1166:		
        -: 1167:    case tribute:
    #####: 1168:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1169:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1170:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1171:	  state->deckCount[nextPlayer]--;
        -: 1172:	}
    #####: 1173:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1174:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1175:	  state->discardCount[nextPlayer]--;
        -: 1176:	}
        -: 1177:	else{
        -: 1178:	  //No Card to Reveal
        -: 1179:	  if (DEBUG){
        -: 1180:	    printf("No cards to reveal\n");
        -: 1181:	  }
        -: 1182:	}
        -: 1183:      }
        -: 1184:	    
        -: 1185:      else{
    #####: 1186:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1187:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1188:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1189:	    state->deckCount[nextPlayer]++;
    #####: 1190:	    state->discard[nextPlayer][i] = -1;
    #####: 1191:	    state->discardCount[nextPlayer]--;
        -: 1192:	  }
        -: 1193:			    
    #####: 1194:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1195:	} 
    #####: 1196:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1197:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1198:	state->deckCount[nextPlayer]--;
    #####: 1199:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1200:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1201:	state->deckCount[nextPlayer]--;
        -: 1202:      }    
        -: 1203:		       
    #####: 1204:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1205:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1206:	state->playedCardCount++;
    #####: 1207:	tributeRevealedCards[1] = -1;
        -: 1208:      }
        -: 1209:
    #####: 1210:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1211:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1212:	  state->coins += 2;
        -: 1213:	}
        -: 1214:		    
    #####: 1215:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1216:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1217:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1218:	}
        -: 1219:	else{//Action Card
    #####: 1220:	  state->numActions = state->numActions + 2;
        -: 1221:	}
        -: 1222:      }
        -: 1223:	    
    #####: 1224:      return 0;
        -: 1225:		
        -: 1226:    case ambassador:
    #####: 1227:      j = 0;		//used to check if player has enough cards to discard
        -: 1228:
    #####: 1229:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1230:	{
    #####: 1231:	  return -1;				
        -: 1232:	}
        -: 1233:
    #####: 1234:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1235:	{
    #####: 1236:	  return -1;
        -: 1237:	}
        -: 1238:
    #####: 1239:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1240:	{
    #####: 1241:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1242:	    {
    #####: 1243:	      j++;
        -: 1244:	    }
        -: 1245:	}
    #####: 1246:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1247:	{
    #####: 1248:	  return -1;				
        -: 1249:	}
        -: 1250:
        -: 1251:      if (DEBUG) 
        -: 1252:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1253:
        -: 1254:      //increase supply count for choosen card by amount being discarded
    #####: 1255:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1256:			
        -: 1257:      //each other player gains a copy of revealed card
    #####: 1258:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1259:	{
    #####: 1260:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1261:	    {
    #####: 1262:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1263:	    }
        -: 1264:	}
        -: 1265:
        -: 1266:      //discard played card from hand
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1268:
        -: 1269:      //trash copies of cards returned to supply
    #####: 1270:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1271:	{
    #####: 1272:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1273:	    {
    #####: 1274:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1275:		{
    #####: 1276:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1277:		  break;
        -: 1278:		}
        -: 1279:	    }
        -: 1280:	}			
        -: 1281:
    #####: 1282:      return 0;
        -: 1283:		
        -: 1284:    case cutpurse:
    #####: 1285:		cutpurseRefact(currentPlayer, state, handPos, i, j, k);
call    0 never executed
        -: 1286:	/*
        -: 1287:      updateCoins(currentPlayer, state, 2);
        -: 1288:      for (i = 0; i < state->numPlayers; i++)
        -: 1289:	{
        -: 1290:	  if (i != currentPlayer)
        -: 1291:	    {
        -: 1292:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1293:		{
        -: 1294:		  if (state->hand[i][j] == copper)
        -: 1295:		    {
        -: 1296:		      discardCard(j, i, state, 0);
        -: 1297:		      break;
        -: 1298:		    }
        -: 1299:		  if (j == state->handCount[i])
        -: 1300:		    {
        -: 1301:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1302:			{
        -: 1303:			  if (DEBUG)
        -: 1304:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1305:			}	
        -: 1306:		      break;
        -: 1307:		    }		
        -: 1308:		}
        -: 1309:					
        -: 1310:	    }
        -: 1311:				
        -: 1312:	}				
        -: 1313:
        -: 1314:      //discard played card from hand
        -: 1315:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1316:
        -: 1317:      return 0;
        -: 1318:	*/
        -: 1319:		
        -: 1320:    case embargo: 
        -: 1321:      //+2 Coins
    #####: 1322:      state->coins = state->coins + 2;
        -: 1323:			
        -: 1324:      //see if selected pile is in play
    #####: 1325:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1326:	{
    #####: 1327:	  return -1;
        -: 1328:	}
        -: 1329:			
        -: 1330:      //add embargo token to selected supply pile
    #####: 1331:      state->embargoTokens[choice1]++;
        -: 1332:			
        -: 1333:      //trash card
    #####: 1334:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1335:      return 0;
        -: 1336:		
        -: 1337:    case outpost:
        -: 1338:      //set outpost flag
    #####: 1339:      state->outpostPlayed++;
        -: 1340:			
        -: 1341:      //discard card
    #####: 1342:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1343:      return 0;
        -: 1344:		
        -: 1345:    case salvager:
        -: 1346:      //+1 buy
    #####: 1347:      state->numBuys++;
        -: 1348:			
    #####: 1349:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1350:	{
        -: 1351:	  //gain coins equal to trashed card
    #####: 1352:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1353:	  //trash card
    #####: 1354:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1355:	}
        -: 1356:			
        -: 1357:      //discard card
    #####: 1358:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1359:      return 0;
        -: 1360:		
        -: 1361:    case sea_hag:
    #####: 1362:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1363:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1364:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1365:	  state->discardCount[i]++;
    #####: 1366:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1367:	}
        -: 1368:      }
    #####: 1369:      return 0;
        -: 1370:		
        -: 1371:    case treasure_map:
        -: 1372:      //search hand for another treasure_map
    #####: 1373:      index = -1;
    #####: 1374:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1375:	{
    #####: 1376:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1377:	    {
    #####: 1378:	      index = i;
    #####: 1379:	      break;
        -: 1380:	    }
        -: 1381:	}
    #####: 1382:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1383:	{
        -: 1384:	  //trash both treasure cards
    #####: 1385:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1386:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1387:
        -: 1388:	  //gain 4 Gold cards
    #####: 1389:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1390:	    {
    #####: 1391:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1392:	    }
        -: 1393:				
        -: 1394:	  //return success
    #####: 1395:	  return 1;
        -: 1396:	}
        -: 1397:			
        -: 1398:      //no second treasure_map found in hand
    #####: 1399:      return -1;
        -: 1400:    }
        -: 1401:	
    #####: 1402:  return -1;
        -: 1403:}
        -: 1404:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1405:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1406:{
        -: 1407:  //if card is not trashed, added to Played pile 
    #####: 1408:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1409:    {
        -: 1410:      //add card to played pile
    #####: 1411:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1412:      state->playedCardCount++;
        -: 1413:    }
        -: 1414:  //set played card to -1
    #####: 1415:  state->hand[currentPlayer][handPos] = -1;
        -: 1416:	
        -: 1417:  //remove card from player's hand
    #####: 1418:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1419:    {
        -: 1420:      //reduce number of cards in hand
    #####: 1421:      state->handCount[currentPlayer]--;
        -: 1422:    }
    #####: 1423:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1424:    {
        -: 1425:      //reduce number of cards in hand
    #####: 1426:      state->handCount[currentPlayer]--;
        -: 1427:    }
        -: 1428:  else 	
        -: 1429:    {
        -: 1430:      //replace discarded card with last card in hand
    #####: 1431:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1432:      //set last card to -1
    #####: 1433:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1434:      //reduce number of cards in hand
    #####: 1435:      state->handCount[currentPlayer]--;
        -: 1436:    }
        -: 1437:	
    #####: 1438:  return 0;
        -: 1439:}
        -: 1440:
function gainCard called 2000 returned 100% blocks executed 70%
     2000: 1441:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1442:{
        -: 1443:  //Note: supplyPos is enum of choosen card
        -: 1444:	
        -: 1445:  //check if supply pile is empty (0) or card is not used in game (-1)
     2000: 1446:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1447:    {
    #####: 1448:      return -1;
        -: 1449:    }
        -: 1450:	
        -: 1451:  //added card for [whoseTurn] current player:
        -: 1452:  // toFlag = 0 : add to discard
        -: 1453:  // toFlag = 1 : add to deck
        -: 1454:  // toFlag = 2 : add to hand
        -: 1455:
     2000: 1456:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1457:    {
    #####: 1458:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1459:      state->deckCount[player]++;
        -: 1460:    }
     2000: 1461:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1462:    {
     2000: 1463:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     2000: 1464:      state->handCount[player]++;
        -: 1465:    }
        -: 1466:  else
        -: 1467:    {
    #####: 1468:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1469:      state->discardCount[player]++;
        -: 1470:    }
        -: 1471:	
        -: 1472:  //decrease number in supply pile
     2000: 1473:  state->supplyCount[supplyPos]--;
        -: 1474:	 
     2000: 1475:  return 0;
        -: 1476:}
        -: 1477:
function updateCoins called 4000 returned 100% blocks executed 100%
     4000: 1478:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1479:{
        -: 1480:  int i;
        -: 1481:	
        -: 1482:  //reset coin count
     4000: 1483:  state->coins = 0;
        -: 1484:  
        -: 1485:  //add coins for each Treasure card in player's hand
   494696: 1486:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1487:    {
   490696: 1488:      if (state->hand[player][i] == copper)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1489:	{
    27611: 1490:	  state->coins += 1;
        -: 1491:	}
   463085: 1492:      else if (state->hand[player][i] == silver)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1493:	{
    20994: 1494:	  state->coins += 2;
        -: 1495:	}
   442091: 1496:      else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1497:	{
    17304: 1498:	  state->coins += 3;
        -: 1499:	}	
        -: 1500:    }	
        -: 1501:
        -: 1502:  //add bonus
     4000: 1503:  state->coins += bonus;
        -: 1504:
     4000: 1505:  return 0;
        -: 1506:}
        -: 1507:
        -: 1508:
        -: 1509://end of dominion.c
        -: 1510:
File 'dominion.c'
Lines executed:28.21% of 560
Branches executed:29.16% of 415
Taken at least once:20.24% of 415
Calls executed:18.56% of 97
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 69750 returned 100% blocks executed 83%
    69750:    8:int compare(const void* a, const void* b) {
    69750:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    69750:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    18600:   12:    return -1;
    51150:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2000 returned 100% blocks executed 94%
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
call    0 returned 100%
     2000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   220000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   200000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2000:   73:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   74:    {
     1350:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      650:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
      650:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2000:   87:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   88:    {
     1350:   89:      state->supplyCount[estate] = 8;
     1350:   90:      state->supplyCount[duchy] = 8;
     1350:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      650:   95:      state->supplyCount[estate] = 12;
      650:   96:      state->supplyCount[duchy] = 12;
      650:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  102:  state->supplyCount[silver] = 40;
     2000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   330000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   310000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
     1350:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      650:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    18000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    20000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   290000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     6650:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
     4650:  140:      state->deckCount[i] = 0;
    18600:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    13950:  143:	  state->deck[i][j] = estate;
    13950:  144:	  state->deckCount[i]++;
        -:  145:	}
    37200:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    32550:  148:	  state->deck[i][j] = copper;
    32550:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     6650:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
     4650:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     6650:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     4650:  166:      state->handCount[i] = 0;
     4650:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    54000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2000:  182:  state->outpostPlayed = 0;
     2000:  183:  state->phase = 0;
     2000:  184:  state->numActions = 1;
     2000:  185:  state->numBuys = 1;
     2000:  186:  state->playedCardCount = 0;
     2000:  187:  state->whoseTurn = 0;
     2000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     2000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     2000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 15924 returned 100% blocks executed 100%
    15924:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    15924:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    15924:  209:  if (state->deckCount[player] < 1)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
    11274:  210:    return -1;
     4650:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    55800:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    46500:  216:    newDeck[newDeckPos] = state->deck[player][card];
    46500:  217:    newDeckPos++;
   162278:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
   115778:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    46500:  221:    state->deckCount[player]--;
        -:  222:  }
    51150:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  224:    state->deck[player][i] = newDeck[i];
    46500:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     4650:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 2000 returned 100% blocks executed 73%
     2000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     2000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     2000:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     2000:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     2000:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
     2000:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     2000:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
     2000:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
     2000:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
     2000:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 2000 returned 100% blocks executed 100%
     2000:  315:int handCard(int handPos, struct gameState *state) {
     2000:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2000 returned 100% blocks executed 100%
     2000:  320:int supplyCount(int card, struct gameState *state) {
     2000:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4000 returned 100% blocks executed 100%
     4000:  346:int whoseTurn(struct gameState *state) {
     4000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 63162 returned 100% blocks executed 85%
    63162:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    63162:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     5637:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     5637:  538:    state->deckCount[player] = state->discardCount[player];
     5637:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5637:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5637:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5637:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5637:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5637:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     5637:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    57525:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    57525:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    57525:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    57525:  576:    state->deckCount[player]--;
    57525:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    57525:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function smithyRefact called 0 returned 0% blocks executed 0%
    #####:  646:int smithyRefact(int currentPlayer, struct gameState *state, int handPos, int i)
        -:  647:{
        -:  648:	//+3 Cards
    #####:  649:      for (i = 0; i < 5; i++) // changed from 3 cards to 5
branch  0 never executed
branch  1 never executed
        -:  650:	{
    #####:  651:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  652:	}
        -:  653:			
        -:  654:      //discard card from hand
    #####:  655:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  656:      return 0;
        -:  657:}
        -:  658:
function adventurerRefact called 2000 returned 100% blocks executed 100%
     2000:  659:int adventurerRefact(int currentPlayer, struct gameState *state, int temphand[], int drawntreasure, int cardDrawn, int z)
        -:  660:{	  
    57162:  661:	while(drawntreasure<2){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    53162:  662:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
     5637:  663:			shuffle(currentPlayer, state);
call    0 returned 100%
        -:  664:		}
    53162:  665:	drawCard(currentPlayer, state);
call    0 returned 100%
    53162:  666:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    53162:  667:	if (cardDrawn == copper || cardDrawn == silver) // removed gold as part of the statement || cardDrawn == gold
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
     4000:  668:		drawntreasure++;
        -:  669:	else{
    49162:  670:		temphand[z]=cardDrawn;
    49162:  671:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    49162:  672:		z++;
        -:  673:		}
        -:  674:    }
        -:  675:    
    53162:  676:	while(z-1>=0){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    49162:  677:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    49162:  678:		z=z-1;
        -:  679:    }
     2000:  680:    return 0;
        -:  681:}
        -:  682:
function cutpurseRefact called 0 returned 0% blocks executed 0%
    #####:  683:int cutpurseRefact(int currentPlayer, struct gameState *state, int handPos, int i, int j, int k)
        -:  684:{
    #####:  685:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  686:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  687:	{
    #####:  688:	  if (i == currentPlayer)  // removed not from statement != currentPlayer
branch  0 never executed
branch  1 never executed
        -:  689:	    {
    #####:  690:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  691:		{
    #####:  692:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  693:		    {
    #####:  694:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  695:		      break;
        -:  696:		    }
    #####:  697:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  698:		    {
    #####:  699:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  700:			{
        -:  701:			  if (DEBUG)
        -:  702:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  703:			}	
    #####:  704:		      break;
        -:  705:		    }		
        -:  706:		}
        -:  707:					
        -:  708:	    }
        -:  709:				
        -:  710:	}				
        -:  711:
        -:  712:      //discard played card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  714:
    #####:  715:      return 0;
        -:  716:}
        -:  717:
function mineRefact called 0 returned 0% blocks executed 0%
    #####:  718:int mineRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  719:{
    #####:  720:		printf("refact choice2: %d\n", choice2);
call    0 never executed
    #####:  721:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  722:
    #####:  723:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  724:	{
    #####:  725:	  return -1;
        -:  726:	}
        -:  727:		
    #####:  728:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  729:	{
    #####:  730:	  return -1;
        -:  731:	}
        -:  732:
    #####:  733:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  734:	{
    #####:  735:	  return -1;
        -:  736:	}
        -:  737:
    #####:  738:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  739:
        -:  740:      //discard card from hand
    #####:  741:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  742:
        -:  743:      //discard trashed card
    #####:  744:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  745:	{
    #####:  746:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  747:	    {
    #####:  748:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  749:	      break;
        -:  750:	    }
        -:  751:	}
        -:  752:			
    #####:  753:      return 0;
        -:  754:}
        -:  755:
function minionRefact called 0 returned 0% blocks executed 0%
    #####:  756:int minionRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  757:{
        -:  758:	//+1 action
    #####:  759:	state->numActions++;
        -:  760:			
        -:  761:	//discard card from hand
    #####:  762:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  763:	
        -:  764:
        -:  765:	//reversed choices 1 & 2
    #####:  766:	if (choice2)		//+2 coins 
branch  0 never executed
branch  1 never executed
        -:  767:	{
    #####:  768:		state->coins = state->coins + 2;
        -:  769:	}
        -:  770:			
    #####:  771:    else if (choice1)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  772:	{
        -:  773:		//discard hand
    #####:  774:		while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  775:	    {
    #####:  776:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  777:	    }
        -:  778:				
        -:  779:		//draw 4
    #####:  780:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  781:	    {
    #####:  782:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  783:	    }
        -:  784:				
        -:  785:		//other players discard hand and redraw if hand size > 4
    #####:  786:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  789:			{
    #####:  790:				if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  791:				{
        -:  792:					//discard hand
    #####:  793:					while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  794:					{
    #####:  795:						discardCard(handPos, i, state, 0);
call    0 never executed
        -:  796:					}
        -:  797:							
        -:  798:					//draw 4
    #####:  799:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  800:					{
    #####:  801:						drawCard(i, state);
call    0 never executed
        -:  802:					}
        -:  803:				}
        -:  804:			}
        -:  805:	    }
        -:  806:				
        -:  807:	}
    #####:  808:		return 0;
        -:  809:}
        -:  810:
function cardEffect called 2000 returned 100% blocks executed 4%
     2000:  811:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  812:{
        -:  813:  int i;
        -:  814:  int j;
        -:  815:  int k;
        -:  816:  int x;
        -:  817:  int index;
     2000:  818:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  819:  int nextPlayer = currentPlayer + 1;
        -:  820:
     2000:  821:  int tributeRevealedCards[2] = {-1, -1};
        -:  822:  int temphand[MAX_HAND];// moved above the if statement
     2000:  823:  int drawntreasure=0;
        -:  824:  int cardDrawn;
     2000:  825:  int z = 0;// this is the counter for the temp hand
     2000:  826:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1001:  827:    nextPlayer = 0;
        -:  828:  }
        -:  829:  
        -:  830:	
        -:  831:  //uses switch to select card and perform actions
     2000:  832:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  833:    {
        -:  834:    case adventurer:
     2000:  835:		return adventurerRefact(currentPlayer, state, temphand, drawntreasure, cardDrawn, z);
call    0 returned 100%
        -:  836:	/*
        -:  837:	  while(drawntreasure<2){
        -:  838:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  839:	  shuffle(currentPlayer, state);
        -:  840:	}
        -:  841:	drawCard(currentPlayer, state);
        -:  842:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  843:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  844:	  drawntreasure++;
        -:  845:	else{
        -:  846:	  temphand[z]=cardDrawn;
        -:  847:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  848:	  z++;
        -:  849:	}
        -:  850:      }
        -:  851:      while(z-1>=0){
        -:  852:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  853:	z=z-1;
        -:  854:      }
        -:  855:      return 0;
        -:  856:	*/
        -:  857:			
        -:  858:    case council_room:
        -:  859:      //+4 Cards
    #####:  860:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  861:	{
    #####:  862:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  863:	}
        -:  864:			
        -:  865:      //+1 Buy
    #####:  866:      state->numBuys++;
        -:  867:			
        -:  868:      //Each other player draws a card
    #####:  869:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  870:	{
    #####:  871:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  872:	    {
    #####:  873:	      drawCard(i, state);
call    0 never executed
        -:  874:	    }
        -:  875:	}
        -:  876:			
        -:  877:      //put played card in played card pile
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:			
    #####:  880:      return 0;
        -:  881:			
        -:  882:    case feast:
        -:  883:      //gain card with cost up to 5
        -:  884:      //Backup hand
    #####:  885:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  886:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  887:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  888:      }
        -:  889:      //Backup hand
        -:  890:
        -:  891:      //Update Coins for Buy
    #####:  892:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  893:      x = 1;//Condition to loop on
    #####:  894:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  895:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  896:	  if (DEBUG)
        -:  897:	    printf("None of that card left, sorry!\n");
        -:  898:
        -:  899:	  if (DEBUG){
        -:  900:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  901:	  }
        -:  902:	}
    #####:  903:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  904:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  905:
        -:  906:	  if (DEBUG){
        -:  907:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  908:	  }
        -:  909:	}
        -:  910:	else{
        -:  911:
        -:  912:	  if (DEBUG){
        -:  913:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  914:	  }
        -:  915:
    #####:  916:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  917:	  x = 0;//No more buying cards
        -:  918:
        -:  919:	  if (DEBUG){
        -:  920:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  921:	  }
        -:  922:
        -:  923:	}
        -:  924:      }     
        -:  925:
        -:  926:      //Reset Hand
    #####:  927:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  928:	state->hand[currentPlayer][i] = temphand[i];
    #####:  929:	temphand[i] = -1;
        -:  930:      }
        -:  931:      //Reset Hand
        -:  932:      			
    #####:  933:      return 0;
        -:  934:			
        -:  935:    case gardens:
    #####:  936:      return -1;
        -:  937:			
        -:  938:    case mine:
    #####:  939:		return mineRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -:  940:		//return 0;
        -:  941:	/*
        -:  942:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  943:
        -:  944:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  945:	{
        -:  946:	  return -1;
        -:  947:	}
        -:  948:		
        -:  949:      if (choice2 > treasure_map || choice2 < curse)
        -:  950:	{
        -:  951:	  return -1;
        -:  952:	}
        -:  953:
        -:  954:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  955:	{
        -:  956:	  return -1;
        -:  957:	}
        -:  958:
        -:  959:      gainCard(choice2, state, 2, currentPlayer);
        -:  960:
        -:  961:      //discard card from hand
        -:  962:      discardCard(handPos, currentPlayer, state, 0);
        -:  963:
        -:  964:      //discard trashed card
        -:  965:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  966:	{
        -:  967:	  if (state->hand[currentPlayer][i] == j)
        -:  968:	    {
        -:  969:	      discardCard(i, currentPlayer, state, 0);			
        -:  970:	      break;
        -:  971:	    }
        -:  972:	}
        -:  973:			
        -:  974:      return 0;
        -:  975:	*/
        -:  976:		
        -:  977:    case remodel:
    #####:  978:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  979:
    #####:  980:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  981:	{
    #####:  982:	  return -1;
        -:  983:	}
        -:  984:
    #####:  985:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  986:
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  989:
        -:  990:      //discard trashed card
    #####:  991:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  992:	{
    #####:  993:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  994:	    {
    #####:  995:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  996:	      break;
        -:  997:	    }
        -:  998:	}
        -:  999:
        -: 1000:
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case smithy:
    #####: 1004:		return smithyRefact(currentPlayer, state, handPos, i);
call    0 never executed
        -: 1005:		
        -: 1006:    /*  //+3 Cards
        -: 1007:      for (i = 0; i < 3; i++)
        -: 1008:	{
        -: 1009:	  drawCard(currentPlayer, state);
        -: 1010:	}
        -: 1011:			
        -: 1012:      //discard card from hand
        -: 1013:      discardCard(handPos, currentPlayer, state, 0);
        -: 1014:      return 0;
        -: 1015:	 */
        -: 1016:		
        -: 1017:    case village:
        -: 1018:      //+1 Card
    #####: 1019:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1020:			
        -: 1021:      //+2 Actions
    #####: 1022:      state->numActions = state->numActions + 2;
        -: 1023:			
        -: 1024:      //discard played card from hand
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case baron:
    #####: 1029:      state->numBuys++;//Increase buys by 1!
    #####: 1030:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1031:	int p = 0;//Iterator for hand!
    #####: 1032:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1033:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1034:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1035:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1036:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1037:	    state->discardCount[currentPlayer]++;
    #####: 1038:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1039:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1040:	    }
    #####: 1041:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1042:	    state->handCount[currentPlayer]--;
    #####: 1043:	    card_not_discarded = 0;//Exit the loop
        -: 1044:	  }
    #####: 1045:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1046:	    if(DEBUG) {
        -: 1047:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1048:	      printf("Must gain an estate if there are any\n");
        -: 1049:	    }
    #####: 1050:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1051:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1052:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1053:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1054:		isGameOver(state);
call    0 never executed
        -: 1055:	      }
        -: 1056:	    }
    #####: 1057:	    card_not_discarded = 0;//Exit the loop
        -: 1058:	  }
        -: 1059:			    
        -: 1060:	  else{
    #####: 1061:	    p++;//Next card
        -: 1062:	  }
        -: 1063:	}
        -: 1064:      }
        -: 1065:			    
        -: 1066:      else{
    #####: 1067:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1068:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1069:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1070:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1071:	    isGameOver(state);
call    0 never executed
        -: 1072:	  }
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
        -: 1076:      
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case great_hall:
        -: 1080:      //+1 Card
    #####: 1081:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1082:			
        -: 1083:      //+1 Actions
    #####: 1084:      state->numActions++;
        -: 1085:			
        -: 1086:      //discard card from hand
    #####: 1087:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case minion:
    #####: 1091:		return minionRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -: 1092:	/*
        -: 1093:      //+1 action
        -: 1094:      state->numActions++;
        -: 1095:			
        -: 1096:      //discard card from hand
        -: 1097:      discardCard(handPos, currentPlayer, state, 0);
        -: 1098:			
        -: 1099:      if (choice1)		//+2 coins
        -: 1100:	{
        -: 1101:	  state->coins = state->coins + 2;
        -: 1102:	}
        -: 1103:			
        -: 1104:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1105:	{
        -: 1106:	  //discard hand
        -: 1107:	  while(numHandCards(state) > 0)
        -: 1108:	    {
        -: 1109:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1110:	    }
        -: 1111:				
        -: 1112:	  //draw 4
        -: 1113:	  for (i = 0; i < 4; i++)
        -: 1114:	    {
        -: 1115:	      drawCard(currentPlayer, state);
        -: 1116:	    }
        -: 1117:				
        -: 1118:	  //other players discard hand and redraw if hand size > 4
        -: 1119:	  for (i = 0; i < state->numPlayers; i++)
        -: 1120:	    {
        -: 1121:	      if (i != currentPlayer)
        -: 1122:		{
        -: 1123:		  if ( state->handCount[i] > 4 )
        -: 1124:		    {
        -: 1125:		      //discard hand
        -: 1126:		      while( state->handCount[i] > 0 )
        -: 1127:			{
        -: 1128:			  discardCard(handPos, i, state, 0);
        -: 1129:			}
        -: 1130:							
        -: 1131:		      //draw 4
        -: 1132:		      for (j = 0; j < 4; j++)
        -: 1133:			{
        -: 1134:			  drawCard(i, state);
        -: 1135:			}
        -: 1136:		    }
        -: 1137:		}
        -: 1138:	    }
        -: 1139:				
        -: 1140:	}
        -: 1141:      return 0;
        -: 1142:	*/
        -: 1143:	
        -: 1144:    case steward:
    #####: 1145:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1146:	{
        -: 1147:	  //+2 cards
    #####: 1148:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1149:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1150:	}
    #####: 1151:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1152:	{
        -: 1153:	  //+2 coins
    #####: 1154:	  state->coins = state->coins + 2;
        -: 1155:	}
        -: 1156:      else
        -: 1157:	{
        -: 1158:	  //trash 2 cards in hand
    #####: 1159:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1160:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1161:	}
        -: 1162:			
        -: 1163:      //discard card from hand
    #####: 1164:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1165:      return 0;
        -: 1166:		
        -: 1167:    case tribute:
    #####: 1168:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1169:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1170:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1171:	  state->deckCount[nextPlayer]--;
        -: 1172:	}
    #####: 1173:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1174:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1175:	  state->discardCount[nextPlayer]--;
        -: 1176:	}
        -: 1177:	else{
        -: 1178:	  //No Card to Reveal
        -: 1179:	  if (DEBUG){
        -: 1180:	    printf("No cards to reveal\n");
        -: 1181:	  }
        -: 1182:	}
        -: 1183:      }
        -: 1184:	    
        -: 1185:      else{
    #####: 1186:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1187:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1188:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1189:	    state->deckCount[nextPlayer]++;
    #####: 1190:	    state->discard[nextPlayer][i] = -1;
    #####: 1191:	    state->discardCount[nextPlayer]--;
        -: 1192:	  }
        -: 1193:			    
    #####: 1194:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1195:	} 
    #####: 1196:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1197:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1198:	state->deckCount[nextPlayer]--;
    #####: 1199:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1200:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1201:	state->deckCount[nextPlayer]--;
        -: 1202:      }    
        -: 1203:		       
    #####: 1204:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1205:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1206:	state->playedCardCount++;
    #####: 1207:	tributeRevealedCards[1] = -1;
        -: 1208:      }
        -: 1209:
    #####: 1210:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1211:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1212:	  state->coins += 2;
        -: 1213:	}
        -: 1214:		    
    #####: 1215:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1216:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1217:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1218:	}
        -: 1219:	else{//Action Card
    #####: 1220:	  state->numActions = state->numActions + 2;
        -: 1221:	}
        -: 1222:      }
        -: 1223:	    
    #####: 1224:      return 0;
        -: 1225:		
        -: 1226:    case ambassador:
    #####: 1227:      j = 0;		//used to check if player has enough cards to discard
        -: 1228:
    #####: 1229:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1230:	{
    #####: 1231:	  return -1;				
        -: 1232:	}
        -: 1233:
    #####: 1234:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1235:	{
    #####: 1236:	  return -1;
        -: 1237:	}
        -: 1238:
    #####: 1239:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1240:	{
    #####: 1241:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1242:	    {
    #####: 1243:	      j++;
        -: 1244:	    }
        -: 1245:	}
    #####: 1246:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1247:	{
    #####: 1248:	  return -1;				
        -: 1249:	}
        -: 1250:
        -: 1251:      if (DEBUG) 
        -: 1252:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1253:
        -: 1254:      //increase supply count for choosen card by amount being discarded
    #####: 1255:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1256:			
        -: 1257:      //each other player gains a copy of revealed card
    #####: 1258:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1259:	{
    #####: 1260:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1261:	    {
    #####: 1262:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1263:	    }
        -: 1264:	}
        -: 1265:
        -: 1266:      //discard played card from hand
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1268:
        -: 1269:      //trash copies of cards returned to supply
    #####: 1270:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1271:	{
    #####: 1272:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1273:	    {
    #####: 1274:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1275:		{
    #####: 1276:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1277:		  break;
        -: 1278:		}
        -: 1279:	    }
        -: 1280:	}			
        -: 1281:
    #####: 1282:      return 0;
        -: 1283:		
        -: 1284:    case cutpurse:
    #####: 1285:		cutpurseRefact(currentPlayer, state, handPos, i, j, k);
call    0 never executed
        -: 1286:	/*
        -: 1287:      updateCoins(currentPlayer, state, 2);
        -: 1288:      for (i = 0; i < state->numPlayers; i++)
        -: 1289:	{
        -: 1290:	  if (i != currentPlayer)
        -: 1291:	    {
        -: 1292:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1293:		{
        -: 1294:		  if (state->hand[i][j] == copper)
        -: 1295:		    {
        -: 1296:		      discardCard(j, i, state, 0);
        -: 1297:		      break;
        -: 1298:		    }
        -: 1299:		  if (j == state->handCount[i])
        -: 1300:		    {
        -: 1301:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1302:			{
        -: 1303:			  if (DEBUG)
        -: 1304:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1305:			}	
        -: 1306:		      break;
        -: 1307:		    }		
        -: 1308:		}
        -: 1309:					
        -: 1310:	    }
        -: 1311:				
        -: 1312:	}				
        -: 1313:
        -: 1314:      //discard played card from hand
        -: 1315:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1316:
        -: 1317:      return 0;
        -: 1318:	*/
        -: 1319:		
        -: 1320:    case embargo: 
        -: 1321:      //+2 Coins
    #####: 1322:      state->coins = state->coins + 2;
        -: 1323:			
        -: 1324:      //see if selected pile is in play
    #####: 1325:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1326:	{
    #####: 1327:	  return -1;
        -: 1328:	}
        -: 1329:			
        -: 1330:      //add embargo token to selected supply pile
    #####: 1331:      state->embargoTokens[choice1]++;
        -: 1332:			
        -: 1333:      //trash card
    #####: 1334:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1335:      return 0;
        -: 1336:		
        -: 1337:    case outpost:
        -: 1338:      //set outpost flag
    #####: 1339:      state->outpostPlayed++;
        -: 1340:			
        -: 1341:      //discard card
    #####: 1342:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1343:      return 0;
        -: 1344:		
        -: 1345:    case salvager:
        -: 1346:      //+1 buy
    #####: 1347:      state->numBuys++;
        -: 1348:			
    #####: 1349:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1350:	{
        -: 1351:	  //gain coins equal to trashed card
    #####: 1352:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1353:	  //trash card
    #####: 1354:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1355:	}
        -: 1356:			
        -: 1357:      //discard card
    #####: 1358:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1359:      return 0;
        -: 1360:		
        -: 1361:    case sea_hag:
    #####: 1362:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1363:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1364:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1365:	  state->discardCount[i]++;
    #####: 1366:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1367:	}
        -: 1368:      }
    #####: 1369:      return 0;
        -: 1370:		
        -: 1371:    case treasure_map:
        -: 1372:      //search hand for another treasure_map
    #####: 1373:      index = -1;
    #####: 1374:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1375:	{
    #####: 1376:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1377:	    {
    #####: 1378:	      index = i;
    #####: 1379:	      break;
        -: 1380:	    }
        -: 1381:	}
    #####: 1382:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1383:	{
        -: 1384:	  //trash both treasure cards
    #####: 1385:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1386:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1387:
        -: 1388:	  //gain 4 Gold cards
    #####: 1389:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1390:	    {
    #####: 1391:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1392:	    }
        -: 1393:				
        -: 1394:	  //return success
    #####: 1395:	  return 1;
        -: 1396:	}
        -: 1397:			
        -: 1398:      //no second treasure_map found in hand
    #####: 1399:      return -1;
        -: 1400:    }
        -: 1401:	
    #####: 1402:  return -1;
        -: 1403:}
        -: 1404:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1405:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1406:{
        -: 1407:  //if card is not trashed, added to Played pile 
    #####: 1408:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1409:    {
        -: 1410:      //add card to played pile
    #####: 1411:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1412:      state->playedCardCount++;
        -: 1413:    }
        -: 1414:  //set played card to -1
    #####: 1415:  state->hand[currentPlayer][handPos] = -1;
        -: 1416:	
        -: 1417:  //remove card from player's hand
    #####: 1418:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1419:    {
        -: 1420:      //reduce number of cards in hand
    #####: 1421:      state->handCount[currentPlayer]--;
        -: 1422:    }
    #####: 1423:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1424:    {
        -: 1425:      //reduce number of cards in hand
    #####: 1426:      state->handCount[currentPlayer]--;
        -: 1427:    }
        -: 1428:  else 	
        -: 1429:    {
        -: 1430:      //replace discarded card with last card in hand
    #####: 1431:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1432:      //set last card to -1
    #####: 1433:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1434:      //reduce number of cards in hand
    #####: 1435:      state->handCount[currentPlayer]--;
        -: 1436:    }
        -: 1437:	
    #####: 1438:  return 0;
        -: 1439:}
        -: 1440:
function gainCard called 2000 returned 100% blocks executed 73%
     2000: 1441:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1442:{
        -: 1443:  //Note: supplyPos is enum of choosen card
        -: 1444:	
        -: 1445:  //check if supply pile is empty (0) or card is not used in game (-1)
     2000: 1446:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1447:    {
    #####: 1448:      return -1;
        -: 1449:    }
        -: 1450:	
        -: 1451:  //added card for [whoseTurn] current player:
        -: 1452:  // toFlag = 0 : add to discard
        -: 1453:  // toFlag = 1 : add to deck
        -: 1454:  // toFlag = 2 : add to hand
        -: 1455:
     2000: 1456:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1457:    {
    #####: 1458:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1459:      state->deckCount[player]++;
        -: 1460:    }
     2000: 1461:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1462:    {
     2000: 1463:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     2000: 1464:	  printf("gainCard Card: %d\n", state->hand[ player ][ state->handCount[player] ]);
call    0 returned 100%
     2000: 1465:      state->handCount[player]++;
        -: 1466:    }
        -: 1467:  else
        -: 1468:    {
    #####: 1469:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1470:      state->discardCount[player]++;
        -: 1471:    }
        -: 1472:	
        -: 1473:  //decrease number in supply pile
     2000: 1474:  state->supplyCount[supplyPos]--;
        -: 1475:	 
     2000: 1476:  return 0;
        -: 1477:}
        -: 1478:
function updateCoins called 4000 returned 100% blocks executed 100%
     4000: 1479:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1480:{
        -: 1481:  int i;
        -: 1482:	
        -: 1483:  //reset coin count
     4000: 1484:  state->coins = 0;
        -: 1485:  
        -: 1486:  //add coins for each Treasure card in player's hand
   494696: 1487:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1488:    {
   490696: 1489:      if (state->hand[player][i] == copper)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1490:	{
    27611: 1491:	  state->coins += 1;
        -: 1492:	}
   463085: 1493:      else if (state->hand[player][i] == silver)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1494:	{
    20994: 1495:	  state->coins += 2;
        -: 1496:	}
   442091: 1497:      else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1498:	{
    17304: 1499:	  state->coins += 3;
        -: 1500:	}	
        -: 1501:    }	
        -: 1502:
        -: 1503:  //add bonus
     4000: 1504:  state->coins += bonus;
        -: 1505:
     4000: 1506:  return 0;
        -: 1507:}
        -: 1508:
        -: 1509:
        -: 1510://end of dominion.c
        -: 1511:
File 'dominion.c'
Lines executed:28.21% of 560
Branches executed:29.16% of 415
Taken at least once:20.24% of 415
Calls executed:18.56% of 97
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 69750 returned 100% blocks executed 83%
    69750:    8:int compare(const void* a, const void* b) {
    69750:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    69750:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    18600:   12:    return -1;
    51150:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2000 returned 100% blocks executed 94%
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
call    0 returned 100%
     2000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   220000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   200000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2000:   73:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   74:    {
     1350:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      650:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
      650:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2000:   87:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   88:    {
     1350:   89:      state->supplyCount[estate] = 8;
     1350:   90:      state->supplyCount[duchy] = 8;
     1350:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      650:   95:      state->supplyCount[estate] = 12;
      650:   96:      state->supplyCount[duchy] = 12;
      650:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  102:  state->supplyCount[silver] = 40;
     2000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   330000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   310000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
     1350:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      650:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    18000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    20000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   290000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     6650:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
     4650:  140:      state->deckCount[i] = 0;
    18600:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    13950:  143:	  state->deck[i][j] = estate;
    13950:  144:	  state->deckCount[i]++;
        -:  145:	}
    37200:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    32550:  148:	  state->deck[i][j] = copper;
    32550:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     6650:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
     4650:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     6650:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     4650:  166:      state->handCount[i] = 0;
     4650:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    54000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2000:  182:  state->outpostPlayed = 0;
     2000:  183:  state->phase = 0;
     2000:  184:  state->numActions = 1;
     2000:  185:  state->numBuys = 1;
     2000:  186:  state->playedCardCount = 0;
     2000:  187:  state->whoseTurn = 0;
     2000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     2000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     2000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 15924 returned 100% blocks executed 100%
    15924:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    15924:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    15924:  209:  if (state->deckCount[player] < 1)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
    11274:  210:    return -1;
     4650:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    55800:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    46500:  216:    newDeck[newDeckPos] = state->deck[player][card];
    46500:  217:    newDeckPos++;
   162278:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
   115778:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    46500:  221:    state->deckCount[player]--;
        -:  222:  }
    51150:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  224:    state->deck[player][i] = newDeck[i];
    46500:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     4650:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 2000 returned 100% blocks executed 73%
     2000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     2000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     2000:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     2000:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     2000:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
     2000:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     2000:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
     2000:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
     2000:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
     2000:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 2000 returned 100% blocks executed 100%
     2000:  315:int handCard(int handPos, struct gameState *state) {
     2000:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2000 returned 100% blocks executed 100%
     2000:  320:int supplyCount(int card, struct gameState *state) {
     2000:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4000 returned 100% blocks executed 100%
     4000:  346:int whoseTurn(struct gameState *state) {
     4000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 63162 returned 100% blocks executed 85%
    63162:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    63162:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     5637:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     5637:  538:    state->deckCount[player] = state->discardCount[player];
     5637:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5637:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5637:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5637:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5637:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5637:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     5637:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    57525:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    57525:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    57525:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    57525:  576:    state->deckCount[player]--;
    57525:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    57525:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function smithyRefact called 0 returned 0% blocks executed 0%
    #####:  646:int smithyRefact(int currentPlayer, struct gameState *state, int handPos, int i)
        -:  647:{
        -:  648:	//+3 Cards
    #####:  649:      for (i = 0; i < 5; i++) // changed from 3 cards to 5
branch  0 never executed
branch  1 never executed
        -:  650:	{
    #####:  651:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  652:	}
        -:  653:			
        -:  654:      //discard card from hand
    #####:  655:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  656:      return 0;
        -:  657:}
        -:  658:
function adventurerRefact called 2000 returned 100% blocks executed 100%
     2000:  659:int adventurerRefact(int currentPlayer, struct gameState *state, int temphand[], int drawntreasure, int cardDrawn, int z)
        -:  660:{	  
    57162:  661:	while(drawntreasure<2){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    53162:  662:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
     5637:  663:			shuffle(currentPlayer, state);
call    0 returned 100%
        -:  664:		}
    53162:  665:	drawCard(currentPlayer, state);
call    0 returned 100%
    53162:  666:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    53162:  667:	if (cardDrawn == copper || cardDrawn == silver) // removed gold as part of the statement || cardDrawn == gold
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
     4000:  668:		drawntreasure++;
        -:  669:	else{
    49162:  670:		temphand[z]=cardDrawn;
    49162:  671:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    49162:  672:		z++;
        -:  673:		}
        -:  674:    }
        -:  675:    
    53162:  676:	while(z-1>=0){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    49162:  677:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    49162:  678:		z=z-1;
        -:  679:    }
     2000:  680:    return 0;
        -:  681:}
        -:  682:
function cutpurseRefact called 0 returned 0% blocks executed 0%
    #####:  683:int cutpurseRefact(int currentPlayer, struct gameState *state, int handPos, int i, int j, int k)
        -:  684:{
    #####:  685:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  686:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  687:	{
    #####:  688:	  if (i == currentPlayer)  // removed not from statement != currentPlayer
branch  0 never executed
branch  1 never executed
        -:  689:	    {
    #####:  690:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  691:		{
    #####:  692:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  693:		    {
    #####:  694:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  695:		      break;
        -:  696:		    }
    #####:  697:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  698:		    {
    #####:  699:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  700:			{
        -:  701:			  if (DEBUG)
        -:  702:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  703:			}	
    #####:  704:		      break;
        -:  705:		    }		
        -:  706:		}
        -:  707:					
        -:  708:	    }
        -:  709:				
        -:  710:	}				
        -:  711:
        -:  712:      //discard played card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  714:
    #####:  715:      return 0;
        -:  716:}
        -:  717:
function mineRefact called 0 returned 0% blocks executed 0%
    #####:  718:int mineRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  719:{
    #####:  720:		printf("refact choice2: %d\n", choice2);
call    0 never executed
    #####:  721:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  722:
    #####:  723:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  724:	{
    #####:  725:	  return -1;
        -:  726:	}
        -:  727:		
    #####:  728:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  729:	{
    #####:  730:	  return -1;
        -:  731:	}
        -:  732:
    #####:  733:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  734:	{
    #####:  735:	  return -1;
        -:  736:	}
        -:  737:
    #####:  738:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  739:
        -:  740:      //discard card from hand
    #####:  741:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  742:
        -:  743:      //discard trashed card
    #####:  744:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  745:	{
    #####:  746:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  747:	    {
    #####:  748:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  749:	      break;
        -:  750:	    }
        -:  751:	}
        -:  752:			
    #####:  753:      return 0;
        -:  754:}
        -:  755:
function minionRefact called 0 returned 0% blocks executed 0%
    #####:  756:int minionRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  757:{
        -:  758:	//+1 action
    #####:  759:	state->numActions++;
        -:  760:			
        -:  761:	//discard card from hand
    #####:  762:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  763:	
        -:  764:
        -:  765:	//reversed choices 1 & 2
    #####:  766:	if (choice2)		//+2 coins 
branch  0 never executed
branch  1 never executed
        -:  767:	{
    #####:  768:		state->coins = state->coins + 2;
        -:  769:	}
        -:  770:			
    #####:  771:    else if (choice1)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  772:	{
        -:  773:		//discard hand
    #####:  774:		while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  775:	    {
    #####:  776:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  777:	    }
        -:  778:				
        -:  779:		//draw 4
    #####:  780:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  781:	    {
    #####:  782:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  783:	    }
        -:  784:				
        -:  785:		//other players discard hand and redraw if hand size > 4
    #####:  786:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  789:			{
    #####:  790:				if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  791:				{
        -:  792:					//discard hand
    #####:  793:					while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  794:					{
    #####:  795:						discardCard(handPos, i, state, 0);
call    0 never executed
        -:  796:					}
        -:  797:							
        -:  798:					//draw 4
    #####:  799:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  800:					{
    #####:  801:						drawCard(i, state);
call    0 never executed
        -:  802:					}
        -:  803:				}
        -:  804:			}
        -:  805:	    }
        -:  806:				
        -:  807:	}
    #####:  808:		return 0;
        -:  809:}
        -:  810:
function cardEffect called 2000 returned 100% blocks executed 4%
     2000:  811:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  812:{
        -:  813:  int i;
        -:  814:  int j;
        -:  815:  int k;
        -:  816:  int x;
        -:  817:  int index;
     2000:  818:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  819:  int nextPlayer = currentPlayer + 1;
        -:  820:
     2000:  821:  int tributeRevealedCards[2] = {-1, -1};
        -:  822:  int temphand[MAX_HAND];// moved above the if statement
     2000:  823:  int drawntreasure=0;
        -:  824:  int cardDrawn;
     2000:  825:  int z = 0;// this is the counter for the temp hand
     2000:  826:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1001:  827:    nextPlayer = 0;
        -:  828:  }
        -:  829:  
        -:  830:	
        -:  831:  //uses switch to select card and perform actions
     2000:  832:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  833:    {
        -:  834:    case adventurer:
     2000:  835:		return adventurerRefact(currentPlayer, state, temphand, drawntreasure, cardDrawn, z);
call    0 returned 100%
        -:  836:	/*
        -:  837:	  while(drawntreasure<2){
        -:  838:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  839:	  shuffle(currentPlayer, state);
        -:  840:	}
        -:  841:	drawCard(currentPlayer, state);
        -:  842:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  843:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  844:	  drawntreasure++;
        -:  845:	else{
        -:  846:	  temphand[z]=cardDrawn;
        -:  847:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  848:	  z++;
        -:  849:	}
        -:  850:      }
        -:  851:      while(z-1>=0){
        -:  852:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  853:	z=z-1;
        -:  854:      }
        -:  855:      return 0;
        -:  856:	*/
        -:  857:			
        -:  858:    case council_room:
        -:  859:      //+4 Cards
    #####:  860:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  861:	{
    #####:  862:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  863:	}
        -:  864:			
        -:  865:      //+1 Buy
    #####:  866:      state->numBuys++;
        -:  867:			
        -:  868:      //Each other player draws a card
    #####:  869:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  870:	{
    #####:  871:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  872:	    {
    #####:  873:	      drawCard(i, state);
call    0 never executed
        -:  874:	    }
        -:  875:	}
        -:  876:			
        -:  877:      //put played card in played card pile
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:			
    #####:  880:      return 0;
        -:  881:			
        -:  882:    case feast:
        -:  883:      //gain card with cost up to 5
        -:  884:      //Backup hand
    #####:  885:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  886:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  887:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  888:      }
        -:  889:      //Backup hand
        -:  890:
        -:  891:      //Update Coins for Buy
    #####:  892:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  893:      x = 1;//Condition to loop on
    #####:  894:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  895:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  896:	  if (DEBUG)
        -:  897:	    printf("None of that card left, sorry!\n");
        -:  898:
        -:  899:	  if (DEBUG){
        -:  900:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  901:	  }
        -:  902:	}
    #####:  903:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  904:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  905:
        -:  906:	  if (DEBUG){
        -:  907:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  908:	  }
        -:  909:	}
        -:  910:	else{
        -:  911:
        -:  912:	  if (DEBUG){
        -:  913:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  914:	  }
        -:  915:
    #####:  916:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  917:	  x = 0;//No more buying cards
        -:  918:
        -:  919:	  if (DEBUG){
        -:  920:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  921:	  }
        -:  922:
        -:  923:	}
        -:  924:      }     
        -:  925:
        -:  926:      //Reset Hand
    #####:  927:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  928:	state->hand[currentPlayer][i] = temphand[i];
    #####:  929:	temphand[i] = -1;
        -:  930:      }
        -:  931:      //Reset Hand
        -:  932:      			
    #####:  933:      return 0;
        -:  934:			
        -:  935:    case gardens:
    #####:  936:      return -1;
        -:  937:			
        -:  938:    case mine:
    #####:  939:		return mineRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -:  940:		//return 0;
        -:  941:	/*
        -:  942:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  943:
        -:  944:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  945:	{
        -:  946:	  return -1;
        -:  947:	}
        -:  948:		
        -:  949:      if (choice2 > treasure_map || choice2 < curse)
        -:  950:	{
        -:  951:	  return -1;
        -:  952:	}
        -:  953:
        -:  954:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  955:	{
        -:  956:	  return -1;
        -:  957:	}
        -:  958:
        -:  959:      gainCard(choice2, state, 2, currentPlayer);
        -:  960:
        -:  961:      //discard card from hand
        -:  962:      discardCard(handPos, currentPlayer, state, 0);
        -:  963:
        -:  964:      //discard trashed card
        -:  965:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  966:	{
        -:  967:	  if (state->hand[currentPlayer][i] == j)
        -:  968:	    {
        -:  969:	      discardCard(i, currentPlayer, state, 0);			
        -:  970:	      break;
        -:  971:	    }
        -:  972:	}
        -:  973:			
        -:  974:      return 0;
        -:  975:	*/
        -:  976:		
        -:  977:    case remodel:
    #####:  978:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  979:
    #####:  980:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  981:	{
    #####:  982:	  return -1;
        -:  983:	}
        -:  984:
    #####:  985:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  986:
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  989:
        -:  990:      //discard trashed card
    #####:  991:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  992:	{
    #####:  993:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  994:	    {
    #####:  995:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  996:	      break;
        -:  997:	    }
        -:  998:	}
        -:  999:
        -: 1000:
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case smithy:
    #####: 1004:		return smithyRefact(currentPlayer, state, handPos, i);
call    0 never executed
        -: 1005:		
        -: 1006:    /*  //+3 Cards
        -: 1007:      for (i = 0; i < 3; i++)
        -: 1008:	{
        -: 1009:	  drawCard(currentPlayer, state);
        -: 1010:	}
        -: 1011:			
        -: 1012:      //discard card from hand
        -: 1013:      discardCard(handPos, currentPlayer, state, 0);
        -: 1014:      return 0;
        -: 1015:	 */
        -: 1016:		
        -: 1017:    case village:
        -: 1018:      //+1 Card
    #####: 1019:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1020:			
        -: 1021:      //+2 Actions
    #####: 1022:      state->numActions = state->numActions + 2;
        -: 1023:			
        -: 1024:      //discard played card from hand
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case baron:
    #####: 1029:      state->numBuys++;//Increase buys by 1!
    #####: 1030:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1031:	int p = 0;//Iterator for hand!
    #####: 1032:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1033:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1034:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1035:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1036:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1037:	    state->discardCount[currentPlayer]++;
    #####: 1038:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1039:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1040:	    }
    #####: 1041:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1042:	    state->handCount[currentPlayer]--;
    #####: 1043:	    card_not_discarded = 0;//Exit the loop
        -: 1044:	  }
    #####: 1045:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1046:	    if(DEBUG) {
        -: 1047:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1048:	      printf("Must gain an estate if there are any\n");
        -: 1049:	    }
    #####: 1050:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1051:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1052:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1053:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1054:		isGameOver(state);
call    0 never executed
        -: 1055:	      }
        -: 1056:	    }
    #####: 1057:	    card_not_discarded = 0;//Exit the loop
        -: 1058:	  }
        -: 1059:			    
        -: 1060:	  else{
    #####: 1061:	    p++;//Next card
        -: 1062:	  }
        -: 1063:	}
        -: 1064:      }
        -: 1065:			    
        -: 1066:      else{
    #####: 1067:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1068:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1069:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1070:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1071:	    isGameOver(state);
call    0 never executed
        -: 1072:	  }
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
        -: 1076:      
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case great_hall:
        -: 1080:      //+1 Card
    #####: 1081:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1082:			
        -: 1083:      //+1 Actions
    #####: 1084:      state->numActions++;
        -: 1085:			
        -: 1086:      //discard card from hand
    #####: 1087:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case minion:
    #####: 1091:		return minionRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -: 1092:	/*
        -: 1093:      //+1 action
        -: 1094:      state->numActions++;
        -: 1095:			
        -: 1096:      //discard card from hand
        -: 1097:      discardCard(handPos, currentPlayer, state, 0);
        -: 1098:			
        -: 1099:      if (choice1)		//+2 coins
        -: 1100:	{
        -: 1101:	  state->coins = state->coins + 2;
        -: 1102:	}
        -: 1103:			
        -: 1104:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1105:	{
        -: 1106:	  //discard hand
        -: 1107:	  while(numHandCards(state) > 0)
        -: 1108:	    {
        -: 1109:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1110:	    }
        -: 1111:				
        -: 1112:	  //draw 4
        -: 1113:	  for (i = 0; i < 4; i++)
        -: 1114:	    {
        -: 1115:	      drawCard(currentPlayer, state);
        -: 1116:	    }
        -: 1117:				
        -: 1118:	  //other players discard hand and redraw if hand size > 4
        -: 1119:	  for (i = 0; i < state->numPlayers; i++)
        -: 1120:	    {
        -: 1121:	      if (i != currentPlayer)
        -: 1122:		{
        -: 1123:		  if ( state->handCount[i] > 4 )
        -: 1124:		    {
        -: 1125:		      //discard hand
        -: 1126:		      while( state->handCount[i] > 0 )
        -: 1127:			{
        -: 1128:			  discardCard(handPos, i, state, 0);
        -: 1129:			}
        -: 1130:							
        -: 1131:		      //draw 4
        -: 1132:		      for (j = 0; j < 4; j++)
        -: 1133:			{
        -: 1134:			  drawCard(i, state);
        -: 1135:			}
        -: 1136:		    }
        -: 1137:		}
        -: 1138:	    }
        -: 1139:				
        -: 1140:	}
        -: 1141:      return 0;
        -: 1142:	*/
        -: 1143:	
        -: 1144:    case steward:
    #####: 1145:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1146:	{
        -: 1147:	  //+2 cards
    #####: 1148:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1149:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1150:	}
    #####: 1151:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1152:	{
        -: 1153:	  //+2 coins
    #####: 1154:	  state->coins = state->coins + 2;
        -: 1155:	}
        -: 1156:      else
        -: 1157:	{
        -: 1158:	  //trash 2 cards in hand
    #####: 1159:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1160:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1161:	}
        -: 1162:			
        -: 1163:      //discard card from hand
    #####: 1164:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1165:      return 0;
        -: 1166:		
        -: 1167:    case tribute:
    #####: 1168:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1169:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1170:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1171:	  state->deckCount[nextPlayer]--;
        -: 1172:	}
    #####: 1173:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1174:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1175:	  state->discardCount[nextPlayer]--;
        -: 1176:	}
        -: 1177:	else{
        -: 1178:	  //No Card to Reveal
        -: 1179:	  if (DEBUG){
        -: 1180:	    printf("No cards to reveal\n");
        -: 1181:	  }
        -: 1182:	}
        -: 1183:      }
        -: 1184:	    
        -: 1185:      else{
    #####: 1186:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1187:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1188:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1189:	    state->deckCount[nextPlayer]++;
    #####: 1190:	    state->discard[nextPlayer][i] = -1;
    #####: 1191:	    state->discardCount[nextPlayer]--;
        -: 1192:	  }
        -: 1193:			    
    #####: 1194:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1195:	} 
    #####: 1196:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1197:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1198:	state->deckCount[nextPlayer]--;
    #####: 1199:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1200:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1201:	state->deckCount[nextPlayer]--;
        -: 1202:      }    
        -: 1203:		       
    #####: 1204:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1205:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1206:	state->playedCardCount++;
    #####: 1207:	tributeRevealedCards[1] = -1;
        -: 1208:      }
        -: 1209:
    #####: 1210:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1211:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1212:	  state->coins += 2;
        -: 1213:	}
        -: 1214:		    
    #####: 1215:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1216:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1217:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1218:	}
        -: 1219:	else{//Action Card
    #####: 1220:	  state->numActions = state->numActions + 2;
        -: 1221:	}
        -: 1222:      }
        -: 1223:	    
    #####: 1224:      return 0;
        -: 1225:		
        -: 1226:    case ambassador:
    #####: 1227:      j = 0;		//used to check if player has enough cards to discard
        -: 1228:
    #####: 1229:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1230:	{
    #####: 1231:	  return -1;				
        -: 1232:	}
        -: 1233:
    #####: 1234:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1235:	{
    #####: 1236:	  return -1;
        -: 1237:	}
        -: 1238:
    #####: 1239:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1240:	{
    #####: 1241:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1242:	    {
    #####: 1243:	      j++;
        -: 1244:	    }
        -: 1245:	}
    #####: 1246:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1247:	{
    #####: 1248:	  return -1;				
        -: 1249:	}
        -: 1250:
        -: 1251:      if (DEBUG) 
        -: 1252:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1253:
        -: 1254:      //increase supply count for choosen card by amount being discarded
    #####: 1255:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1256:			
        -: 1257:      //each other player gains a copy of revealed card
    #####: 1258:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1259:	{
    #####: 1260:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1261:	    {
    #####: 1262:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1263:	    }
        -: 1264:	}
        -: 1265:
        -: 1266:      //discard played card from hand
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1268:
        -: 1269:      //trash copies of cards returned to supply
    #####: 1270:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1271:	{
    #####: 1272:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1273:	    {
    #####: 1274:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1275:		{
    #####: 1276:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1277:		  break;
        -: 1278:		}
        -: 1279:	    }
        -: 1280:	}			
        -: 1281:
    #####: 1282:      return 0;
        -: 1283:		
        -: 1284:    case cutpurse:
    #####: 1285:		cutpurseRefact(currentPlayer, state, handPos, i, j, k);
call    0 never executed
        -: 1286:	/*
        -: 1287:      updateCoins(currentPlayer, state, 2);
        -: 1288:      for (i = 0; i < state->numPlayers; i++)
        -: 1289:	{
        -: 1290:	  if (i != currentPlayer)
        -: 1291:	    {
        -: 1292:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1293:		{
        -: 1294:		  if (state->hand[i][j] == copper)
        -: 1295:		    {
        -: 1296:		      discardCard(j, i, state, 0);
        -: 1297:		      break;
        -: 1298:		    }
        -: 1299:		  if (j == state->handCount[i])
        -: 1300:		    {
        -: 1301:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1302:			{
        -: 1303:			  if (DEBUG)
        -: 1304:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1305:			}	
        -: 1306:		      break;
        -: 1307:		    }		
        -: 1308:		}
        -: 1309:					
        -: 1310:	    }
        -: 1311:				
        -: 1312:	}				
        -: 1313:
        -: 1314:      //discard played card from hand
        -: 1315:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1316:
        -: 1317:      return 0;
        -: 1318:	*/
        -: 1319:		
        -: 1320:    case embargo: 
        -: 1321:      //+2 Coins
    #####: 1322:      state->coins = state->coins + 2;
        -: 1323:			
        -: 1324:      //see if selected pile is in play
    #####: 1325:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1326:	{
    #####: 1327:	  return -1;
        -: 1328:	}
        -: 1329:			
        -: 1330:      //add embargo token to selected supply pile
    #####: 1331:      state->embargoTokens[choice1]++;
        -: 1332:			
        -: 1333:      //trash card
    #####: 1334:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1335:      return 0;
        -: 1336:		
        -: 1337:    case outpost:
        -: 1338:      //set outpost flag
    #####: 1339:      state->outpostPlayed++;
        -: 1340:			
        -: 1341:      //discard card
    #####: 1342:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1343:      return 0;
        -: 1344:		
        -: 1345:    case salvager:
        -: 1346:      //+1 buy
    #####: 1347:      state->numBuys++;
        -: 1348:			
    #####: 1349:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1350:	{
        -: 1351:	  //gain coins equal to trashed card
    #####: 1352:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1353:	  //trash card
    #####: 1354:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1355:	}
        -: 1356:			
        -: 1357:      //discard card
    #####: 1358:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1359:      return 0;
        -: 1360:		
        -: 1361:    case sea_hag:
    #####: 1362:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1363:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1364:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1365:	  state->discardCount[i]++;
    #####: 1366:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1367:	}
        -: 1368:      }
    #####: 1369:      return 0;
        -: 1370:		
        -: 1371:    case treasure_map:
        -: 1372:      //search hand for another treasure_map
    #####: 1373:      index = -1;
    #####: 1374:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1375:	{
    #####: 1376:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1377:	    {
    #####: 1378:	      index = i;
    #####: 1379:	      break;
        -: 1380:	    }
        -: 1381:	}
    #####: 1382:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1383:	{
        -: 1384:	  //trash both treasure cards
    #####: 1385:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1386:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1387:
        -: 1388:	  //gain 4 Gold cards
    #####: 1389:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1390:	    {
    #####: 1391:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1392:	    }
        -: 1393:				
        -: 1394:	  //return success
    #####: 1395:	  return 1;
        -: 1396:	}
        -: 1397:			
        -: 1398:      //no second treasure_map found in hand
    #####: 1399:      return -1;
        -: 1400:    }
        -: 1401:	
    #####: 1402:  return -1;
        -: 1403:}
        -: 1404:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1405:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1406:{
        -: 1407:  //if card is not trashed, added to Played pile 
    #####: 1408:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1409:    {
        -: 1410:      //add card to played pile
    #####: 1411:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1412:      state->playedCardCount++;
        -: 1413:    }
        -: 1414:  //set played card to -1
    #####: 1415:  state->hand[currentPlayer][handPos] = -1;
        -: 1416:	
        -: 1417:  //remove card from player's hand
    #####: 1418:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1419:    {
        -: 1420:      //reduce number of cards in hand
    #####: 1421:      state->handCount[currentPlayer]--;
        -: 1422:    }
    #####: 1423:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1424:    {
        -: 1425:      //reduce number of cards in hand
    #####: 1426:      state->handCount[currentPlayer]--;
        -: 1427:    }
        -: 1428:  else 	
        -: 1429:    {
        -: 1430:      //replace discarded card with last card in hand
    #####: 1431:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1432:      //set last card to -1
    #####: 1433:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1434:      //reduce number of cards in hand
    #####: 1435:      state->handCount[currentPlayer]--;
        -: 1436:    }
        -: 1437:	
    #####: 1438:  return 0;
        -: 1439:}
        -: 1440:
function gainCard called 2000 returned 100% blocks executed 73%
     2000: 1441:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1442:{
        -: 1443:  //Note: supplyPos is enum of choosen card
        -: 1444:	
        -: 1445:  //check if supply pile is empty (0) or card is not used in game (-1)
     2000: 1446:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1447:    {
    #####: 1448:      return -1;
        -: 1449:    }
        -: 1450:	
        -: 1451:  //added card for [whoseTurn] current player:
        -: 1452:  // toFlag = 0 : add to discard
        -: 1453:  // toFlag = 1 : add to deck
        -: 1454:  // toFlag = 2 : add to hand
        -: 1455:
     2000: 1456:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1457:    {
    #####: 1458:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1459:      state->deckCount[player]++;
        -: 1460:    }
     2000: 1461:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1462:    {
     2000: 1463:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     2000: 1464:	  printf("gainCard Card: %d\n", state->hand[ player ][ state->handCount[player] ]);
call    0 returned 100%
     2000: 1465:      state->handCount[player]++;
        -: 1466:    }
        -: 1467:  else
        -: 1468:    {
    #####: 1469:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1470:      state->discardCount[player]++;
        -: 1471:    }
        -: 1472:	
        -: 1473:  //decrease number in supply pile
     2000: 1474:  state->supplyCount[supplyPos]--;
        -: 1475:	 
     2000: 1476:  return 0;
        -: 1477:}
        -: 1478:
function updateCoins called 4000 returned 100% blocks executed 100%
     4000: 1479:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1480:{
        -: 1481:  int i;
        -: 1482:	
        -: 1483:  //reset coin count
     4000: 1484:  state->coins = 0;
        -: 1485:  
        -: 1486:  //add coins for each Treasure card in player's hand
   494696: 1487:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1488:    {
   490696: 1489:      if (state->hand[player][i] == copper)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1490:	{
    27611: 1491:	  state->coins += 1;
        -: 1492:	}
   463085: 1493:      else if (state->hand[player][i] == silver)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1494:	{
    20994: 1495:	  state->coins += 2;
        -: 1496:	}
   442091: 1497:      else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1498:	{
    17304: 1499:	  state->coins += 3;
        -: 1500:	}	
        -: 1501:    }	
        -: 1502:
        -: 1503:  //add bonus
     4000: 1504:  state->coins += bonus;
        -: 1505:
     4000: 1506:  return 0;
        -: 1507:}
        -: 1508:
        -: 1509:
        -: 1510://end of dominion.c
        -: 1511:
File 'dominion.c'
Lines executed:28.16% of 561
Branches executed:29.16% of 415
Taken at least once:20.24% of 415
Calls executed:18.37% of 98
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 69750 returned 100% blocks executed 83%
    69750:    8:int compare(const void* a, const void* b) {
    69750:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    69750:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    18600:   12:    return -1;
    51150:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2000 returned 100% blocks executed 94%
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
call    0 returned 100%
     2000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   220000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   200000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2000:   73:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   74:    {
     1350:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      650:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
      650:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2000:   87:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   88:    {
     1350:   89:      state->supplyCount[estate] = 8;
     1350:   90:      state->supplyCount[duchy] = 8;
     1350:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      650:   95:      state->supplyCount[estate] = 12;
      650:   96:      state->supplyCount[duchy] = 12;
      650:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  102:  state->supplyCount[silver] = 40;
     2000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   330000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   310000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
     1350:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      650:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    18000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    20000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   290000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     6650:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
     4650:  140:      state->deckCount[i] = 0;
    18600:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    13950:  143:	  state->deck[i][j] = estate;
    13950:  144:	  state->deckCount[i]++;
        -:  145:	}
    37200:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    32550:  148:	  state->deck[i][j] = copper;
    32550:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     6650:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
     4650:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     6650:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     4650:  166:      state->handCount[i] = 0;
     4650:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    54000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2000:  182:  state->outpostPlayed = 0;
     2000:  183:  state->phase = 0;
     2000:  184:  state->numActions = 1;
     2000:  185:  state->numBuys = 1;
     2000:  186:  state->playedCardCount = 0;
     2000:  187:  state->whoseTurn = 0;
     2000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     2000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     2000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 15924 returned 100% blocks executed 100%
    15924:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    15924:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    15924:  209:  if (state->deckCount[player] < 1)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
    11274:  210:    return -1;
     4650:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    55800:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    46500:  216:    newDeck[newDeckPos] = state->deck[player][card];
    46500:  217:    newDeckPos++;
   162278:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
   115778:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    46500:  221:    state->deckCount[player]--;
        -:  222:  }
    51150:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  224:    state->deck[player][i] = newDeck[i];
    46500:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     4650:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 2000 returned 100% blocks executed 73%
     2000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     2000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     2000:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     2000:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     2000:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
     2000:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     2000:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
     2000:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
     2000:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
     2000:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 2000 returned 100% blocks executed 100%
     2000:  315:int handCard(int handPos, struct gameState *state) {
     2000:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2000 returned 100% blocks executed 100%
     2000:  320:int supplyCount(int card, struct gameState *state) {
     2000:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4000 returned 100% blocks executed 100%
     4000:  346:int whoseTurn(struct gameState *state) {
     4000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 63162 returned 100% blocks executed 85%
    63162:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    63162:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     5637:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     5637:  538:    state->deckCount[player] = state->discardCount[player];
     5637:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5637:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5637:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5637:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5637:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5637:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     5637:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    57525:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    57525:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    57525:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    57525:  576:    state->deckCount[player]--;
    57525:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    57525:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function smithyRefact called 0 returned 0% blocks executed 0%
    #####:  646:int smithyRefact(int currentPlayer, struct gameState *state, int handPos, int i)
        -:  647:{
        -:  648:	//+3 Cards
    #####:  649:      for (i = 0; i < 5; i++) // changed from 3 cards to 5
branch  0 never executed
branch  1 never executed
        -:  650:	{
    #####:  651:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  652:	}
        -:  653:			
        -:  654:      //discard card from hand
    #####:  655:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  656:      return 0;
        -:  657:}
        -:  658:
function adventurerRefact called 2000 returned 100% blocks executed 100%
     2000:  659:int adventurerRefact(int currentPlayer, struct gameState *state, int temphand[], int drawntreasure, int cardDrawn, int z)
        -:  660:{	  
    57162:  661:	while(drawntreasure<2){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    53162:  662:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
     5637:  663:			shuffle(currentPlayer, state);
call    0 returned 100%
        -:  664:		}
    53162:  665:	drawCard(currentPlayer, state);
call    0 returned 100%
    53162:  666:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    53162:  667:	if (cardDrawn == copper || cardDrawn == silver) // removed gold as part of the statement || cardDrawn == gold
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
     4000:  668:		drawntreasure++;
        -:  669:	else{
    49162:  670:		temphand[z]=cardDrawn;
    49162:  671:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    49162:  672:		z++;
        -:  673:		}
        -:  674:    }
        -:  675:    
    53162:  676:	while(z-1>=0){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    49162:  677:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    49162:  678:		z=z-1;
        -:  679:    }
     2000:  680:    return 0;
        -:  681:}
        -:  682:
function cutpurseRefact called 0 returned 0% blocks executed 0%
    #####:  683:int cutpurseRefact(int currentPlayer, struct gameState *state, int handPos, int i, int j, int k)
        -:  684:{
    #####:  685:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  686:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  687:	{
    #####:  688:	  if (i == currentPlayer)  // removed not from statement != currentPlayer
branch  0 never executed
branch  1 never executed
        -:  689:	    {
    #####:  690:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  691:		{
    #####:  692:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  693:		    {
    #####:  694:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  695:		      break;
        -:  696:		    }
    #####:  697:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  698:		    {
    #####:  699:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  700:			{
        -:  701:			  if (DEBUG)
        -:  702:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  703:			}	
    #####:  704:		      break;
        -:  705:		    }		
        -:  706:		}
        -:  707:					
        -:  708:	    }
        -:  709:				
        -:  710:	}				
        -:  711:
        -:  712:      //discard played card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  714:
    #####:  715:      return 0;
        -:  716:}
        -:  717:
function mineRefact called 0 returned 0% blocks executed 0%
    #####:  718:int mineRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  719:{
    #####:  720:		printf("refact choice2: %d\n", choice2);
call    0 never executed
    #####:  721:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  722:
    #####:  723:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  724:	{
    #####:  725:	  return -1;
        -:  726:	}
        -:  727:		
    #####:  728:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  729:	{
    #####:  730:	  return -1;
        -:  731:	}
        -:  732:
    #####:  733:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  734:	{
    #####:  735:	  return -1;
        -:  736:	}
        -:  737:
    #####:  738:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
    #####:  739:	  printf("gainCard MineREfact: %d\n", state->hand[ currentPlayer ][ state->handCount[currentPlayer] - 1]);
call    0 never executed
        -:  740:
        -:  741:      //discard card from hand
    #####:  742:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  743:
        -:  744:      //discard trashed card
    #####:  745:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  746:	{
    #####:  747:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  748:	    {
    #####:  749:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  750:	      break;
        -:  751:	    }
        -:  752:	}
        -:  753:			
    #####:  754:      return 0;
        -:  755:}
        -:  756:
function minionRefact called 0 returned 0% blocks executed 0%
    #####:  757:int minionRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  758:{
        -:  759:	//+1 action
    #####:  760:	state->numActions++;
        -:  761:			
        -:  762:	//discard card from hand
    #####:  763:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  764:	
        -:  765:
        -:  766:	//reversed choices 1 & 2
    #####:  767:	if (choice2)		//+2 coins 
branch  0 never executed
branch  1 never executed
        -:  768:	{
    #####:  769:		state->coins = state->coins + 2;
        -:  770:	}
        -:  771:			
    #####:  772:    else if (choice1)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  773:	{
        -:  774:		//discard hand
    #####:  775:		while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  776:	    {
    #####:  777:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  778:	    }
        -:  779:				
        -:  780:		//draw 4
    #####:  781:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  782:	    {
    #####:  783:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  784:	    }
        -:  785:				
        -:  786:		//other players discard hand and redraw if hand size > 4
    #####:  787:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  788:	    {
    #####:  789:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  790:			{
    #####:  791:				if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  792:				{
        -:  793:					//discard hand
    #####:  794:					while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  795:					{
    #####:  796:						discardCard(handPos, i, state, 0);
call    0 never executed
        -:  797:					}
        -:  798:							
        -:  799:					//draw 4
    #####:  800:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  801:					{
    #####:  802:						drawCard(i, state);
call    0 never executed
        -:  803:					}
        -:  804:				}
        -:  805:			}
        -:  806:	    }
        -:  807:				
        -:  808:	}
    #####:  809:		return 0;
        -:  810:}
        -:  811:
function cardEffect called 2000 returned 100% blocks executed 4%
     2000:  812:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  813:{
        -:  814:  int i;
        -:  815:  int j;
        -:  816:  int k;
        -:  817:  int x;
        -:  818:  int index;
     2000:  819:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  820:  int nextPlayer = currentPlayer + 1;
        -:  821:
     2000:  822:  int tributeRevealedCards[2] = {-1, -1};
        -:  823:  int temphand[MAX_HAND];// moved above the if statement
     2000:  824:  int drawntreasure=0;
        -:  825:  int cardDrawn;
     2000:  826:  int z = 0;// this is the counter for the temp hand
     2000:  827:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1001:  828:    nextPlayer = 0;
        -:  829:  }
        -:  830:  
        -:  831:	
        -:  832:  //uses switch to select card and perform actions
     2000:  833:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  834:    {
        -:  835:    case adventurer:
     2000:  836:		return adventurerRefact(currentPlayer, state, temphand, drawntreasure, cardDrawn, z);
call    0 returned 100%
        -:  837:	/*
        -:  838:	  while(drawntreasure<2){
        -:  839:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  840:	  shuffle(currentPlayer, state);
        -:  841:	}
        -:  842:	drawCard(currentPlayer, state);
        -:  843:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  844:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  845:	  drawntreasure++;
        -:  846:	else{
        -:  847:	  temphand[z]=cardDrawn;
        -:  848:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  849:	  z++;
        -:  850:	}
        -:  851:      }
        -:  852:      while(z-1>=0){
        -:  853:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  854:	z=z-1;
        -:  855:      }
        -:  856:      return 0;
        -:  857:	*/
        -:  858:			
        -:  859:    case council_room:
        -:  860:      //+4 Cards
    #####:  861:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  862:	{
    #####:  863:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  864:	}
        -:  865:			
        -:  866:      //+1 Buy
    #####:  867:      state->numBuys++;
        -:  868:			
        -:  869:      //Each other player draws a card
    #####:  870:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  871:	{
    #####:  872:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  873:	    {
    #####:  874:	      drawCard(i, state);
call    0 never executed
        -:  875:	    }
        -:  876:	}
        -:  877:			
        -:  878:      //put played card in played card pile
    #####:  879:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  880:			
    #####:  881:      return 0;
        -:  882:			
        -:  883:    case feast:
        -:  884:      //gain card with cost up to 5
        -:  885:      //Backup hand
    #####:  886:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  887:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  888:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  889:      }
        -:  890:      //Backup hand
        -:  891:
        -:  892:      //Update Coins for Buy
    #####:  893:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  894:      x = 1;//Condition to loop on
    #####:  895:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  896:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  897:	  if (DEBUG)
        -:  898:	    printf("None of that card left, sorry!\n");
        -:  899:
        -:  900:	  if (DEBUG){
        -:  901:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  902:	  }
        -:  903:	}
    #####:  904:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  905:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  906:
        -:  907:	  if (DEBUG){
        -:  908:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  909:	  }
        -:  910:	}
        -:  911:	else{
        -:  912:
        -:  913:	  if (DEBUG){
        -:  914:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  915:	  }
        -:  916:
    #####:  917:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  918:	  x = 0;//No more buying cards
        -:  919:
        -:  920:	  if (DEBUG){
        -:  921:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  922:	  }
        -:  923:
        -:  924:	}
        -:  925:      }     
        -:  926:
        -:  927:      //Reset Hand
    #####:  928:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  929:	state->hand[currentPlayer][i] = temphand[i];
    #####:  930:	temphand[i] = -1;
        -:  931:      }
        -:  932:      //Reset Hand
        -:  933:      			
    #####:  934:      return 0;
        -:  935:			
        -:  936:    case gardens:
    #####:  937:      return -1;
        -:  938:			
        -:  939:    case mine:
    #####:  940:		return mineRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -:  941:		//return 0;
        -:  942:	/*
        -:  943:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  944:
        -:  945:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  946:	{
        -:  947:	  return -1;
        -:  948:	}
        -:  949:		
        -:  950:      if (choice2 > treasure_map || choice2 < curse)
        -:  951:	{
        -:  952:	  return -1;
        -:  953:	}
        -:  954:
        -:  955:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  956:	{
        -:  957:	  return -1;
        -:  958:	}
        -:  959:
        -:  960:      gainCard(choice2, state, 2, currentPlayer);
        -:  961:
        -:  962:      //discard card from hand
        -:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:
        -:  965:      //discard trashed card
        -:  966:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  967:	{
        -:  968:	  if (state->hand[currentPlayer][i] == j)
        -:  969:	    {
        -:  970:	      discardCard(i, currentPlayer, state, 0);			
        -:  971:	      break;
        -:  972:	    }
        -:  973:	}
        -:  974:			
        -:  975:      return 0;
        -:  976:	*/
        -:  977:		
        -:  978:    case remodel:
    #####:  979:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  980:
    #####:  981:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  982:	{
    #####:  983:	  return -1;
        -:  984:	}
        -:  985:
    #####:  986:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  987:
        -:  988:      //discard card from hand
    #####:  989:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  990:
        -:  991:      //discard trashed card
    #####:  992:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  993:	{
    #####:  994:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  995:	    {
    #####:  996:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  997:	      break;
        -:  998:	    }
        -:  999:	}
        -: 1000:
        -: 1001:
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case smithy:
    #####: 1005:		return smithyRefact(currentPlayer, state, handPos, i);
call    0 never executed
        -: 1006:		
        -: 1007:    /*  //+3 Cards
        -: 1008:      for (i = 0; i < 3; i++)
        -: 1009:	{
        -: 1010:	  drawCard(currentPlayer, state);
        -: 1011:	}
        -: 1012:			
        -: 1013:      //discard card from hand
        -: 1014:      discardCard(handPos, currentPlayer, state, 0);
        -: 1015:      return 0;
        -: 1016:	 */
        -: 1017:		
        -: 1018:    case village:
        -: 1019:      //+1 Card
    #####: 1020:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1021:			
        -: 1022:      //+2 Actions
    #####: 1023:      state->numActions = state->numActions + 2;
        -: 1024:			
        -: 1025:      //discard played card from hand
    #####: 1026:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1027:      return 0;
        -: 1028:		
        -: 1029:    case baron:
    #####: 1030:      state->numBuys++;//Increase buys by 1!
    #####: 1031:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1032:	int p = 0;//Iterator for hand!
    #####: 1033:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1034:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1035:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1036:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1037:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1038:	    state->discardCount[currentPlayer]++;
    #####: 1039:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1041:	    }
    #####: 1042:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1043:	    state->handCount[currentPlayer]--;
    #####: 1044:	    card_not_discarded = 0;//Exit the loop
        -: 1045:	  }
    #####: 1046:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1047:	    if(DEBUG) {
        -: 1048:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1049:	      printf("Must gain an estate if there are any\n");
        -: 1050:	    }
    #####: 1051:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1052:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1053:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1054:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1055:		isGameOver(state);
call    0 never executed
        -: 1056:	      }
        -: 1057:	    }
    #####: 1058:	    card_not_discarded = 0;//Exit the loop
        -: 1059:	  }
        -: 1060:			    
        -: 1061:	  else{
    #####: 1062:	    p++;//Next card
        -: 1063:	  }
        -: 1064:	}
        -: 1065:      }
        -: 1066:			    
        -: 1067:      else{
    #####: 1068:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1069:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1070:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1071:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1072:	    isGameOver(state);
call    0 never executed
        -: 1073:	  }
        -: 1074:	}
        -: 1075:      }
        -: 1076:	    
        -: 1077:      
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case great_hall:
        -: 1081:      //+1 Card
    #####: 1082:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1083:			
        -: 1084:      //+1 Actions
    #####: 1085:      state->numActions++;
        -: 1086:			
        -: 1087:      //discard card from hand
    #####: 1088:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case minion:
    #####: 1092:		return minionRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -: 1093:	/*
        -: 1094:      //+1 action
        -: 1095:      state->numActions++;
        -: 1096:			
        -: 1097:      //discard card from hand
        -: 1098:      discardCard(handPos, currentPlayer, state, 0);
        -: 1099:			
        -: 1100:      if (choice1)		//+2 coins
        -: 1101:	{
        -: 1102:	  state->coins = state->coins + 2;
        -: 1103:	}
        -: 1104:			
        -: 1105:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1106:	{
        -: 1107:	  //discard hand
        -: 1108:	  while(numHandCards(state) > 0)
        -: 1109:	    {
        -: 1110:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1111:	    }
        -: 1112:				
        -: 1113:	  //draw 4
        -: 1114:	  for (i = 0; i < 4; i++)
        -: 1115:	    {
        -: 1116:	      drawCard(currentPlayer, state);
        -: 1117:	    }
        -: 1118:				
        -: 1119:	  //other players discard hand and redraw if hand size > 4
        -: 1120:	  for (i = 0; i < state->numPlayers; i++)
        -: 1121:	    {
        -: 1122:	      if (i != currentPlayer)
        -: 1123:		{
        -: 1124:		  if ( state->handCount[i] > 4 )
        -: 1125:		    {
        -: 1126:		      //discard hand
        -: 1127:		      while( state->handCount[i] > 0 )
        -: 1128:			{
        -: 1129:			  discardCard(handPos, i, state, 0);
        -: 1130:			}
        -: 1131:							
        -: 1132:		      //draw 4
        -: 1133:		      for (j = 0; j < 4; j++)
        -: 1134:			{
        -: 1135:			  drawCard(i, state);
        -: 1136:			}
        -: 1137:		    }
        -: 1138:		}
        -: 1139:	    }
        -: 1140:				
        -: 1141:	}
        -: 1142:      return 0;
        -: 1143:	*/
        -: 1144:	
        -: 1145:    case steward:
    #####: 1146:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
        -: 1148:	  //+2 cards
    #####: 1149:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1150:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1151:	}
    #####: 1152:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
        -: 1154:	  //+2 coins
    #####: 1155:	  state->coins = state->coins + 2;
        -: 1156:	}
        -: 1157:      else
        -: 1158:	{
        -: 1159:	  //trash 2 cards in hand
    #####: 1160:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1161:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1162:	}
        -: 1163:			
        -: 1164:      //discard card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1166:      return 0;
        -: 1167:		
        -: 1168:    case tribute:
    #####: 1169:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1170:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1171:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1172:	  state->deckCount[nextPlayer]--;
        -: 1173:	}
    #####: 1174:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1175:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1176:	  state->discardCount[nextPlayer]--;
        -: 1177:	}
        -: 1178:	else{
        -: 1179:	  //No Card to Reveal
        -: 1180:	  if (DEBUG){
        -: 1181:	    printf("No cards to reveal\n");
        -: 1182:	  }
        -: 1183:	}
        -: 1184:      }
        -: 1185:	    
        -: 1186:      else{
    #####: 1187:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1188:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1189:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1190:	    state->deckCount[nextPlayer]++;
    #####: 1191:	    state->discard[nextPlayer][i] = -1;
    #####: 1192:	    state->discardCount[nextPlayer]--;
        -: 1193:	  }
        -: 1194:			    
    #####: 1195:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1196:	} 
    #####: 1197:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1198:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1199:	state->deckCount[nextPlayer]--;
    #####: 1200:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1201:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1202:	state->deckCount[nextPlayer]--;
        -: 1203:      }    
        -: 1204:		       
    #####: 1205:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1206:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1207:	state->playedCardCount++;
    #####: 1208:	tributeRevealedCards[1] = -1;
        -: 1209:      }
        -: 1210:
    #####: 1211:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1212:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1213:	  state->coins += 2;
        -: 1214:	}
        -: 1215:		    
    #####: 1216:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1217:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1218:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1219:	}
        -: 1220:	else{//Action Card
    #####: 1221:	  state->numActions = state->numActions + 2;
        -: 1222:	}
        -: 1223:      }
        -: 1224:	    
    #####: 1225:      return 0;
        -: 1226:		
        -: 1227:    case ambassador:
    #####: 1228:      j = 0;		//used to check if player has enough cards to discard
        -: 1229:
    #####: 1230:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1231:	{
    #####: 1232:	  return -1;				
        -: 1233:	}
        -: 1234:
    #####: 1235:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1236:	{
    #####: 1237:	  return -1;
        -: 1238:	}
        -: 1239:
    #####: 1240:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1243:	    {
    #####: 1244:	      j++;
        -: 1245:	    }
        -: 1246:	}
    #####: 1247:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1248:	{
    #####: 1249:	  return -1;				
        -: 1250:	}
        -: 1251:
        -: 1252:      if (DEBUG) 
        -: 1253:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1254:
        -: 1255:      //increase supply count for choosen card by amount being discarded
    #####: 1256:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1257:			
        -: 1258:      //each other player gains a copy of revealed card
    #####: 1259:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1260:	{
    #####: 1261:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1262:	    {
    #####: 1263:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1264:	    }
        -: 1265:	}
        -: 1266:
        -: 1267:      //discard played card from hand
    #####: 1268:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1269:
        -: 1270:      //trash copies of cards returned to supply
    #####: 1271:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1272:	{
    #####: 1273:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1274:	    {
    #####: 1275:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1276:		{
    #####: 1277:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1278:		  break;
        -: 1279:		}
        -: 1280:	    }
        -: 1281:	}			
        -: 1282:
    #####: 1283:      return 0;
        -: 1284:		
        -: 1285:    case cutpurse:
    #####: 1286:		cutpurseRefact(currentPlayer, state, handPos, i, j, k);
call    0 never executed
        -: 1287:	/*
        -: 1288:      updateCoins(currentPlayer, state, 2);
        -: 1289:      for (i = 0; i < state->numPlayers; i++)
        -: 1290:	{
        -: 1291:	  if (i != currentPlayer)
        -: 1292:	    {
        -: 1293:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1294:		{
        -: 1295:		  if (state->hand[i][j] == copper)
        -: 1296:		    {
        -: 1297:		      discardCard(j, i, state, 0);
        -: 1298:		      break;
        -: 1299:		    }
        -: 1300:		  if (j == state->handCount[i])
        -: 1301:		    {
        -: 1302:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1303:			{
        -: 1304:			  if (DEBUG)
        -: 1305:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1306:			}	
        -: 1307:		      break;
        -: 1308:		    }		
        -: 1309:		}
        -: 1310:					
        -: 1311:	    }
        -: 1312:				
        -: 1313:	}				
        -: 1314:
        -: 1315:      //discard played card from hand
        -: 1316:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1317:
        -: 1318:      return 0;
        -: 1319:	*/
        -: 1320:		
        -: 1321:    case embargo: 
        -: 1322:      //+2 Coins
    #####: 1323:      state->coins = state->coins + 2;
        -: 1324:			
        -: 1325:      //see if selected pile is in play
    #####: 1326:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1327:	{
    #####: 1328:	  return -1;
        -: 1329:	}
        -: 1330:			
        -: 1331:      //add embargo token to selected supply pile
    #####: 1332:      state->embargoTokens[choice1]++;
        -: 1333:			
        -: 1334:      //trash card
    #####: 1335:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1336:      return 0;
        -: 1337:		
        -: 1338:    case outpost:
        -: 1339:      //set outpost flag
    #####: 1340:      state->outpostPlayed++;
        -: 1341:			
        -: 1342:      //discard card
    #####: 1343:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1344:      return 0;
        -: 1345:		
        -: 1346:    case salvager:
        -: 1347:      //+1 buy
    #####: 1348:      state->numBuys++;
        -: 1349:			
    #####: 1350:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1351:	{
        -: 1352:	  //gain coins equal to trashed card
    #####: 1353:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1354:	  //trash card
    #####: 1355:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1356:	}
        -: 1357:			
        -: 1358:      //discard card
    #####: 1359:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1360:      return 0;
        -: 1361:		
        -: 1362:    case sea_hag:
    #####: 1363:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1364:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1365:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1366:	  state->discardCount[i]++;
    #####: 1367:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1368:	}
        -: 1369:      }
    #####: 1370:      return 0;
        -: 1371:		
        -: 1372:    case treasure_map:
        -: 1373:      //search hand for another treasure_map
    #####: 1374:      index = -1;
    #####: 1375:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1376:	{
    #####: 1377:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1378:	    {
    #####: 1379:	      index = i;
    #####: 1380:	      break;
        -: 1381:	    }
        -: 1382:	}
    #####: 1383:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1384:	{
        -: 1385:	  //trash both treasure cards
    #####: 1386:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1387:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1388:
        -: 1389:	  //gain 4 Gold cards
    #####: 1390:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1391:	    {
    #####: 1392:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1393:	    }
        -: 1394:				
        -: 1395:	  //return success
    #####: 1396:	  return 1;
        -: 1397:	}
        -: 1398:			
        -: 1399:      //no second treasure_map found in hand
    #####: 1400:      return -1;
        -: 1401:    }
        -: 1402:	
    #####: 1403:  return -1;
        -: 1404:}
        -: 1405:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1406:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1407:{
        -: 1408:  //if card is not trashed, added to Played pile 
    #####: 1409:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1410:    {
        -: 1411:      //add card to played pile
    #####: 1412:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1413:      state->playedCardCount++;
        -: 1414:    }
        -: 1415:  //set played card to -1
    #####: 1416:  state->hand[currentPlayer][handPos] = -1;
        -: 1417:	
        -: 1418:  //remove card from player's hand
    #####: 1419:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1420:    {
        -: 1421:      //reduce number of cards in hand
    #####: 1422:      state->handCount[currentPlayer]--;
        -: 1423:    }
    #####: 1424:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1425:    {
        -: 1426:      //reduce number of cards in hand
    #####: 1427:      state->handCount[currentPlayer]--;
        -: 1428:    }
        -: 1429:  else 	
        -: 1430:    {
        -: 1431:      //replace discarded card with last card in hand
    #####: 1432:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1433:      //set last card to -1
    #####: 1434:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1435:      //reduce number of cards in hand
    #####: 1436:      state->handCount[currentPlayer]--;
        -: 1437:    }
        -: 1438:	
    #####: 1439:  return 0;
        -: 1440:}
        -: 1441:
function gainCard called 2000 returned 100% blocks executed 70%
     2000: 1442:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1443:{
        -: 1444:  //Note: supplyPos is enum of choosen card
        -: 1445:	
        -: 1446:  //check if supply pile is empty (0) or card is not used in game (-1)
     2000: 1447:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1448:    {
    #####: 1449:      return -1;
        -: 1450:    }
        -: 1451:	
        -: 1452:  //added card for [whoseTurn] current player:
        -: 1453:  // toFlag = 0 : add to discard
        -: 1454:  // toFlag = 1 : add to deck
        -: 1455:  // toFlag = 2 : add to hand
        -: 1456:
     2000: 1457:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1458:    {
    #####: 1459:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1460:      state->deckCount[player]++;
        -: 1461:    }
     2000: 1462:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1463:    {
     2000: 1464:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     2000: 1465:      state->handCount[player]++;
     2000: 1466:	  printf("gainCard Card: %d\n", state->hand[ player ][ state->handCount[player] - 1]);
call    0 returned 100%
        -: 1467:    }
        -: 1468:  else
        -: 1469:    {
    #####: 1470:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1471:      state->discardCount[player]++;
        -: 1472:    }
        -: 1473:	
        -: 1474:  //decrease number in supply pile
     2000: 1475:  state->supplyCount[supplyPos]--;
        -: 1476:	 
     2000: 1477:  return 0;
        -: 1478:}
        -: 1479:
function updateCoins called 4000 returned 100% blocks executed 100%
     4000: 1480:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1481:{
        -: 1482:  int i;
        -: 1483:	
        -: 1484:  //reset coin count
     4000: 1485:  state->coins = 0;
        -: 1486:  
        -: 1487:  //add coins for each Treasure card in player's hand
   494696: 1488:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1489:    {
   490696: 1490:      if (state->hand[player][i] == copper)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1491:	{
    27611: 1492:	  state->coins += 1;
        -: 1493:	}
   463085: 1494:      else if (state->hand[player][i] == silver)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1495:	{
    20994: 1496:	  state->coins += 2;
        -: 1497:	}
   442091: 1498:      else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1499:	{
    17304: 1500:	  state->coins += 3;
        -: 1501:	}	
        -: 1502:    }	
        -: 1503:
        -: 1504:  //add bonus
     4000: 1505:  state->coins += bonus;
        -: 1506:
     4000: 1507:  return 0;
        -: 1508:}
        -: 1509:
        -: 1510:
        -: 1511://end of dominion.c
        -: 1512:
File 'dominion.c'
Lines executed:28.14% of 558
Branches executed:29.16% of 415
Taken at least once:20.24% of 415
Calls executed:17.89% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 69750 returned 100% blocks executed 83%
    69750:    8:int compare(const void* a, const void* b) {
    69750:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    69750:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    18600:   12:    return -1;
    51150:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2000 returned 100% blocks executed 94%
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
call    0 returned 100%
     2000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   220000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   200000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2000:   73:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   74:    {
     1350:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      650:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
      650:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2000:   87:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   88:    {
     1350:   89:      state->supplyCount[estate] = 8;
     1350:   90:      state->supplyCount[duchy] = 8;
     1350:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      650:   95:      state->supplyCount[estate] = 12;
      650:   96:      state->supplyCount[duchy] = 12;
      650:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  102:  state->supplyCount[silver] = 40;
     2000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   330000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   310000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
     1350:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      650:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    18000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    20000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   290000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     6650:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
     4650:  140:      state->deckCount[i] = 0;
    18600:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    13950:  143:	  state->deck[i][j] = estate;
    13950:  144:	  state->deckCount[i]++;
        -:  145:	}
    37200:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    32550:  148:	  state->deck[i][j] = copper;
    32550:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     6650:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
     4650:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     6650:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     4650:  166:      state->handCount[i] = 0;
     4650:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    54000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2000:  182:  state->outpostPlayed = 0;
     2000:  183:  state->phase = 0;
     2000:  184:  state->numActions = 1;
     2000:  185:  state->numBuys = 1;
     2000:  186:  state->playedCardCount = 0;
     2000:  187:  state->whoseTurn = 0;
     2000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     2000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     2000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 15924 returned 100% blocks executed 100%
    15924:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    15924:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    15924:  209:  if (state->deckCount[player] < 1)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
    11274:  210:    return -1;
     4650:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    55800:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    46500:  216:    newDeck[newDeckPos] = state->deck[player][card];
    46500:  217:    newDeckPos++;
   162278:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
   115778:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    46500:  221:    state->deckCount[player]--;
        -:  222:  }
    51150:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  224:    state->deck[player][i] = newDeck[i];
    46500:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     4650:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 2000 returned 100% blocks executed 73%
     2000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     2000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     2000:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     2000:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     2000:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
     2000:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     2000:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
     2000:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
     2000:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
     2000:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 2000 returned 100% blocks executed 100%
     2000:  315:int handCard(int handPos, struct gameState *state) {
     2000:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2000 returned 100% blocks executed 100%
     2000:  320:int supplyCount(int card, struct gameState *state) {
     2000:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4000 returned 100% blocks executed 100%
     4000:  346:int whoseTurn(struct gameState *state) {
     4000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 63162 returned 100% blocks executed 85%
    63162:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    63162:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     5637:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     5637:  538:    state->deckCount[player] = state->discardCount[player];
     5637:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5637:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5637:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5637:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5637:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5637:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     5637:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    57525:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    57525:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    57525:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    57525:  576:    state->deckCount[player]--;
    57525:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    57525:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function smithyRefact called 0 returned 0% blocks executed 0%
    #####:  646:int smithyRefact(int currentPlayer, struct gameState *state, int handPos, int i)
        -:  647:{
        -:  648:	//+3 Cards
    #####:  649:      for (i = 0; i < 5; i++) // changed from 3 cards to 5
branch  0 never executed
branch  1 never executed
        -:  650:	{
    #####:  651:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  652:	}
        -:  653:			
        -:  654:      //discard card from hand
    #####:  655:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  656:      return 0;
        -:  657:}
        -:  658:
function adventurerRefact called 2000 returned 100% blocks executed 100%
     2000:  659:int adventurerRefact(int currentPlayer, struct gameState *state, int temphand[], int drawntreasure, int cardDrawn, int z)
        -:  660:{	  
    57162:  661:	while(drawntreasure<2){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    53162:  662:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
     5637:  663:			shuffle(currentPlayer, state);
call    0 returned 100%
        -:  664:		}
    53162:  665:	drawCard(currentPlayer, state);
call    0 returned 100%
    53162:  666:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    53162:  667:	if (cardDrawn == copper || cardDrawn == silver) // removed gold as part of the statement || cardDrawn == gold
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
     4000:  668:		drawntreasure++;
        -:  669:	else{
    49162:  670:		temphand[z]=cardDrawn;
    49162:  671:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    49162:  672:		z++;
        -:  673:		}
        -:  674:    }
        -:  675:    
    53162:  676:	while(z-1>=0){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    49162:  677:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    49162:  678:		z=z-1;
        -:  679:    }
     2000:  680:    return 0;
        -:  681:}
        -:  682:
function cutpurseRefact called 0 returned 0% blocks executed 0%
    #####:  683:int cutpurseRefact(int currentPlayer, struct gameState *state, int handPos, int i, int j, int k)
        -:  684:{
    #####:  685:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  686:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  687:	{
    #####:  688:	  if (i == currentPlayer)  // removed not from statement != currentPlayer
branch  0 never executed
branch  1 never executed
        -:  689:	    {
    #####:  690:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  691:		{
    #####:  692:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  693:		    {
    #####:  694:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  695:		      break;
        -:  696:		    }
    #####:  697:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  698:		    {
    #####:  699:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  700:			{
        -:  701:			  if (DEBUG)
        -:  702:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  703:			}	
    #####:  704:		      break;
        -:  705:		    }		
        -:  706:		}
        -:  707:					
        -:  708:	    }
        -:  709:				
        -:  710:	}				
        -:  711:
        -:  712:      //discard played card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  714:
    #####:  715:      return 0;
        -:  716:}
        -:  717:
function mineRefact called 0 returned 0% blocks executed 0%
    #####:  718:int mineRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  719:{
    #####:  720:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:		
    #####:  727:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  728:	{
    #####:  729:	  return -1;
        -:  730:	}
        -:  731:
    #####:  732:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  733:	{
    #####:  734:	  return -1;
        -:  735:	}
        -:  736:
    #####:  737:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  738:
        -:  739:      //discard card from hand
    #####:  740:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  741:
        -:  742:      //discard trashed card
    #####:  743:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  744:	{
    #####:  745:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  746:	    {
    #####:  747:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  748:	      break;
        -:  749:	    }
        -:  750:	}
        -:  751:			
    #####:  752:      return 0;
        -:  753:}
        -:  754:
function minionRefact called 0 returned 0% blocks executed 0%
    #####:  755:int minionRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  756:{
        -:  757:	//+1 action
    #####:  758:	state->numActions++;
        -:  759:			
        -:  760:	//discard card from hand
    #####:  761:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  762:	
        -:  763:
        -:  764:	//reversed choices 1 & 2
    #####:  765:	if (choice2)		//+2 coins 
branch  0 never executed
branch  1 never executed
        -:  766:	{
    #####:  767:		state->coins = state->coins + 2;
        -:  768:	}
        -:  769:			
    #####:  770:    else if (choice1)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  771:	{
        -:  772:		//discard hand
    #####:  773:		while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  774:	    {
    #####:  775:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  776:	    }
        -:  777:				
        -:  778:		//draw 4
    #####:  779:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  780:	    {
    #####:  781:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  782:	    }
        -:  783:				
        -:  784:		//other players discard hand and redraw if hand size > 4
    #####:  785:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  788:			{
    #####:  789:				if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  790:				{
        -:  791:					//discard hand
    #####:  792:					while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  793:					{
    #####:  794:						discardCard(handPos, i, state, 0);
call    0 never executed
        -:  795:					}
        -:  796:							
        -:  797:					//draw 4
    #####:  798:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  799:					{
    #####:  800:						drawCard(i, state);
call    0 never executed
        -:  801:					}
        -:  802:				}
        -:  803:			}
        -:  804:	    }
        -:  805:				
        -:  806:	}
    #####:  807:		return 0;
        -:  808:}
        -:  809:
function cardEffect called 2000 returned 100% blocks executed 4%
     2000:  810:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  811:{
        -:  812:  int i;
        -:  813:  int j;
        -:  814:  int k;
        -:  815:  int x;
        -:  816:  int index;
     2000:  817:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  818:  int nextPlayer = currentPlayer + 1;
        -:  819:
     2000:  820:  int tributeRevealedCards[2] = {-1, -1};
        -:  821:  int temphand[MAX_HAND];// moved above the if statement
     2000:  822:  int drawntreasure=0;
        -:  823:  int cardDrawn;
     2000:  824:  int z = 0;// this is the counter for the temp hand
     2000:  825:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1001:  826:    nextPlayer = 0;
        -:  827:  }
        -:  828:  
        -:  829:	
        -:  830:  //uses switch to select card and perform actions
     2000:  831:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  832:    {
        -:  833:    case adventurer:
     2000:  834:		return adventurerRefact(currentPlayer, state, temphand, drawntreasure, cardDrawn, z);
call    0 returned 100%
        -:  835:	/*
        -:  836:	  while(drawntreasure<2){
        -:  837:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  838:	  shuffle(currentPlayer, state);
        -:  839:	}
        -:  840:	drawCard(currentPlayer, state);
        -:  841:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  842:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  843:	  drawntreasure++;
        -:  844:	else{
        -:  845:	  temphand[z]=cardDrawn;
        -:  846:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  847:	  z++;
        -:  848:	}
        -:  849:      }
        -:  850:      while(z-1>=0){
        -:  851:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  852:	z=z-1;
        -:  853:      }
        -:  854:      return 0;
        -:  855:	*/
        -:  856:			
        -:  857:    case council_room:
        -:  858:      //+4 Cards
    #####:  859:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  860:	{
    #####:  861:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  862:	}
        -:  863:			
        -:  864:      //+1 Buy
    #####:  865:      state->numBuys++;
        -:  866:			
        -:  867:      //Each other player draws a card
    #####:  868:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  869:	{
    #####:  870:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  871:	    {
    #####:  872:	      drawCard(i, state);
call    0 never executed
        -:  873:	    }
        -:  874:	}
        -:  875:			
        -:  876:      //put played card in played card pile
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:			
    #####:  879:      return 0;
        -:  880:			
        -:  881:    case feast:
        -:  882:      //gain card with cost up to 5
        -:  883:      //Backup hand
    #####:  884:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  885:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  886:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  887:      }
        -:  888:      //Backup hand
        -:  889:
        -:  890:      //Update Coins for Buy
    #####:  891:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  892:      x = 1;//Condition to loop on
    #####:  893:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  894:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  895:	  if (DEBUG)
        -:  896:	    printf("None of that card left, sorry!\n");
        -:  897:
        -:  898:	  if (DEBUG){
        -:  899:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  900:	  }
        -:  901:	}
    #####:  902:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  903:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  904:
        -:  905:	  if (DEBUG){
        -:  906:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  907:	  }
        -:  908:	}
        -:  909:	else{
        -:  910:
        -:  911:	  if (DEBUG){
        -:  912:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  913:	  }
        -:  914:
    #####:  915:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  916:	  x = 0;//No more buying cards
        -:  917:
        -:  918:	  if (DEBUG){
        -:  919:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  920:	  }
        -:  921:
        -:  922:	}
        -:  923:      }     
        -:  924:
        -:  925:      //Reset Hand
    #####:  926:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  927:	state->hand[currentPlayer][i] = temphand[i];
    #####:  928:	temphand[i] = -1;
        -:  929:      }
        -:  930:      //Reset Hand
        -:  931:      			
    #####:  932:      return 0;
        -:  933:			
        -:  934:    case gardens:
    #####:  935:      return -1;
        -:  936:			
        -:  937:    case mine:
    #####:  938:		return mineRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -:  939:		//return 0;
        -:  940:	/*
        -:  941:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  942:
        -:  943:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  944:	{
        -:  945:	  return -1;
        -:  946:	}
        -:  947:		
        -:  948:      if (choice2 > treasure_map || choice2 < curse)
        -:  949:	{
        -:  950:	  return -1;
        -:  951:	}
        -:  952:
        -:  953:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  954:	{
        -:  955:	  return -1;
        -:  956:	}
        -:  957:
        -:  958:      gainCard(choice2, state, 2, currentPlayer);
        -:  959:
        -:  960:      //discard card from hand
        -:  961:      discardCard(handPos, currentPlayer, state, 0);
        -:  962:
        -:  963:      //discard trashed card
        -:  964:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  965:	{
        -:  966:	  if (state->hand[currentPlayer][i] == j)
        -:  967:	    {
        -:  968:	      discardCard(i, currentPlayer, state, 0);			
        -:  969:	      break;
        -:  970:	    }
        -:  971:	}
        -:  972:			
        -:  973:      return 0;
        -:  974:	*/
        -:  975:		
        -:  976:    case remodel:
    #####:  977:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  978:
    #####:  979:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  980:	{
    #####:  981:	  return -1;
        -:  982:	}
        -:  983:
    #####:  984:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  985:
        -:  986:      //discard card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  988:
        -:  989:      //discard trashed card
    #####:  990:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  993:	    {
    #####:  994:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  995:	      break;
        -:  996:	    }
        -:  997:	}
        -:  998:
        -:  999:
    #####: 1000:      return 0;
        -: 1001:		
        -: 1002:    case smithy:
    #####: 1003:		return smithyRefact(currentPlayer, state, handPos, i);
call    0 never executed
        -: 1004:		
        -: 1005:    /*  //+3 Cards
        -: 1006:      for (i = 0; i < 3; i++)
        -: 1007:	{
        -: 1008:	  drawCard(currentPlayer, state);
        -: 1009:	}
        -: 1010:			
        -: 1011:      //discard card from hand
        -: 1012:      discardCard(handPos, currentPlayer, state, 0);
        -: 1013:      return 0;
        -: 1014:	 */
        -: 1015:		
        -: 1016:    case village:
        -: 1017:      //+1 Card
    #####: 1018:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1019:			
        -: 1020:      //+2 Actions
    #####: 1021:      state->numActions = state->numActions + 2;
        -: 1022:			
        -: 1023:      //discard played card from hand
    #####: 1024:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1025:      return 0;
        -: 1026:		
        -: 1027:    case baron:
    #####: 1028:      state->numBuys++;//Increase buys by 1!
    #####: 1029:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1030:	int p = 0;//Iterator for hand!
    #####: 1031:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1032:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1033:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1034:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1035:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1036:	    state->discardCount[currentPlayer]++;
    #####: 1037:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1038:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1039:	    }
    #####: 1040:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1041:	    state->handCount[currentPlayer]--;
    #####: 1042:	    card_not_discarded = 0;//Exit the loop
        -: 1043:	  }
    #####: 1044:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1045:	    if(DEBUG) {
        -: 1046:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1047:	      printf("Must gain an estate if there are any\n");
        -: 1048:	    }
    #####: 1049:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1050:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1051:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1052:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1053:		isGameOver(state);
call    0 never executed
        -: 1054:	      }
        -: 1055:	    }
    #####: 1056:	    card_not_discarded = 0;//Exit the loop
        -: 1057:	  }
        -: 1058:			    
        -: 1059:	  else{
    #####: 1060:	    p++;//Next card
        -: 1061:	  }
        -: 1062:	}
        -: 1063:      }
        -: 1064:			    
        -: 1065:      else{
    #####: 1066:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1067:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1068:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1069:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1070:	    isGameOver(state);
call    0 never executed
        -: 1071:	  }
        -: 1072:	}
        -: 1073:      }
        -: 1074:	    
        -: 1075:      
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case great_hall:
        -: 1079:      //+1 Card
    #####: 1080:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1081:			
        -: 1082:      //+1 Actions
    #####: 1083:      state->numActions++;
        -: 1084:			
        -: 1085:      //discard card from hand
    #####: 1086:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case minion:
    #####: 1090:		return minionRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -: 1091:	/*
        -: 1092:      //+1 action
        -: 1093:      state->numActions++;
        -: 1094:			
        -: 1095:      //discard card from hand
        -: 1096:      discardCard(handPos, currentPlayer, state, 0);
        -: 1097:			
        -: 1098:      if (choice1)		//+2 coins
        -: 1099:	{
        -: 1100:	  state->coins = state->coins + 2;
        -: 1101:	}
        -: 1102:			
        -: 1103:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1104:	{
        -: 1105:	  //discard hand
        -: 1106:	  while(numHandCards(state) > 0)
        -: 1107:	    {
        -: 1108:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1109:	    }
        -: 1110:				
        -: 1111:	  //draw 4
        -: 1112:	  for (i = 0; i < 4; i++)
        -: 1113:	    {
        -: 1114:	      drawCard(currentPlayer, state);
        -: 1115:	    }
        -: 1116:				
        -: 1117:	  //other players discard hand and redraw if hand size > 4
        -: 1118:	  for (i = 0; i < state->numPlayers; i++)
        -: 1119:	    {
        -: 1120:	      if (i != currentPlayer)
        -: 1121:		{
        -: 1122:		  if ( state->handCount[i] > 4 )
        -: 1123:		    {
        -: 1124:		      //discard hand
        -: 1125:		      while( state->handCount[i] > 0 )
        -: 1126:			{
        -: 1127:			  discardCard(handPos, i, state, 0);
        -: 1128:			}
        -: 1129:							
        -: 1130:		      //draw 4
        -: 1131:		      for (j = 0; j < 4; j++)
        -: 1132:			{
        -: 1133:			  drawCard(i, state);
        -: 1134:			}
        -: 1135:		    }
        -: 1136:		}
        -: 1137:	    }
        -: 1138:				
        -: 1139:	}
        -: 1140:      return 0;
        -: 1141:	*/
        -: 1142:	
        -: 1143:    case steward:
    #####: 1144:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1145:	{
        -: 1146:	  //+2 cards
    #####: 1147:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1148:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1149:	}
    #####: 1150:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1151:	{
        -: 1152:	  //+2 coins
    #####: 1153:	  state->coins = state->coins + 2;
        -: 1154:	}
        -: 1155:      else
        -: 1156:	{
        -: 1157:	  //trash 2 cards in hand
    #####: 1158:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1159:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1160:	}
        -: 1161:			
        -: 1162:      //discard card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case tribute:
    #####: 1167:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1168:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1169:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1170:	  state->deckCount[nextPlayer]--;
        -: 1171:	}
    #####: 1172:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1173:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1174:	  state->discardCount[nextPlayer]--;
        -: 1175:	}
        -: 1176:	else{
        -: 1177:	  //No Card to Reveal
        -: 1178:	  if (DEBUG){
        -: 1179:	    printf("No cards to reveal\n");
        -: 1180:	  }
        -: 1181:	}
        -: 1182:      }
        -: 1183:	    
        -: 1184:      else{
    #####: 1185:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1186:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1187:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1188:	    state->deckCount[nextPlayer]++;
    #####: 1189:	    state->discard[nextPlayer][i] = -1;
    #####: 1190:	    state->discardCount[nextPlayer]--;
        -: 1191:	  }
        -: 1192:			    
    #####: 1193:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1194:	} 
    #####: 1195:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1196:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1197:	state->deckCount[nextPlayer]--;
    #####: 1198:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1199:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1200:	state->deckCount[nextPlayer]--;
        -: 1201:      }    
        -: 1202:		       
    #####: 1203:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1204:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1205:	state->playedCardCount++;
    #####: 1206:	tributeRevealedCards[1] = -1;
        -: 1207:      }
        -: 1208:
    #####: 1209:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1210:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1211:	  state->coins += 2;
        -: 1212:	}
        -: 1213:		    
    #####: 1214:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1215:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1216:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1217:	}
        -: 1218:	else{//Action Card
    #####: 1219:	  state->numActions = state->numActions + 2;
        -: 1220:	}
        -: 1221:      }
        -: 1222:	    
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case ambassador:
    #####: 1226:      j = 0;		//used to check if player has enough cards to discard
        -: 1227:
    #####: 1228:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1229:	{
    #####: 1230:	  return -1;				
        -: 1231:	}
        -: 1232:
    #####: 1233:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
    #####: 1235:	  return -1;
        -: 1236:	}
        -: 1237:
    #####: 1238:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1239:	{
    #####: 1240:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1241:	    {
    #####: 1242:	      j++;
        -: 1243:	    }
        -: 1244:	}
    #####: 1245:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1246:	{
    #####: 1247:	  return -1;				
        -: 1248:	}
        -: 1249:
        -: 1250:      if (DEBUG) 
        -: 1251:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1252:
        -: 1253:      //increase supply count for choosen card by amount being discarded
    #####: 1254:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1255:			
        -: 1256:      //each other player gains a copy of revealed card
    #####: 1257:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1258:	{
    #####: 1259:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1260:	    {
    #####: 1261:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1262:	    }
        -: 1263:	}
        -: 1264:
        -: 1265:      //discard played card from hand
    #####: 1266:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1267:
        -: 1268:      //trash copies of cards returned to supply
    #####: 1269:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1270:	{
    #####: 1271:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1272:	    {
    #####: 1273:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1274:		{
    #####: 1275:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1276:		  break;
        -: 1277:		}
        -: 1278:	    }
        -: 1279:	}			
        -: 1280:
    #####: 1281:      return 0;
        -: 1282:		
        -: 1283:    case cutpurse:
    #####: 1284:		cutpurseRefact(currentPlayer, state, handPos, i, j, k);
call    0 never executed
        -: 1285:	/*
        -: 1286:      updateCoins(currentPlayer, state, 2);
        -: 1287:      for (i = 0; i < state->numPlayers; i++)
        -: 1288:	{
        -: 1289:	  if (i != currentPlayer)
        -: 1290:	    {
        -: 1291:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1292:		{
        -: 1293:		  if (state->hand[i][j] == copper)
        -: 1294:		    {
        -: 1295:		      discardCard(j, i, state, 0);
        -: 1296:		      break;
        -: 1297:		    }
        -: 1298:		  if (j == state->handCount[i])
        -: 1299:		    {
        -: 1300:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1301:			{
        -: 1302:			  if (DEBUG)
        -: 1303:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1304:			}	
        -: 1305:		      break;
        -: 1306:		    }		
        -: 1307:		}
        -: 1308:					
        -: 1309:	    }
        -: 1310:				
        -: 1311:	}				
        -: 1312:
        -: 1313:      //discard played card from hand
        -: 1314:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1315:
        -: 1316:      return 0;
        -: 1317:	*/
        -: 1318:		
        -: 1319:    case embargo: 
        -: 1320:      //+2 Coins
    #####: 1321:      state->coins = state->coins + 2;
        -: 1322:			
        -: 1323:      //see if selected pile is in play
    #####: 1324:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1325:	{
    #####: 1326:	  return -1;
        -: 1327:	}
        -: 1328:			
        -: 1329:      //add embargo token to selected supply pile
    #####: 1330:      state->embargoTokens[choice1]++;
        -: 1331:			
        -: 1332:      //trash card
    #####: 1333:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1334:      return 0;
        -: 1335:		
        -: 1336:    case outpost:
        -: 1337:      //set outpost flag
    #####: 1338:      state->outpostPlayed++;
        -: 1339:			
        -: 1340:      //discard card
    #####: 1341:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1342:      return 0;
        -: 1343:		
        -: 1344:    case salvager:
        -: 1345:      //+1 buy
    #####: 1346:      state->numBuys++;
        -: 1347:			
    #####: 1348:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1349:	{
        -: 1350:	  //gain coins equal to trashed card
    #####: 1351:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1352:	  //trash card
    #####: 1353:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1354:	}
        -: 1355:			
        -: 1356:      //discard card
    #####: 1357:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1358:      return 0;
        -: 1359:		
        -: 1360:    case sea_hag:
    #####: 1361:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1362:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1363:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1364:	  state->discardCount[i]++;
    #####: 1365:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1366:	}
        -: 1367:      }
    #####: 1368:      return 0;
        -: 1369:		
        -: 1370:    case treasure_map:
        -: 1371:      //search hand for another treasure_map
    #####: 1372:      index = -1;
    #####: 1373:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1374:	{
    #####: 1375:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1376:	    {
    #####: 1377:	      index = i;
    #####: 1378:	      break;
        -: 1379:	    }
        -: 1380:	}
    #####: 1381:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1382:	{
        -: 1383:	  //trash both treasure cards
    #####: 1384:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1385:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1386:
        -: 1387:	  //gain 4 Gold cards
    #####: 1388:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1389:	    {
    #####: 1390:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1391:	    }
        -: 1392:				
        -: 1393:	  //return success
    #####: 1394:	  return 1;
        -: 1395:	}
        -: 1396:			
        -: 1397:      //no second treasure_map found in hand
    #####: 1398:      return -1;
        -: 1399:    }
        -: 1400:	
    #####: 1401:  return -1;
        -: 1402:}
        -: 1403:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1404:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1405:{
        -: 1406:  //if card is not trashed, added to Played pile 
    #####: 1407:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1408:    {
        -: 1409:      //add card to played pile
    #####: 1410:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1411:      state->playedCardCount++;
        -: 1412:    }
        -: 1413:  //set played card to -1
    #####: 1414:  state->hand[currentPlayer][handPos] = -1;
        -: 1415:	
        -: 1416:  //remove card from player's hand
    #####: 1417:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1418:    {
        -: 1419:      //reduce number of cards in hand
    #####: 1420:      state->handCount[currentPlayer]--;
        -: 1421:    }
    #####: 1422:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1423:    {
        -: 1424:      //reduce number of cards in hand
    #####: 1425:      state->handCount[currentPlayer]--;
        -: 1426:    }
        -: 1427:  else 	
        -: 1428:    {
        -: 1429:      //replace discarded card with last card in hand
    #####: 1430:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1431:      //set last card to -1
    #####: 1432:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1433:      //reduce number of cards in hand
    #####: 1434:      state->handCount[currentPlayer]--;
        -: 1435:    }
        -: 1436:	
    #####: 1437:  return 0;
        -: 1438:}
        -: 1439:
function gainCard called 2000 returned 100% blocks executed 70%
     2000: 1440:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1441:{
        -: 1442:  //Note: supplyPos is enum of choosen card
        -: 1443:	
        -: 1444:  //check if supply pile is empty (0) or card is not used in game (-1)
     2000: 1445:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1446:    {
    #####: 1447:      return -1;
        -: 1448:    }
        -: 1449:	
        -: 1450:  //added card for [whoseTurn] current player:
        -: 1451:  // toFlag = 0 : add to discard
        -: 1452:  // toFlag = 1 : add to deck
        -: 1453:  // toFlag = 2 : add to hand
        -: 1454:
     2000: 1455:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1456:    {
    #####: 1457:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1458:      state->deckCount[player]++;
        -: 1459:    }
     2000: 1460:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1461:    {
     2000: 1462:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     2000: 1463:      state->handCount[player]++;
        -: 1464:    }
        -: 1465:  else
        -: 1466:    {
    #####: 1467:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1468:      state->discardCount[player]++;
        -: 1469:    }
        -: 1470:	
        -: 1471:  //decrease number in supply pile
     2000: 1472:  state->supplyCount[supplyPos]--;
        -: 1473:	 
     2000: 1474:  return 0;
        -: 1475:}
        -: 1476:
function updateCoins called 4000 returned 100% blocks executed 100%
     4000: 1477:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1478:{
        -: 1479:  int i;
        -: 1480:	
        -: 1481:  //reset coin count
     4000: 1482:  state->coins = 0;
        -: 1483:  
        -: 1484:  //add coins for each Treasure card in player's hand
   494696: 1485:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1486:    {
   490696: 1487:      if (state->hand[player][i] == copper)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1488:	{
    27611: 1489:	  state->coins += 1;
        -: 1490:	}
   463085: 1491:      else if (state->hand[player][i] == silver)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1492:	{
    20994: 1493:	  state->coins += 2;
        -: 1494:	}
   442091: 1495:      else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1496:	{
    17304: 1497:	  state->coins += 3;
        -: 1498:	}	
        -: 1499:    }	
        -: 1500:
        -: 1501:  //add bonus
     4000: 1502:  state->coins += bonus;
        -: 1503:
     4000: 1504:  return 0;
        -: 1505:}
        -: 1506:
        -: 1507:
        -: 1508://end of dominion.c
        -: 1509:
File 'dominion.c'
Lines executed:28.14% of 558
Branches executed:29.16% of 415
Taken at least once:20.24% of 415
Calls executed:17.89% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 69750 returned 100% blocks executed 83%
    69750:    8:int compare(const void* a, const void* b) {
    69750:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    69750:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    18600:   12:    return -1;
    51150:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2000 returned 100% blocks executed 94%
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
call    0 returned 100%
     2000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   220000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   200000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2000:   73:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   74:    {
     1350:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      650:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
      650:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2000:   87:  if (numPlayers == 2)
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
        -:   88:    {
     1350:   89:      state->supplyCount[estate] = 8;
     1350:   90:      state->supplyCount[duchy] = 8;
     1350:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      650:   95:      state->supplyCount[estate] = 12;
      650:   96:      state->supplyCount[duchy] = 12;
      650:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  102:  state->supplyCount[silver] = 40;
     2000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   330000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   310000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 68% (fallthrough)
branch  1 taken 33%
     1350:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      650:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    18000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    20000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   290000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     6650:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
     4650:  140:      state->deckCount[i] = 0;
    18600:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    13950:  143:	  state->deck[i][j] = estate;
    13950:  144:	  state->deckCount[i]++;
        -:  145:	}
    37200:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    32550:  148:	  state->deck[i][j] = copper;
    32550:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     6650:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
     4650:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     6650:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     4650:  166:      state->handCount[i] = 0;
     4650:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    54000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2000:  182:  state->outpostPlayed = 0;
     2000:  183:  state->phase = 0;
     2000:  184:  state->numActions = 1;
     2000:  185:  state->numBuys = 1;
     2000:  186:  state->playedCardCount = 0;
     2000:  187:  state->whoseTurn = 0;
     2000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     2000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     2000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 15924 returned 100% blocks executed 100%
    15924:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    15924:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    15924:  209:  if (state->deckCount[player] < 1)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
    11274:  210:    return -1;
     4650:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    55800:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    46500:  216:    newDeck[newDeckPos] = state->deck[player][card];
    46500:  217:    newDeckPos++;
   162278:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
   115778:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    46500:  221:    state->deckCount[player]--;
        -:  222:  }
    51150:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    46500:  224:    state->deck[player][i] = newDeck[i];
    46500:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     4650:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 2000 returned 100% blocks executed 73%
     2000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     2000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     2000:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     2000:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     2000:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
     2000:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     2000:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
     2000:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
     2000:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
     2000:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 2000 returned 100% blocks executed 100%
     2000:  315:int handCard(int handPos, struct gameState *state) {
     2000:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 2000 returned 100% blocks executed 100%
     2000:  320:int supplyCount(int card, struct gameState *state) {
     2000:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4000 returned 100% blocks executed 100%
     4000:  346:int whoseTurn(struct gameState *state) {
     4000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 63162 returned 100% blocks executed 85%
    63162:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    63162:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     5637:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     5637:  538:    state->deckCount[player] = state->discardCount[player];
     5637:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5637:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5637:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5637:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5637:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5637:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     5637:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    57525:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    57525:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    57525:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    57525:  576:    state->deckCount[player]--;
    57525:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    57525:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function smithyRefact called 0 returned 0% blocks executed 0%
    #####:  646:int smithyRefact(int currentPlayer, struct gameState *state, int handPos, int i)
        -:  647:{
        -:  648:	//+3 Cards
    #####:  649:      for (i = 0; i < 5; i++) // changed from 3 cards to 5
branch  0 never executed
branch  1 never executed
        -:  650:	{
    #####:  651:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  652:	}
        -:  653:			
        -:  654:      //discard card from hand
    #####:  655:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  656:      return 0;
        -:  657:}
        -:  658:
function adventurerRefact called 2000 returned 100% blocks executed 100%
     2000:  659:int adventurerRefact(int currentPlayer, struct gameState *state, int temphand[], int drawntreasure, int cardDrawn, int z)
        -:  660:{	  
    57162:  661:	while(drawntreasure<2){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    53162:  662:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
     5637:  663:			shuffle(currentPlayer, state);
call    0 returned 100%
        -:  664:		}
    53162:  665:	drawCard(currentPlayer, state);
call    0 returned 100%
    53162:  666:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    53162:  667:	if (cardDrawn == copper || cardDrawn == silver) // removed gold as part of the statement || cardDrawn == gold
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
     4000:  668:		drawntreasure++;
        -:  669:	else{
    49162:  670:		temphand[z]=cardDrawn;
    49162:  671:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    49162:  672:		z++;
        -:  673:		}
        -:  674:    }
        -:  675:    
    53162:  676:	while(z-1>=0){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    49162:  677:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    49162:  678:		z=z-1;
        -:  679:    }
     2000:  680:    return 0;
        -:  681:}
        -:  682:
function cutpurseRefact called 0 returned 0% blocks executed 0%
    #####:  683:int cutpurseRefact(int currentPlayer, struct gameState *state, int handPos, int i, int j, int k)
        -:  684:{
    #####:  685:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  686:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  687:	{
    #####:  688:	  if (i == currentPlayer)  // removed not from statement != currentPlayer
branch  0 never executed
branch  1 never executed
        -:  689:	    {
    #####:  690:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  691:		{
    #####:  692:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  693:		    {
    #####:  694:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  695:		      break;
        -:  696:		    }
    #####:  697:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  698:		    {
    #####:  699:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  700:			{
        -:  701:			  if (DEBUG)
        -:  702:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  703:			}	
    #####:  704:		      break;
        -:  705:		    }		
        -:  706:		}
        -:  707:					
        -:  708:	    }
        -:  709:				
        -:  710:	}				
        -:  711:
        -:  712:      //discard played card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  714:
    #####:  715:      return 0;
        -:  716:}
        -:  717:
function mineRefact called 0 returned 0% blocks executed 0%
    #####:  718:int mineRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  719:{
    #####:  720:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:		
    #####:  727:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  728:	{
    #####:  729:	  return -1;
        -:  730:	}
        -:  731:
    #####:  732:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  733:	{
    #####:  734:	  return -1;
        -:  735:	}
        -:  736:
    #####:  737:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  738:
        -:  739:      //discard card from hand
    #####:  740:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  741:
        -:  742:      //discard trashed card
    #####:  743:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  744:	{
    #####:  745:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  746:	    {
    #####:  747:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  748:	      break;
        -:  749:	    }
        -:  750:	}
        -:  751:			
    #####:  752:      return 0;
        -:  753:}
        -:  754:
function minionRefact called 0 returned 0% blocks executed 0%
    #####:  755:int minionRefact(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int i, int j)
        -:  756:{
        -:  757:	//+1 action
    #####:  758:	state->numActions++;
        -:  759:			
        -:  760:	//discard card from hand
    #####:  761:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  762:	
        -:  763:
        -:  764:	//reversed choices 1 & 2
    #####:  765:	if (choice2)		//+2 coins 
branch  0 never executed
branch  1 never executed
        -:  766:	{
    #####:  767:		state->coins = state->coins + 2;
        -:  768:	}
        -:  769:			
    #####:  770:    else if (choice1)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  771:	{
        -:  772:		//discard hand
    #####:  773:		while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  774:	    {
    #####:  775:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  776:	    }
        -:  777:				
        -:  778:		//draw 4
    #####:  779:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  780:	    {
    #####:  781:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  782:	    }
        -:  783:				
        -:  784:		//other players discard hand and redraw if hand size > 4
    #####:  785:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  788:			{
    #####:  789:				if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  790:				{
        -:  791:					//discard hand
    #####:  792:					while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  793:					{
    #####:  794:						discardCard(handPos, i, state, 0);
call    0 never executed
        -:  795:					}
        -:  796:							
        -:  797:					//draw 4
    #####:  798:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  799:					{
    #####:  800:						drawCard(i, state);
call    0 never executed
        -:  801:					}
        -:  802:				}
        -:  803:			}
        -:  804:	    }
        -:  805:				
        -:  806:	}
    #####:  807:		return 0;
        -:  808:}
        -:  809:
function cardEffect called 2000 returned 100% blocks executed 4%
     2000:  810:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  811:{
        -:  812:  int i;
        -:  813:  int j;
        -:  814:  int k;
        -:  815:  int x;
        -:  816:  int index;
     2000:  817:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     2000:  818:  int nextPlayer = currentPlayer + 1;
        -:  819:
     2000:  820:  int tributeRevealedCards[2] = {-1, -1};
        -:  821:  int temphand[MAX_HAND];// moved above the if statement
     2000:  822:  int drawntreasure=0;
        -:  823:  int cardDrawn;
     2000:  824:  int z = 0;// this is the counter for the temp hand
     2000:  825:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1001:  826:    nextPlayer = 0;
        -:  827:  }
        -:  828:  
        -:  829:	
        -:  830:  //uses switch to select card and perform actions
     2000:  831:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  832:    {
        -:  833:    case adventurer:
     2000:  834:		return adventurerRefact(currentPlayer, state, temphand, drawntreasure, cardDrawn, z);
call    0 returned 100%
        -:  835:	/*
        -:  836:	  while(drawntreasure<2){
        -:  837:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  838:	  shuffle(currentPlayer, state);
        -:  839:	}
        -:  840:	drawCard(currentPlayer, state);
        -:  841:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  842:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  843:	  drawntreasure++;
        -:  844:	else{
        -:  845:	  temphand[z]=cardDrawn;
        -:  846:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  847:	  z++;
        -:  848:	}
        -:  849:      }
        -:  850:      while(z-1>=0){
        -:  851:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  852:	z=z-1;
        -:  853:      }
        -:  854:      return 0;
        -:  855:	*/
        -:  856:			
        -:  857:    case council_room:
        -:  858:      //+4 Cards
    #####:  859:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  860:	{
    #####:  861:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  862:	}
        -:  863:			
        -:  864:      //+1 Buy
    #####:  865:      state->numBuys++;
        -:  866:			
        -:  867:      //Each other player draws a card
    #####:  868:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  869:	{
    #####:  870:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  871:	    {
    #####:  872:	      drawCard(i, state);
call    0 never executed
        -:  873:	    }
        -:  874:	}
        -:  875:			
        -:  876:      //put played card in played card pile
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:			
    #####:  879:      return 0;
        -:  880:			
        -:  881:    case feast:
        -:  882:      //gain card with cost up to 5
        -:  883:      //Backup hand
    #####:  884:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  885:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  886:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  887:      }
        -:  888:      //Backup hand
        -:  889:
        -:  890:      //Update Coins for Buy
    #####:  891:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  892:      x = 1;//Condition to loop on
    #####:  893:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  894:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  895:	  if (DEBUG)
        -:  896:	    printf("None of that card left, sorry!\n");
        -:  897:
        -:  898:	  if (DEBUG){
        -:  899:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  900:	  }
        -:  901:	}
    #####:  902:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  903:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  904:
        -:  905:	  if (DEBUG){
        -:  906:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  907:	  }
        -:  908:	}
        -:  909:	else{
        -:  910:
        -:  911:	  if (DEBUG){
        -:  912:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  913:	  }
        -:  914:
    #####:  915:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  916:	  x = 0;//No more buying cards
        -:  917:
        -:  918:	  if (DEBUG){
        -:  919:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  920:	  }
        -:  921:
        -:  922:	}
        -:  923:      }     
        -:  924:
        -:  925:      //Reset Hand
    #####:  926:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  927:	state->hand[currentPlayer][i] = temphand[i];
    #####:  928:	temphand[i] = -1;
        -:  929:      }
        -:  930:      //Reset Hand
        -:  931:      			
    #####:  932:      return 0;
        -:  933:			
        -:  934:    case gardens:
    #####:  935:      return -1;
        -:  936:			
        -:  937:    case mine:
    #####:  938:		return mineRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -:  939:		//return 0;
        -:  940:	/*
        -:  941:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  942:
        -:  943:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  944:	{
        -:  945:	  return -1;
        -:  946:	}
        -:  947:		
        -:  948:      if (choice2 > treasure_map || choice2 < curse)
        -:  949:	{
        -:  950:	  return -1;
        -:  951:	}
        -:  952:
        -:  953:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  954:	{
        -:  955:	  return -1;
        -:  956:	}
        -:  957:
        -:  958:      gainCard(choice2, state, 2, currentPlayer);
        -:  959:
        -:  960:      //discard card from hand
        -:  961:      discardCard(handPos, currentPlayer, state, 0);
        -:  962:
        -:  963:      //discard trashed card
        -:  964:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  965:	{
        -:  966:	  if (state->hand[currentPlayer][i] == j)
        -:  967:	    {
        -:  968:	      discardCard(i, currentPlayer, state, 0);			
        -:  969:	      break;
        -:  970:	    }
        -:  971:	}
        -:  972:			
        -:  973:      return 0;
        -:  974:	*/
        -:  975:		
        -:  976:    case remodel:
    #####:  977:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  978:
    #####:  979:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  980:	{
    #####:  981:	  return -1;
        -:  982:	}
        -:  983:
    #####:  984:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  985:
        -:  986:      //discard card from hand
    #####:  987:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  988:
        -:  989:      //discard trashed card
    #####:  990:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  993:	    {
    #####:  994:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  995:	      break;
        -:  996:	    }
        -:  997:	}
        -:  998:
        -:  999:
    #####: 1000:      return 0;
        -: 1001:		
        -: 1002:    case smithy:
    #####: 1003:		return smithyRefact(currentPlayer, state, handPos, i);
call    0 never executed
        -: 1004:		
        -: 1005:    /*  //+3 Cards
        -: 1006:      for (i = 0; i < 3; i++)
        -: 1007:	{
        -: 1008:	  drawCard(currentPlayer, state);
        -: 1009:	}
        -: 1010:			
        -: 1011:      //discard card from hand
        -: 1012:      discardCard(handPos, currentPlayer, state, 0);
        -: 1013:      return 0;
        -: 1014:	 */
        -: 1015:		
        -: 1016:    case village:
        -: 1017:      //+1 Card
    #####: 1018:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1019:			
        -: 1020:      //+2 Actions
    #####: 1021:      state->numActions = state->numActions + 2;
        -: 1022:			
        -: 1023:      //discard played card from hand
    #####: 1024:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1025:      return 0;
        -: 1026:		
        -: 1027:    case baron:
    #####: 1028:      state->numBuys++;//Increase buys by 1!
    #####: 1029:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1030:	int p = 0;//Iterator for hand!
    #####: 1031:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1032:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1033:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1034:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1035:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1036:	    state->discardCount[currentPlayer]++;
    #####: 1037:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1038:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1039:	    }
    #####: 1040:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1041:	    state->handCount[currentPlayer]--;
    #####: 1042:	    card_not_discarded = 0;//Exit the loop
        -: 1043:	  }
    #####: 1044:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1045:	    if(DEBUG) {
        -: 1046:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1047:	      printf("Must gain an estate if there are any\n");
        -: 1048:	    }
    #####: 1049:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1050:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1051:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1052:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1053:		isGameOver(state);
call    0 never executed
        -: 1054:	      }
        -: 1055:	    }
    #####: 1056:	    card_not_discarded = 0;//Exit the loop
        -: 1057:	  }
        -: 1058:			    
        -: 1059:	  else{
    #####: 1060:	    p++;//Next card
        -: 1061:	  }
        -: 1062:	}
        -: 1063:      }
        -: 1064:			    
        -: 1065:      else{
    #####: 1066:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1067:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1068:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1069:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1070:	    isGameOver(state);
call    0 never executed
        -: 1071:	  }
        -: 1072:	}
        -: 1073:      }
        -: 1074:	    
        -: 1075:      
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case great_hall:
        -: 1079:      //+1 Card
    #####: 1080:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1081:			
        -: 1082:      //+1 Actions
    #####: 1083:      state->numActions++;
        -: 1084:			
        -: 1085:      //discard card from hand
    #####: 1086:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case minion:
    #####: 1090:		return minionRefact(currentPlayer, state, handPos, choice1, choice2, i, j);
call    0 never executed
        -: 1091:	/*
        -: 1092:      //+1 action
        -: 1093:      state->numActions++;
        -: 1094:			
        -: 1095:      //discard card from hand
        -: 1096:      discardCard(handPos, currentPlayer, state, 0);
        -: 1097:			
        -: 1098:      if (choice1)		//+2 coins
        -: 1099:	{
        -: 1100:	  state->coins = state->coins + 2;
        -: 1101:	}
        -: 1102:			
        -: 1103:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1104:	{
        -: 1105:	  //discard hand
        -: 1106:	  while(numHandCards(state) > 0)
        -: 1107:	    {
        -: 1108:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1109:	    }
        -: 1110:				
        -: 1111:	  //draw 4
        -: 1112:	  for (i = 0; i < 4; i++)
        -: 1113:	    {
        -: 1114:	      drawCard(currentPlayer, state);
        -: 1115:	    }
        -: 1116:				
        -: 1117:	  //other players discard hand and redraw if hand size > 4
        -: 1118:	  for (i = 0; i < state->numPlayers; i++)
        -: 1119:	    {
        -: 1120:	      if (i != currentPlayer)
        -: 1121:		{
        -: 1122:		  if ( state->handCount[i] > 4 )
        -: 1123:		    {
        -: 1124:		      //discard hand
        -: 1125:		      while( state->handCount[i] > 0 )
        -: 1126:			{
        -: 1127:			  discardCard(handPos, i, state, 0);
        -: 1128:			}
        -: 1129:							
        -: 1130:		      //draw 4
        -: 1131:		      for (j = 0; j < 4; j++)
        -: 1132:			{
        -: 1133:			  drawCard(i, state);
        -: 1134:			}
        -: 1135:		    }
        -: 1136:		}
        -: 1137:	    }
        -: 1138:				
        -: 1139:	}
        -: 1140:      return 0;
        -: 1141:	*/
        -: 1142:	
        -: 1143:    case steward:
    #####: 1144:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1145:	{
        -: 1146:	  //+2 cards
    #####: 1147:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1148:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1149:	}
    #####: 1150:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1151:	{
        -: 1152:	  //+2 coins
    #####: 1153:	  state->coins = state->coins + 2;
        -: 1154:	}
        -: 1155:      else
        -: 1156:	{
        -: 1157:	  //trash 2 cards in hand
    #####: 1158:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1159:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1160:	}
        -: 1161:			
        -: 1162:      //discard card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case tribute:
    #####: 1167:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1168:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1169:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1170:	  state->deckCount[nextPlayer]--;
        -: 1171:	}
    #####: 1172:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1173:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1174:	  state->discardCount[nextPlayer]--;
        -: 1175:	}
        -: 1176:	else{
        -: 1177:	  //No Card to Reveal
        -: 1178:	  if (DEBUG){
        -: 1179:	    printf("No cards to reveal\n");
        -: 1180:	  }
        -: 1181:	}
        -: 1182:      }
        -: 1183:	    
        -: 1184:      else{
    #####: 1185:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1186:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1187:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1188:	    state->deckCount[nextPlayer]++;
    #####: 1189:	    state->discard[nextPlayer][i] = -1;
    #####: 1190:	    state->discardCount[nextPlayer]--;
        -: 1191:	  }
        -: 1192:			    
    #####: 1193:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1194:	} 
    #####: 1195:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1196:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1197:	state->deckCount[nextPlayer]--;
    #####: 1198:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1199:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1200:	state->deckCount[nextPlayer]--;
        -: 1201:      }    
        -: 1202:		       
    #####: 1203:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1204:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1205:	state->playedCardCount++;
    #####: 1206:	tributeRevealedCards[1] = -1;
        -: 1207:      }
        -: 1208:
    #####: 1209:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1210:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1211:	  state->coins += 2;
        -: 1212:	}
        -: 1213:		    
    #####: 1214:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1215:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1216:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1217:	}
        -: 1218:	else{//Action Card
    #####: 1219:	  state->numActions = state->numActions + 2;
        -: 1220:	}
        -: 1221:      }
        -: 1222:	    
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case ambassador:
    #####: 1226:      j = 0;		//used to check if player has enough cards to discard
        -: 1227:
    #####: 1228:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1229:	{
    #####: 1230:	  return -1;				
        -: 1231:	}
        -: 1232:
    #####: 1233:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
    #####: 1235:	  return -1;
        -: 1236:	}
        -: 1237:
    #####: 1238:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1239:	{
    #####: 1240:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1241:	    {
    #####: 1242:	      j++;
        -: 1243:	    }
        -: 1244:	}
    #####: 1245:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1246:	{
    #####: 1247:	  return -1;				
        -: 1248:	}
        -: 1249:
        -: 1250:      if (DEBUG) 
        -: 1251:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1252:
        -: 1253:      //increase supply count for choosen card by amount being discarded
    #####: 1254:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1255:			
        -: 1256:      //each other player gains a copy of revealed card
    #####: 1257:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1258:	{
    #####: 1259:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1260:	    {
    #####: 1261:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1262:	    }
        -: 1263:	}
        -: 1264:
        -: 1265:      //discard played card from hand
    #####: 1266:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1267:
        -: 1268:      //trash copies of cards returned to supply
    #####: 1269:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1270:	{
    #####: 1271:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1272:	    {
    #####: 1273:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1274:		{
    #####: 1275:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1276:		  break;
        -: 1277:		}
        -: 1278:	    }
        -: 1279:	}			
        -: 1280:
    #####: 1281:      return 0;
        -: 1282:		
        -: 1283:    case cutpurse:
    #####: 1284:		cutpurseRefact(currentPlayer, state, handPos, i, j, k);
call    0 never executed
        -: 1285:	/*
        -: 1286:      updateCoins(currentPlayer, state, 2);
        -: 1287:      for (i = 0; i < state->numPlayers; i++)
        -: 1288:	{
        -: 1289:	  if (i != currentPlayer)
        -: 1290:	    {
        -: 1291:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1292:		{
        -: 1293:		  if (state->hand[i][j] == copper)
        -: 1294:		    {
        -: 1295:		      discardCard(j, i, state, 0);
        -: 1296:		      break;
        -: 1297:		    }
        -: 1298:		  if (j == state->handCount[i])
        -: 1299:		    {
        -: 1300:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1301:			{
        -: 1302:			  if (DEBUG)
        -: 1303:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1304:			}	
        -: 1305:		      break;
        -: 1306:		    }		
        -: 1307:		}
        -: 1308:					
        -: 1309:	    }
        -: 1310:				
        -: 1311:	}				
        -: 1312:
        -: 1313:      //discard played card from hand
        -: 1314:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1315:
        -: 1316:      return 0;
        -: 1317:	*/
        -: 1318:		
        -: 1319:    case embargo: 
        -: 1320:      //+2 Coins
    #####: 1321:      state->coins = state->coins + 2;
        -: 1322:			
        -: 1323:      //see if selected pile is in play
    #####: 1324:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1325:	{
    #####: 1326:	  return -1;
        -: 1327:	}
        -: 1328:			
        -: 1329:      //add embargo token to selected supply pile
    #####: 1330:      state->embargoTokens[choice1]++;
        -: 1331:			
        -: 1332:      //trash card
    #####: 1333:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1334:      return 0;
        -: 1335:		
        -: 1336:    case outpost:
        -: 1337:      //set outpost flag
    #####: 1338:      state->outpostPlayed++;
        -: 1339:			
        -: 1340:      //discard card
    #####: 1341:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1342:      return 0;
        -: 1343:		
        -: 1344:    case salvager:
        -: 1345:      //+1 buy
    #####: 1346:      state->numBuys++;
        -: 1347:			
    #####: 1348:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1349:	{
        -: 1350:	  //gain coins equal to trashed card
    #####: 1351:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1352:	  //trash card
    #####: 1353:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1354:	}
        -: 1355:			
        -: 1356:      //discard card
    #####: 1357:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1358:      return 0;
        -: 1359:		
        -: 1360:    case sea_hag:
    #####: 1361:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1362:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1363:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1364:	  state->discardCount[i]++;
    #####: 1365:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1366:	}
        -: 1367:      }
    #####: 1368:      return 0;
        -: 1369:		
        -: 1370:    case treasure_map:
        -: 1371:      //search hand for another treasure_map
    #####: 1372:      index = -1;
    #####: 1373:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1374:	{
    #####: 1375:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1376:	    {
    #####: 1377:	      index = i;
    #####: 1378:	      break;
        -: 1379:	    }
        -: 1380:	}
    #####: 1381:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1382:	{
        -: 1383:	  //trash both treasure cards
    #####: 1384:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1385:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1386:
        -: 1387:	  //gain 4 Gold cards
    #####: 1388:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1389:	    {
    #####: 1390:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1391:	    }
        -: 1392:				
        -: 1393:	  //return success
    #####: 1394:	  return 1;
        -: 1395:	}
        -: 1396:			
        -: 1397:      //no second treasure_map found in hand
    #####: 1398:      return -1;
        -: 1399:    }
        -: 1400:	
    #####: 1401:  return -1;
        -: 1402:}
        -: 1403:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1404:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1405:{
        -: 1406:  //if card is not trashed, added to Played pile 
    #####: 1407:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1408:    {
        -: 1409:      //add card to played pile
    #####: 1410:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1411:      state->playedCardCount++;
        -: 1412:    }
        -: 1413:  //set played card to -1
    #####: 1414:  state->hand[currentPlayer][handPos] = -1;
        -: 1415:	
        -: 1416:  //remove card from player's hand
    #####: 1417:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1418:    {
        -: 1419:      //reduce number of cards in hand
    #####: 1420:      state->handCount[currentPlayer]--;
        -: 1421:    }
    #####: 1422:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1423:    {
        -: 1424:      //reduce number of cards in hand
    #####: 1425:      state->handCount[currentPlayer]--;
        -: 1426:    }
        -: 1427:  else 	
        -: 1428:    {
        -: 1429:      //replace discarded card with last card in hand
    #####: 1430:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1431:      //set last card to -1
    #####: 1432:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1433:      //reduce number of cards in hand
    #####: 1434:      state->handCount[currentPlayer]--;
        -: 1435:    }
        -: 1436:	
    #####: 1437:  return 0;
        -: 1438:}
        -: 1439:
function gainCard called 2000 returned 100% blocks executed 70%
     2000: 1440:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1441:{
        -: 1442:  //Note: supplyPos is enum of choosen card
        -: 1443:	
        -: 1444:  //check if supply pile is empty (0) or card is not used in game (-1)
     2000: 1445:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1446:    {
    #####: 1447:      return -1;
        -: 1448:    }
        -: 1449:	
        -: 1450:  //added card for [whoseTurn] current player:
        -: 1451:  // toFlag = 0 : add to discard
        -: 1452:  // toFlag = 1 : add to deck
        -: 1453:  // toFlag = 2 : add to hand
        -: 1454:
     2000: 1455:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1456:    {
    #####: 1457:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1458:      state->deckCount[player]++;
        -: 1459:    }
     2000: 1460:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1461:    {
     2000: 1462:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     2000: 1463:      state->handCount[player]++;
        -: 1464:    }
        -: 1465:  else
        -: 1466:    {
    #####: 1467:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1468:      state->discardCount[player]++;
        -: 1469:    }
        -: 1470:	
        -: 1471:  //decrease number in supply pile
     2000: 1472:  state->supplyCount[supplyPos]--;
        -: 1473:	 
     2000: 1474:  return 0;
        -: 1475:}
        -: 1476:
function updateCoins called 4000 returned 100% blocks executed 100%
     4000: 1477:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1478:{
        -: 1479:  int i;
        -: 1480:	
        -: 1481:  //reset coin count
     4000: 1482:  state->coins = 0;
        -: 1483:  
        -: 1484:  //add coins for each Treasure card in player's hand
   494696: 1485:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1486:    {
   490696: 1487:      if (state->hand[player][i] == copper)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1488:	{
    27611: 1489:	  state->coins += 1;
        -: 1490:	}
   463085: 1491:      else if (state->hand[player][i] == silver)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1492:	{
    20994: 1493:	  state->coins += 2;
        -: 1494:	}
   442091: 1495:      else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1496:	{
    17304: 1497:	  state->coins += 3;
        -: 1498:	}	
        -: 1499:    }	
        -: 1500:
        -: 1501:  //add bonus
     4000: 1502:  state->coins += bonus;
        -: 1503:
     4000: 1504:  return 0;
        -: 1505:}
        -: 1506:
        -: 1507:
        -: 1508://end of dominion.c
        -: 1509:
